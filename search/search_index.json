{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Lilia is an advanced roleplay gamemode framework for Garry's Mod. Inspired by Lillia, a character from League of Legends, Lilia aims to fulfill your dreams of creating immersive roleplay servers. With a focus on stability, rich features, and open-source flexibility, Lilia provides a platform for users to bring their visions to life easily and effectively.</p>"},{"location":"#server-owners","title":"Server Owners","text":"<p>If you're looking to get your Lilia server up and running as soon as possible, check out the Installation Tutorial guide in the manual.</p>"},{"location":"#community","title":"Community","text":"<p>Questions? Want to show off your work? Maybe drop a new module release? Come join our community Discord server.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Lilia is still early in its lifespan, and there are still a few things missing here and there. Contributions to the documentation\u2014from function references to simple typo fixes\u2014are welcomed!</p> <p>If you'd like to contribute code, you can visit the GitHub repository and make a pull request.</p>"},{"location":"#learning","title":"Learning","text":"<p>Getting started with developing using the Lilia framework requires an intermediate level of Garry's Mod Lua knowledge. You'll want to learn the basics before you start making a schema. The Garry's Mod Wiki is a good place to start.</p>"},{"location":"framework/definitions/attribute/","title":"Attribute","text":""},{"location":"framework/definitions/attribute/#example","title":"Example","text":"<pre><code>ATTRIBUTE.name = \"Strength\"\nATTRIBUTE.desc = \"Strength Skill.\"\nATTRIBUTE.noStartBonus = false\nATTRIBUTE.maxValue = 50\nATTRIBUTE.startingMax = 15\n\nfunction ATTRIBUTE:OnSetup(client, value)\n    if value &gt; 5 then \n        client:ChatPrint(\"You are very Strong!\")\n    end\nend\n</code></pre>"},{"location":"framework/definitions/attribute/#key-variables-explained","title":"Key Variables Explained","text":"Variable Purpose Type Example <code>ATTRIBUTE.name</code> Specifies the display name of the attribute. <code>String</code> <code>ATTRIBUTE.name = \"Strength\"</code> <code>ATTRIBUTE.desc</code> Provides a short description of the attribute. <code>String</code> <code>ATTRIBUTE.desc = \"Strength Skill.\"</code> <code>ATTRIBUTE.noStartBonus</code> (Optional) Determines whether the attribute can receive a bonus at the start of the game. <code>Bool</code> <code>ATTRIBUTE.noStartBonus = false</code> <code>ATTRIBUTE.maxValue</code> (Optional) Specifies the maximum value the attribute can reach. <code>Number</code> <code>ATTRIBUTE.maxValue = 50</code> <code>ATTRIBUTE.startingMax</code> (Optional) Defines the maximum value the attribute can start with. <code>Number</code> <code>ATTRIBUTE.startingMax = 15</code> <code>ATTRIBUTE:OnSetup(client, value)</code> (Optional) Executes custom logic when the attribute is set up for a player, such as notifications or additional effects. <code>Function</code> <code>ATTRIBUTE:OnSetup(client, value)</code>"},{"location":"framework/definitions/attribute/#detailed-descriptions","title":"Detailed Descriptions","text":""},{"location":"framework/definitions/attribute/#1-attributename","title":"1. <code>ATTRIBUTE.name</code>","text":"<ul> <li> <p>Purpose:   Specifies the display name of the attribute.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>ATTRIBUTE.name = \"Strength\"\n</code></pre> Sets the attribute's name to \"Strength.\"</p> </li> </ul>"},{"location":"framework/definitions/attribute/#2-attributedesc","title":"2. <code>ATTRIBUTE.desc</code>","text":"<ul> <li> <p>Purpose:   Provides a short description of the attribute.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>ATTRIBUTE.desc = \"Strength Skill.\"\n</code></pre> Sets the description of the attribute to \"Strength Skill.\"</p> </li> </ul>"},{"location":"framework/definitions/attribute/#3-attributenostartbonus-optional","title":"3. <code>ATTRIBUTE.noStartBonus</code> (Optional)","text":"<ul> <li> <p>Purpose:   Determines whether the attribute can receive a bonus at the start of the game.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>ATTRIBUTE.noStartBonus = false\n</code></pre> If set to <code>false</code>, players can assign a starting bonus for this attribute.</p> </li> </ul>"},{"location":"framework/definitions/attribute/#4-attributemaxvalue-optional","title":"4. <code>ATTRIBUTE.maxValue</code> (Optional)","text":"<ul> <li> <p>Purpose:   Specifies the maximum value the attribute can reach.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>ATTRIBUTE.maxValue = 50\n</code></pre> Sets the maximum value for this attribute to 50.</p> </li> </ul>"},{"location":"framework/definitions/attribute/#5-attributestartingmax-optional","title":"5. <code>ATTRIBUTE.startingMax</code> (Optional)","text":"<ul> <li> <p>Purpose:   Defines the maximum value the attribute can start with.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>ATTRIBUTE.startingMax = 15\n</code></pre> Limits the starting value of the attribute to 15.</p> </li> </ul>"},{"location":"framework/definitions/attribute/#6-attributeonsetupclient-value-optional","title":"6. <code>ATTRIBUTE:OnSetup(client, value)</code> (Optional)","text":"<ul> <li> <p>Purpose:   Runs custom logic when the attribute is set up for a player. This can include notifications or additional effects.</p> </li> <li> <p>Type: <code>Function</code></p> </li> <li> <p>Example: <pre><code>function ATTRIBUTE:OnSetup(client, value)\n    if value &gt; 5 then \n        client:ChatPrint(\"You are very Strong!\")\n    end\nend\n</code></pre> Displays a chat message to the player if their Strength attribute exceeds 5.</p> </li> </ul>"},{"location":"framework/definitions/class/","title":"Class","text":""},{"location":"framework/definitions/class/#example","title":"Example","text":"<pre><code>CLASS.name = \"Steve\"\nCLASS.desc = \"The Steves of the Minecrafter Faction.\"\nCLASS.isDefault = true\nCLASS.faction = FACTION_MINECRAFTER\nCLASS.color = Color(0, 255, 0)\nCLASS.weapons = {\"gold_pickaxe\", \"netherite_spade\"}\nCLASS.pay = 50\nCLASS.payTimer = 3600\nCLASS.index = CLASS_STEVE\n</code></pre>"},{"location":"framework/definitions/class/#key-variables-explained","title":"Key Variables Explained","text":"Variable Purpose Type Example <code>CLASS.name</code> The displayed name of the class. <code>String</code> <code>CLASS.name = \"Steve\"</code>Sets the class name to \"Steve.\" <code>CLASS.desc</code> The description or lore of the class. <code>String</code> <code>CLASS.desc = \"The Steves of the Minecrafter Faction.\"</code>Provides a description for the class. <code>CLASS.isDefault</code> Determines if the class is available by default. <code>Bool</code> <code>CLASS.isDefault = true</code>Sets the class as available by default. <code>CLASS.isWhitelisted</code> (Optional) Indicates if the class requires whitelisting. <code>Bool</code> <code>CLASS.isWhitelisted = false</code>If <code>true</code>, the class requires players to be whitelisted. <code>CLASS.faction</code> Links the class to a specific faction. <code>Number</code> (Faction Index) <code>CLASS.faction = FACTION_MINECRAFTER</code>Associates the class with the Minecrafter faction. <code>CLASS.color</code> (Optional) The color associated with the class. <code>Color</code> <code>CLASS.color = Color(0, 255, 0)</code>Sets the class color to green. <code>CLASS.weapons</code> (Optional) Weapons available to class members. <code>Table</code> of <code>Strings</code> <code>CLASS.weapons = {\"gold_pickaxe\", \"netherite_spade\"}</code>Assigns specific weapons to the class. <code>CLASS.pay</code> (Optional) Payment amount for class members. <code>Number</code> <code>CLASS.pay = 50</code>Sets the pay rate to 50 units. <code>CLASS.payLimit</code> (Optional) Maximum accumulated pay. <code>Number</code> <code>CLASS.payLimit = 1000</code>Limits the maximum pay a member can accumulate. <code>CLASS.payTimer</code> (Optional) Interval (in seconds) for issuing pay. <code>Number</code> <code>CLASS.payTimer = 3600</code>Sets the pay interval to one hour. <code>CLASS.limit</code> (Optional) Maximum number of players allowed in the class. <code>Number</code> <code>CLASS.limit = 10</code>Limits the class to 10 players. <code>CLASS.health</code> (Optional) Default health for class members. <code>Number</code> <code>CLASS.health = 150</code>Sets the default health to 150. <code>CLASS.armor</code> (Optional) Default armor for class members. <code>Number</code> <code>CLASS.armor = 50</code>Sets the default armor to 50. <code>CLASS.scale</code> (Optional) Adjusts the player model\u2019s size. <code>Number</code> <code>CLASS.scale = 1.2</code>Increases the player model size by 20%. <code>CLASS.runSpeed</code> (Optional) Default running speed for class members. <code>Number</code> <code>CLASS.runSpeed = 250</code>Sets the running speed to 250 units. <code>CLASS.runSpeedMultiplier</code> (Optional) If <code>true</code>, multiplies <code>runSpeed</code> by the base speed; if <code>false</code>, sets it directly. <code>Bool</code> <code>CLASS.runSpeedMultiplier = true</code>Enables run speed multiplication. <code>CLASS.walkSpeed</code> (Optional) Default walking speed for class members. <code>Number</code> <code>CLASS.walkSpeed = 200</code>Sets the walking speed to 200 units. <code>CLASS.walkSpeedMultiplier</code> (Optional) If <code>true</code>, multiplies <code>walkSpeed</code> by the base speed; if <code>false</code>, sets it directly. <code>Bool</code> <code>CLASS.walkSpeedMultiplier = false</code>Sets walk speed directly without multiplication. <code>CLASS.jumpPower</code> (Optional) Default jump power for class members. <code>Number</code> <code>CLASS.jumpPower = 200</code>Sets the jump power to 200. <code>CLASS.jumpPowerMultiplier</code> (Optional) If <code>true</code>, multiplies <code>jumpPower</code> by the base jump power; if <code>false</code>, sets it directly. <code>Bool</code> <code>CLASS.jumpPowerMultiplier = true</code>Enables jump power multiplication. <code>CLASS.bloodcolor</code> (Optional) Sets the blood color for class members. <code>Number</code> <code>CLASS.bloodcolor = BLOOD_COLOR_RED</code>Sets the blood color to red. <code>CLASS.bodyGroups</code> (Optional) Assigns bodygroup values on spawn. <code>Table</code> <code>CLASS.bodyGroups = { [1] = 2, [3] = 1 }</code>Sets specific bodygroups for the class model. <code>CLASS.model</code> (Optional) Model(s) assigned to the class. <code>String</code> or <code>Table</code> of <code>Strings</code> <code>CLASS.model = \"models/player/steve.mdl\"</code>Assigns a single model to the class.<code>CLASS.model = {\"models/player/steve1.mdl\", \"models/player/steve2.mdl\"}</code>Assigns multiple models to the class. <code>CLASS.index</code> A unique ID (team index) identifying the class. <code>Number</code> <code>CLASS.index = CLASS_STEVE</code>Assigns a unique team index to the class."},{"location":"framework/definitions/class/#detailed-descriptions","title":"Detailed Descriptions","text":""},{"location":"framework/definitions/class/#1-classname","title":"1. <code>CLASS.name</code>","text":"<ul> <li> <p>Purpose:   The displayed name of the class.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>CLASS.name = \"Steve\"\n</code></pre> Sets the class name to \"Steve.\"</p> </li> </ul>"},{"location":"framework/definitions/class/#2-classdesc","title":"2. <code>CLASS.desc</code>","text":"<ul> <li> <p>Purpose:   The description or lore of the class.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>CLASS.desc = \"The Steves of the Minecrafter Faction.\"\n</code></pre> Provides a description for the class.</p> </li> </ul>"},{"location":"framework/definitions/class/#3-classisdefault","title":"3. <code>CLASS.isDefault</code>","text":"<ul> <li> <p>Purpose:   Determines if the class is available by default.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>CLASS.isDefault = true\n</code></pre> Sets the class as available by default.</p> </li> </ul>"},{"location":"framework/definitions/class/#4-classiswhitelisted-optional","title":"4. <code>CLASS.isWhitelisted</code> (Optional)","text":"<ul> <li> <p>Purpose:   Indicates if the class requires whitelisting.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>CLASS.isWhitelisted = false\n</code></pre> If <code>true</code>, the class requires players to be whitelisted.</p> </li> </ul>"},{"location":"framework/definitions/class/#5-classfaction","title":"5. <code>CLASS.faction</code>","text":"<ul> <li> <p>Purpose:   Links the class to a specific faction.</p> </li> <li> <p>Type: <code>Number</code> (Faction Index)</p> </li> <li> <p>Example: <pre><code>CLASS.faction = FACTION_MINECRAFTER\n</code></pre> Associates the class with the Minecrafter faction.</p> </li> </ul>"},{"location":"framework/definitions/class/#6-classcolor-optional","title":"6. <code>CLASS.color</code> (Optional)","text":"<ul> <li> <p>Purpose:   The color associated with the class.</p> </li> <li> <p>Type: <code>Color</code></p> </li> <li> <p>Example: <pre><code>CLASS.color = Color(0, 255, 0)\n</code></pre> Sets the class color to green.</p> </li> </ul>"},{"location":"framework/definitions/class/#7-classweapons-optional","title":"7. <code>CLASS.weapons</code> (Optional)","text":"<ul> <li> <p>Purpose:   Weapons available to class members.</p> </li> <li> <p>Type: <code>Table</code> of <code>Strings</code></p> </li> <li> <p>Example: <pre><code>CLASS.weapons = {\"gold_pickaxe\", \"netherite_spade\"}\n</code></pre> Assigns specific weapons to the class.</p> </li> </ul>"},{"location":"framework/definitions/class/#8-classpay-optional","title":"8. <code>CLASS.pay</code> (Optional)","text":"<ul> <li> <p>Purpose:   Payment amount for class members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.pay = 50\n</code></pre> Sets the pay rate to 50 units.</p> </li> </ul>"},{"location":"framework/definitions/class/#9-classpaylimit-optional","title":"9. <code>CLASS.payLimit</code> (Optional)","text":"<ul> <li> <p>Purpose:   Maximum accumulated pay.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.payLimit = 1000\n</code></pre> Limits the maximum pay a member can accumulate.</p> </li> </ul>"},{"location":"framework/definitions/class/#10-classpaytimer-optional","title":"10. <code>CLASS.payTimer</code> (Optional)","text":"<ul> <li> <p>Purpose:   Interval (in seconds) for issuing pay.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.payTimer = 3600\n</code></pre> Sets the pay interval to one hour.</p> </li> </ul>"},{"location":"framework/definitions/class/#11-classlimit-optional","title":"11. <code>CLASS.limit</code> (Optional)","text":"<ul> <li> <p>Purpose:   Maximum number of players allowed in the class.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.limit = 10\n</code></pre> Limits the class to 10 players.</p> </li> </ul>"},{"location":"framework/definitions/class/#12-classhealth-optional","title":"12. <code>CLASS.health</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default health for class members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.health = 150\n</code></pre> Sets the default health to 150.</p> </li> </ul>"},{"location":"framework/definitions/class/#13-classarmor-optional","title":"13. <code>CLASS.armor</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default armor for class members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.armor = 50\n</code></pre> Sets the default armor to 50.</p> </li> </ul>"},{"location":"framework/definitions/class/#14-classscale-optional","title":"14. <code>CLASS.scale</code> (Optional)","text":"<ul> <li> <p>Purpose:   Adjusts the player model\u2019s size.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.scale = 1.2\n</code></pre> Increases the player model size by 20%.</p> </li> </ul>"},{"location":"framework/definitions/class/#15-classrunspeed-optional","title":"15. <code>CLASS.runSpeed</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default running speed for class members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.runSpeed = 250\n</code></pre> Sets the running speed to 250 units.</p> </li> </ul>"},{"location":"framework/definitions/class/#16-classrunspeedmultiplier-optional","title":"16. <code>CLASS.runSpeedMultiplier</code> (Optional)","text":"<ul> <li> <p>Purpose:   If <code>true</code>, multiplies <code>runSpeed</code> by the base speed; if <code>false</code>, sets it directly.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>CLASS.runSpeedMultiplier = true\n</code></pre> Enables run speed multiplication.</p> </li> </ul>"},{"location":"framework/definitions/class/#17-classwalkspeed-optional","title":"17. <code>CLASS.walkSpeed</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default walking speed for class members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.walkSpeed = 200\n</code></pre> Sets the walking speed to 200 units.</p> </li> </ul>"},{"location":"framework/definitions/class/#18-classwalkspeedmultiplier-optional","title":"18. <code>CLASS.walkSpeedMultiplier</code> (Optional)","text":"<ul> <li> <p>Purpose:   If <code>true</code>, multiplies <code>walkSpeed</code> by the base speed; if <code>false</code>, sets it directly.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>CLASS.walkSpeedMultiplier = false\n</code></pre> Sets walk speed directly without multiplication.</p> </li> </ul>"},{"location":"framework/definitions/class/#19-classjumppower-optional","title":"19. <code>CLASS.jumpPower</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default jump power for class members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.jumpPower = 200\n</code></pre> Sets the jump power to 200.</p> </li> </ul>"},{"location":"framework/definitions/class/#20-classjumppowermultiplier-optional","title":"20. <code>CLASS.jumpPowerMultiplier</code> (Optional)","text":"<ul> <li> <p>Purpose:   If <code>true</code>, multiplies <code>jumpPower</code> by the base jump power; if <code>false</code>, sets it directly.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>CLASS.jumpPowerMultiplier = true\n</code></pre> Enables jump power multiplication.</p> </li> </ul>"},{"location":"framework/definitions/class/#21-classbloodcolor-optional","title":"21. <code>CLASS.bloodcolor</code> (Optional)","text":"<ul> <li> <p>Purpose:   Sets the blood color for class members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.bloodcolor = BLOOD_COLOR_RED\n</code></pre> Sets the blood color to red.</p> </li> </ul>"},{"location":"framework/definitions/class/#22-classbodygroups-optional","title":"22. <code>CLASS.bodyGroups</code> (Optional)","text":"<ul> <li> <p>Purpose:   Assigns bodygroup values on spawn.</p> </li> <li> <p>Type: <code>Table</code></p> </li> <li> <p>Example: <pre><code>CLASS.bodyGroups = { [1] = 2, [3] = 1 }\n</code></pre> Sets specific bodygroups for the class model.</p> </li> </ul>"},{"location":"framework/definitions/class/#23-classmodel-optional","title":"23. <code>CLASS.model</code> (Optional)","text":"<ul> <li> <p>Purpose:   Model(s) assigned to the class.</p> </li> <li> <p>Type: <code>String</code> or <code>Table</code> of <code>Strings</code></p> </li> <li> <p>Example: <pre><code>CLASS.model = \"models/player/steve.mdl\"\n</code></pre> Assigns a single model to the class.</p> <p>or</p> <p><pre><code>CLASS.model = {\"models/player/steve1.mdl\", \"models/player/steve2.mdl\"}\n</code></pre> Assigns multiple models to the class.</p> </li> </ul>"},{"location":"framework/definitions/class/#24-classindex","title":"24. <code>CLASS.index</code>","text":"<ul> <li> <p>Purpose:   A unique ID (team index) identifying the class.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>CLASS.index = CLASS_STEVE\n</code></pre> Assigns a unique team index to the class.</p> </li> </ul>"},{"location":"framework/definitions/class/#25-classrequirements-optional","title":"25. <code>CLASS.requirements</code> (Optional)","text":"<ul> <li> <p>Purpose:   A string describing the requirements to select the class.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>CLASS.requirements = \"Requires Level 10 and owning a sword.\"\n</code></pre> Sets a descriptive requirement for the class.</p> <p>Advanced Example: <pre><code>CLASS.requirements = \"Requires Level 15, owning an iron sword and shield, and membership in the Minecrafter faction.\"\n</code></pre> Provides a detailed description of multiple requirements needed to select the class.</p> </li> </ul>"},{"location":"framework/definitions/command/","title":"Command","text":""},{"location":"framework/definitions/command/#example","title":"Example","text":"<pre><code>lia.command.add(\"charsetskin\", {\n    adminOnly = true,\n    syntax = \"[string name] [number skin]\",\n    privilege = \"Manage Character Stats\",\n    AdminStick = {\n        Name = \"Set Character Skin\",\n        Category = \"Player Informations\",\n        SubCategory = \"Set Informations\",\n        Icon = \"icon16/user_gray.png\",\n        ExtraFields = {\n            [\"skin\"] = \"number\"\n        }\n    },\n    onRun = function(client, arguments)\n        local name = arguments[1]\n        local skin = tonumber(arguments[2])\n        local target = lia.command.findPlayer(client, name)\n        if IsValid(target) and target:getChar() then\n            target:getChar():setData(\"skin\", skin)\n            target:SetSkin(skin or 0)\n            client:notifyLocalized(\"cChangeSkin\", client:Name(), target:Name(), skin or 0)\n        else\n            client:notify(\"Invalid Target\")\n        end\n    end\n})\n</code></pre>"},{"location":"framework/definitions/command/#key-variables-explained","title":"Key Variables Explained","text":"Variable Purpose Type Example <code>adminOnly</code> (Optional) If <code>true</code>, restricts the command to administrators only. <code>bool</code> <code>adminOnly = true</code>Only admins can run this command. <code>superAdminOnly</code> (Optional) If <code>true</code>, restricts the command to super administrators only. <code>bool</code> <code>superAdminOnly = false</code>Admins or any user with the correct privilege can use the command. <code>privilege</code> Specifies the permission level or \u201cprivilege\u201d required to use the command. <code>String</code> <code>privilege = \"Manage Character Stats\"</code>Users must have the \"Manage Character Stats\" privilege. <code>syntax</code> (Optional) Describes the expected argument format. <code>String</code> <code>syntax = \"[string name] [number skin]\"</code>Indicates the command expects a player name and a skin number. <code>AdminStick</code> (Optional) Stores extra metadata for admin interfaces (e.g., a GUI or categorization). <code>Table</code> See AdminStick Details below for a breakdown. <code>onRun</code> The core logic or \u201cpayload\u201d of the command, executed when the command is called. <code>Function</code> See onRun Example below."},{"location":"framework/definitions/command/#detailed-descriptions","title":"Detailed Descriptions","text":""},{"location":"framework/definitions/command/#1-adminonly-optional","title":"1. <code>adminOnly</code> (Optional)","text":"<ul> <li> <p>Purpose:   Restricts the command to administrators if set to <code>true</code>.</p> </li> <li> <p>Type: <code>bool</code></p> </li> <li> <p>Example: <pre><code>adminOnly = true\n</code></pre> Only administrators can run this command.</p> </li> </ul>"},{"location":"framework/definitions/command/#2-superadminonly-optional","title":"2. <code>superAdminOnly</code> (Optional)","text":"<ul> <li> <p>Purpose:   Restricts the command to super administrators if set to <code>true</code>.  </p> </li> <li> <p>Type: <code>bool</code></p> </li> <li> <p>Example: <pre><code>superAdminOnly = false\n</code></pre> Allows admins or any user with the correct privilege to run the command; not superadmin-exclusive.</p> </li> </ul>"},{"location":"framework/definitions/command/#3-privilege","title":"3. <code>privilege</code>","text":"<ul> <li> <p>Purpose:   Specifies the permission level or \u201cprivilege\u201d required to use the command.   This can be tied into your permission system to group and manage commands collectively under a single permission name.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>privilege = \"Manage Character Stats\"\n</code></pre> Users must have the \"Manage Character Stats\" privilege (e.g., an admin or manager role) to run the command.</p> </li> </ul>"},{"location":"framework/definitions/command/#4-syntax-optional","title":"4. <code>syntax</code> (Optional)","text":"<ul> <li> <p>Purpose:   Provides a reference for how to structure the command\u2019s arguments.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>syntax = \"[string name] [number skin]\"\n</code></pre> Indicates that the command accepts a player name (string) and a skin ID (number) as parameters.</p> </li> </ul>"},{"location":"framework/definitions/command/#5-adminstick-optional","title":"5. <code>AdminStick</code> (Optional)","text":"<ul> <li>Purpose:   A table for storing additional metadata about the command, often used for custom admin interfaces.  </li> <li><code>Name</code>: Display name of the command in an admin menu.  </li> <li><code>Category</code>: High-level grouping for the command (e.g., \u201cPlayer Informations\u201d).  </li> <li><code>SubCategory</code>: Further categorization (e.g., \u201cSet Informations\u201d).  </li> <li><code>Icon</code>: Icon path (e.g., <code>\"icon16/user_gray.png\"</code>).  </li> <li> <p><code>ExtraFields</code>: Additional data fields and their types (e.g., <code>[\"skin\"] = \"number\"</code>).</p> </li> <li> <p>Type: <code>Table</code></p> </li> <li> <p>Example: <pre><code>AdminStick = {\n    Name = \"Set Character Skin\",\n    Category = \"Player Informations\",\n    SubCategory = \"Set Informations\",\n    Icon = \"icon16/user_gray.png\",\n    ExtraFields = {\n        [\"skin\"] = \"number\"\n    }\n}\n</code></pre> Defines how the command is represented in an administrative interface.</p> </li> </ul>"},{"location":"framework/definitions/command/#6-onrun","title":"6. <code>onRun</code>","text":"<ul> <li> <p>Purpose:   Contains the main logic of the command. Executes every time the command is used.</p> </li> <li> <p>Type: <code>Function</code></p> </li> <li> <p>Example: <pre><code>onRun = function(client, arguments)\n    local name = arguments[1]\n    local skin = tonumber(arguments[2])\n    local target = lia.command.findPlayer(client, name)\n    if IsValid(target) and target:getChar() then\n        target:getChar():setData(\"skin\", skin)\n        target:SetSkin(skin or 0)\n        client:notifyLocalized(\"cChangeSkin\", client:Name(), target:Name(), skin or 0)\n    else\n        client:notify(\"Invalid Target\")\n    end\nend\n</code></pre> Finds the target player by name, updates the character\u2019s skin data, and sets the new skin value. If the target is invalid, notifies the admin.</p> </li> </ul>"},{"location":"framework/definitions/faction/","title":"Faction","text":""},{"location":"framework/definitions/faction/#example","title":"Example","text":"<pre><code>FACTION.name = \"Minecrafters\"\nFACTION.desc = \"Surviving and crafting in the blocky world.\"\nFACTION.isDefault = false\nFACTION.color = Color(0, 255, 0)\nFACTION.models = {\"minecraft_model_1.mdl\", \"minecraft_model_2.mdl\", \"minecraft_model_3.mdl\"}\nFACTION.weapons = {\"stone_sword\", \"iron_pickaxe\"}\nFACTION.pay = 50\nFACTION.payTimer = 3600\nFACTION_MINECRAFTER = FACTION.index\n</code></pre>"},{"location":"framework/definitions/faction/#key-variables-explained","title":"Key Variables Explained","text":"Variable Purpose Type Example <code>FACTION.name</code> The displayed name of your faction. <code>String</code> <code>FACTION.name = \"Minecrafters\"</code>Sets the faction name to \"Minecrafters.\" <code>FACTION.desc</code> The description or lore of your faction. <code>String</code> <code>FACTION.desc = \"Surviving and crafting in the blocky world.\"</code>Provides a description for the faction. <code>FACTION.isDefault</code> Marks the faction as default if set to <code>true</code>. <code>Bool</code> <code>FACTION.isDefault = false</code>Sets the faction as not default. <code>FACTION.color</code> (Optional) The color associated with the faction. <code>Color</code> <code>FACTION.color = Color(0, 255, 0)</code>Sets the faction color to green. <code>FACTION.models</code> Models available to faction members. <code>Table</code> of <code>Strings</code> <code>FACTION.models = {\"minecraft_model_1.mdl\", \"minecraft_model_2.mdl\", \"minecraft_model_3.mdl\"}</code>Assigns multiple models. <code>FACTION.weapons</code> (Optional) Weapons available to faction members. <code>Table</code> of <code>Strings</code> <code>FACTION.weapons = {\"stone_sword\", \"iron_pickaxe\"}</code>Provides stone sword and iron pickaxe to faction members. <code>FACTION.pay</code> (Optional) Payment amount for members of this faction. <code>Number</code> <code>FACTION.pay = 50</code>Sets the pay rate to 50 units. <code>FACTION.payLimit</code> (Optional) Maximum amount of pay a member can accumulate. <code>Number</code> <code>FACTION.payLimit = 1000</code>Limits the maximum pay a member can accumulate. <code>FACTION.payTimer</code> (Optional) Interval (in seconds) for issuing pay. <code>Number</code> <code>FACTION.payTimer = 3600</code>Sets the pay interval to one hour. <code>FACTION.limit</code> (Optional) Maximum number of players allowed in this faction. <code>Number</code> <code>FACTION.limit = 20</code>Limits the faction to 20 players. <code>FACTION.oneCharOnly</code> (Optional) Restricts players to a single character in this faction. <code>Bool</code> <code>FACTION.oneCharOnly = true</code>Prevents creating multiple characters in the same faction. <code>FACTION.health</code> (Optional) Default health for faction members. <code>Number</code> <code>FACTION.health = 150</code>Sets the default health to 150. <code>FACTION.armor</code> (Optional) Default armor for faction members. <code>Number</code> <code>FACTION.armor = 25</code>Sets the default armor to 25. <code>FACTION.scale</code> (Optional) Adjusts the player model\u2019s size. <code>Number</code> <code>FACTION.scale = 1.1</code>Increases the player model size by 10%. <code>FACTION.runSpeed</code> (Optional) Default running speed for faction members. <code>Number</code> <code>FACTION.runSpeed = 250</code>Sets the running speed to 250 units. <code>FACTION.runSpeedMultiplier</code> (Optional) If <code>true</code>, multiplies <code>runSpeed</code> by the base speed; if <code>false</code>, sets it directly. <code>Bool</code> <code>FACTION.runSpeedMultiplier = false</code>Sets the running speed directly. <code>FACTION.walkSpeed</code> (Optional) Default walking speed for faction members. <code>Number</code> <code>FACTION.walkSpeed = 200</code>Sets the walking speed to 200 units. <code>FACTION.walkSpeedMultiplier</code> (Optional) If <code>true</code>, multiplies <code>walkSpeed</code> by the base speed; if <code>false</code>, sets it directly. <code>Bool</code> <code>FACTION.walkSpeedMultiplier = true</code>Enables walk speed multiplication. <code>FACTION.jumpPower</code> (Optional) Default jump power for faction members. <code>Number</code> <code>FACTION.jumpPower = 200</code>Sets the jump power to 200. <code>FACTION.jumpPowerMultiplier</code> (Optional) If <code>true</code>, multiplies <code>jumpPower</code> by the base jump power; if <code>false</code>, sets it directly. <code>Bool</code> <code>FACTION.jumpPowerMultiplier = true</code>Enables jump power multiplication. <code>FACTION.MemberToMemberAutoRecognition</code> (Optional) Determines if members automatically recognize each other. <code>Bool</code> <code>FACTION.MemberToMemberAutoRecognition = true</code>Members automatically recognize each other. <code>FACTION.bloodcolor</code> (Optional) Sets the blood color for faction members. <code>Number</code> (Enum) <code>FACTION.bloodcolor = BLOOD_COLOR_RED</code>Sets the blood color to red. <code>FACTION.bodyGroups</code> (Optional) Assigns bodygroup settings for faction members. <code>Table</code> <code>FACTION.bodyGroups = {[1] = 2, [2] = 1}</code>Sets specific bodygroups for the faction model. <code>FACTION.RecognizesGlobally</code> (Optional) If <code>true</code>, this faction recognizes all players globally. <code>Bool</code> <code>FACTION.RecognizesGlobally = false</code>Does not globally recognize all players. <code>FACTION.index</code> A unique ID identifying the faction, used for reference and indexing. <code>Number</code> <code>FACTION_MINECRAFTER = FACTION.index</code>Assigns a unique ID to the Minecrafter faction."},{"location":"framework/definitions/faction/#detailed-descriptions","title":"Detailed Descriptions","text":"<p>Below are more in-depth explanations of each FACTION variable, closely matching the style and structure of the CLASS documentation.</p>"},{"location":"framework/definitions/faction/#1-factionname","title":"1. <code>FACTION.name</code>","text":"<ul> <li> <p>Purpose:   The displayed name of your faction.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>FACTION.name = \"Minecrafters\"\n</code></pre> Sets the faction name to \"Minecrafters.\"</p> </li> </ul>"},{"location":"framework/definitions/faction/#2-factiondesc","title":"2. <code>FACTION.desc</code>","text":"<ul> <li> <p>Purpose:   The description or lore of your faction.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>FACTION.desc = \"Surviving and crafting in the blocky world.\"\n</code></pre> Provides a description for the faction.</p> </li> </ul>"},{"location":"framework/definitions/faction/#3-factionisdefault","title":"3. <code>FACTION.isDefault</code>","text":"<ul> <li> <p>Purpose:   Marks the faction as default if set to <code>true</code>.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>FACTION.isDefault = false\n</code></pre> Sets the faction as non-default.</p> </li> </ul>"},{"location":"framework/definitions/faction/#4-factioncolor-optional","title":"4. <code>FACTION.color</code> (Optional)","text":"<ul> <li> <p>Purpose:   The color associated with the faction.</p> </li> <li> <p>Type: <code>Color</code></p> </li> <li> <p>Example: <pre><code>FACTION.color = Color(0, 255, 0)\n</code></pre> Sets the faction color to green.</p> </li> </ul>"},{"location":"framework/definitions/faction/#5-factionmodels","title":"5. <code>FACTION.models</code>","text":"<ul> <li> <p>Purpose:   Models available to faction members.</p> </li> <li> <p>Type: <code>Table</code> of <code>Strings</code></p> </li> <li> <p>Example: <pre><code>FACTION.models = {\"minecraft_model_1.mdl\", \"minecraft_model_2.mdl\", \"minecraft_model_3.mdl\"}\n</code></pre> Assigns multiple models to the faction.</p> </li> </ul>"},{"location":"framework/definitions/faction/#6-factionweapons-optional","title":"6. <code>FACTION.weapons</code> (Optional)","text":"<ul> <li> <p>Purpose:   Weapons available to faction members.</p> </li> <li> <p>Type: <code>Table</code> of <code>Strings</code></p> </li> <li> <p>Example: <pre><code>FACTION.weapons = {\"stone_sword\", \"iron_pickaxe\"}\n</code></pre> Assigns the stone sword and iron pickaxe to faction members.</p> </li> </ul>"},{"location":"framework/definitions/faction/#7-factionpay-optional","title":"7. <code>FACTION.pay</code> (Optional)","text":"<ul> <li> <p>Purpose:   Payment amount for members of this faction.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.pay = 50\n</code></pre> Sets the pay rate to 50 units.</p> </li> </ul>"},{"location":"framework/definitions/faction/#8-factionpaylimit-optional","title":"8. <code>FACTION.payLimit</code> (Optional)","text":"<ul> <li> <p>Purpose:   Maximum amount of pay a member can accumulate.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.payLimit = 1000\n</code></pre> Limits the maximum pay a member can accumulate.</p> </li> </ul>"},{"location":"framework/definitions/faction/#9-factionpaytimer-optional","title":"9. <code>FACTION.payTimer</code> (Optional)","text":"<ul> <li> <p>Purpose:   Interval (in seconds) for issuing pay.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.payTimer = 3600\n</code></pre> Sets the pay interval to one hour.</p> </li> </ul>"},{"location":"framework/definitions/faction/#10-factionlimit-optional","title":"10. <code>FACTION.limit</code> (Optional)","text":"<ul> <li> <p>Purpose:   Maximum number of players allowed in this faction.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.limit = 20\n</code></pre> Limits the faction to 20 players.</p> </li> </ul>"},{"location":"framework/definitions/faction/#11-factiononecharonly-optional","title":"11. <code>FACTION.oneCharOnly</code> (Optional)","text":"<ul> <li> <p>Purpose:   Restricts players to a single character in this faction.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>FACTION.oneCharOnly = true\n</code></pre> Prevents multiple characters under the same faction.</p> </li> </ul>"},{"location":"framework/definitions/faction/#12-factionhealth-optional","title":"12. <code>FACTION.health</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default health for faction members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.health = 150\n</code></pre> Sets the default health to 150.</p> </li> </ul>"},{"location":"framework/definitions/faction/#13-factionarmor-optional","title":"13. <code>FACTION.armor</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default armor for faction members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.armor = 25\n</code></pre> Sets the default armor to 25.</p> </li> </ul>"},{"location":"framework/definitions/faction/#14-factionscale-optional","title":"14. <code>FACTION.scale</code> (Optional)","text":"<ul> <li> <p>Purpose:   Adjusts the player model\u2019s size.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.scale = 1.1\n</code></pre> Increases the player model size by 10%.</p> </li> </ul>"},{"location":"framework/definitions/faction/#15-factionrunspeed-optional","title":"15. <code>FACTION.runSpeed</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default running speed for faction members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.runSpeed = 250\n</code></pre> Sets the running speed to 250 units.</p> </li> </ul>"},{"location":"framework/definitions/faction/#16-factionrunspeedmultiplier-optional","title":"16. <code>FACTION.runSpeedMultiplier</code> (Optional)","text":"<ul> <li> <p>Purpose:   If <code>true</code>, multiplies <code>runSpeed</code> by the base speed; if <code>false</code>, sets it directly.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>FACTION.runSpeedMultiplier = false\n</code></pre> Sets the running speed directly without multiplying.</p> </li> </ul>"},{"location":"framework/definitions/faction/#17-factionwalkspeed-optional","title":"17. <code>FACTION.walkSpeed</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default walking speed for faction members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.walkSpeed = 200\n</code></pre> Sets the walking speed to 200 units.</p> </li> </ul>"},{"location":"framework/definitions/faction/#18-factionwalkspeedmultiplier-optional","title":"18. <code>FACTION.walkSpeedMultiplier</code> (Optional)","text":"<ul> <li> <p>Purpose:   If <code>true</code>, multiplies <code>walkSpeed</code> by the base speed; if <code>false</code>, sets it directly.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>FACTION.walkSpeedMultiplier = true\n</code></pre> Enables walk speed multiplication.</p> </li> </ul>"},{"location":"framework/definitions/faction/#19-factionjumppower-optional","title":"19. <code>FACTION.jumpPower</code> (Optional)","text":"<ul> <li> <p>Purpose:   Default jump power for faction members.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION.jumpPower = 200\n</code></pre> Sets the jump power to 200.</p> </li> </ul>"},{"location":"framework/definitions/faction/#20-factionjumppowermultiplier-optional","title":"20. <code>FACTION.jumpPowerMultiplier</code> (Optional)","text":"<ul> <li> <p>Purpose:   If <code>true</code>, multiplies <code>jumpPower</code> by the base jump power; if <code>false</code>, sets it directly.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>FACTION.jumpPowerMultiplier = true\n</code></pre> Enables jump power multiplication.</p> </li> </ul>"},{"location":"framework/definitions/faction/#21-factionmembertomemberautorecognition-optional","title":"21. <code>FACTION.MemberToMemberAutoRecognition</code> (Optional)","text":"<ul> <li> <p>Purpose:   Determines if members automatically recognize each other.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>FACTION.MemberToMemberAutoRecognition = true\n</code></pre> Enables automatic recognition among faction members.</p> </li> </ul>"},{"location":"framework/definitions/faction/#22-factionbloodcolor-optional","title":"22. <code>FACTION.bloodcolor</code> (Optional)","text":"<ul> <li> <p>Purpose:   Sets the blood color for faction members.</p> </li> <li> <p>Type: <code>Number</code> (Enum)</p> </li> <li> <p>Example: <pre><code>FACTION.bloodcolor = BLOOD_COLOR_RED\n</code></pre> Sets the blood color to red.</p> </li> </ul>"},{"location":"framework/definitions/faction/#23-factionbodygroups-optional","title":"23. <code>FACTION.bodyGroups</code> (Optional)","text":"<ul> <li> <p>Purpose:   Assigns bodygroup settings for faction members.</p> </li> <li> <p>Type: <code>Table</code></p> </li> <li> <p>Example: <pre><code>FACTION.bodyGroups = { [1] = 2, [2] = 1 }\n</code></pre> Sets specific bodygroups for the faction model.</p> </li> </ul>"},{"location":"framework/definitions/faction/#24-factionrecognizesglobally-optional","title":"24. <code>FACTION.RecognizesGlobally</code> (Optional)","text":"<ul> <li> <p>Purpose:   If <code>true</code>, this faction recognizes all players globally.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>FACTION.RecognizesGlobally = false\n</code></pre> Does not globally recognize all players.</p> </li> </ul>"},{"location":"framework/definitions/faction/#25-factionindex","title":"25. <code>FACTION.index</code>","text":"<ul> <li> <p>Purpose:   A unique ID (faction index) identifying the faction.</p> </li> <li> <p>Type: <code>Number</code></p> </li> <li> <p>Example: <pre><code>FACTION_MINECRAFTER = FACTION.index\n</code></pre> Assigns a unique index to the \u201cMinecrafters\u201d faction.</p> </li> </ul>"},{"location":"framework/definitions/items/","title":"Items","text":""},{"location":"framework/definitions/items/#global-item-functions","title":"Global Item Functions","text":"<p>Below is a comprehensive list of global functions and properties used to define items. Each function/property is detailed with its purpose, type, and examples to guide you in creating and managing items effectively.</p> Function/Property Purpose Type Example <code>ITEM.name</code> Sets the name of the item. <code>String</code> <code>ITEM.name = \"Radio Antenna\"</code> <code>ITEM.model</code> Specifies the 3D model used for the item. <code>String</code> <code>ITEM.model = \"models/props_lab/antenna.mdl\"</code> <code>ITEM.desc</code> Provides a short description of the item. <code>String</code> <code>ITEM.desc = \"A deployable radio antenna.\"</code> <code>ITEM.category</code> Groups the item into a specific category. <code>String</code> <code>ITEM.category = \"Electronics\"</code> <code>ITEM.width</code> &amp; <code>ITEM.height</code> Define the size of the item in the inventory grid. <code>Number</code> <code>ITEM.width = 2</code>, <code>ITEM.height = 1</code> <code>ITEM.price</code> Sets the item's price for trading or selling. <code>Number</code> <code>ITEM.price = 100</code> <code>ITEM.VManipDisabled</code> Disables VManip grabbing functionality for the item. <code>Bool</code> <code>ITEM.VManipDisabled = true</code> <code>ITEM.uniqueID</code> Overrides the default unique ID, usually derived from the file name. <code>String</code> <code>ITEM.uniqueID = \"custom_unique_id\"</code> <code>ITEM.SteamIDWhitelist</code> Specifies a whitelist of Steam IDs allowed to interact with the item in vendors. <code>Table</code> <code>ITEM.SteamIDWhitelist = {\"STEAM_0:1:12345678\"}</code> <code>ITEM.FactionWhitelist</code> Specifies a whitelist of factions allowed to interact with the item in vendors. <code>Table</code> <code>ITEM.FactionWhitelist = {FACTION_CITIZEN, FACTION_POLICE}</code> <code>ITEM.UsergroupWhitelist</code> Specifies a whitelist of user groups allowed to interact with the item in vendors. <code>Table</code> <code>ITEM.UsergroupWhitelist = {\"admin\", \"moderator\"}</code> <code>ITEM.VIPWhitelist</code> Specifies whether the item is restricted to VIP players. <code>Bool</code> <code>ITEM.VIPWhitelist = true</code> <code>ITEM.rarity</code> Specifies the rarity level of the item, determining its color in vendor displays. <code>String</code> <code>ITEM.rarity = \"Legendary\"</code> <code>ITEM.RequiredSkillLevels</code> Specifies the required skill levels to use the item. <code>Table</code> <code>ITEM.RequiredSkillLevels = {Survival = 5}</code> <code>ITEM.flag</code> Specifies the necessary flag to buy an item. <code>String</code> <code>ITEM.flag = \"Y\"</code> <code>ITEM.DropOnDeath</code> Deletes the item upon the player's death. <code>Bool</code> <code>ITEM.DropOnDeath = true</code>"},{"location":"framework/definitions/items/#item-examples","title":"Item Examples","text":"<p>Below are various item types with corresponding Lua examples and explanations to illustrate how to utilize the global item functions effectively.</p>"},{"location":"framework/definitions/items/#1-baseless-item-example","title":"1. Baseless Item Example","text":"<p>A simple item without additional functionalities.</p> <pre><code>ITEM.name = \"Example Item\"\nITEM.desc = \"A example item!\"\nITEM.model = \"models/props_c17/oildrum001.mdl\"\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Sets the name of the item.</p> </li> <li> <p><code>ITEM.desc</code>: Provides a short description.</p> </li> <li> <p><code>ITEM.model</code>: Specifies the 3D model for the item.</p> </li> </ul>"},{"location":"framework/definitions/items/#2-aid-item-example","title":"2. Aid Item Example","text":"<p>An item that provides health restoration.</p> <pre><code>ITEM.name = \"Bandages\"\nITEM.desc = \"Gives you 50 HP.\"\nITEM.model = \"models/weapons/w_package.mdl\"\nITEM.width = 1\nITEM.height = 1\nITEM.health = 50\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Name of the aid item.</p> </li> <li> <p><code>ITEM.desc</code>: Description indicating the health restored.</p> </li> <li> <p><code>ITEM.model</code>: 3D model representing the item.</p> </li> <li> <p><code>ITEM.width</code> &amp; <code>ITEM.height</code>: Size in the inventory grid.</p> </li> <li> <p><code>ITEM.health</code>: Amount of health restored when used.</p> </li> </ul>"},{"location":"framework/definitions/items/#3-ammo-example","title":"3. Ammo Example","text":"<p>Defines ammunition for a specific weapon.</p> <pre><code>ITEM.name = \".357 Ammo\"\nITEM.model = \"models/items/357ammo.mdl\"\nITEM.ammo = \"357\"\nITEM.ammoAmount = 12\nITEM.desc = \"Contains 12 rounds of .357 Ammo\"\nITEM.price = 10\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Name of the ammo type.</p> </li> <li> <p><code>ITEM.model</code>: 3D model representing the ammo.</p> </li> <li> <p><code>ITEM.ammo</code>: Type of ammo compatible with weapons.</p> </li> <li> <p><code>ITEM.ammoAmount</code>: Number of ammo units per item.</p> </li> <li> <p><code>ITEM.desc</code>: Description detailing the ammo quantity.</p> </li> <li> <p><code>ITEM.price</code>: Cost for trading or selling.</p> </li> </ul>"},{"location":"framework/definitions/items/#4-bag-example","title":"4. Bag Example","text":"<p>A storage item that can hold other items.</p> <pre><code>ITEM.name = \"Small Bag\"\nITEM.desc = \"A small bag.\"\nITEM.model = \"models/props_c17/suitcase001a.mdl\"\nITEM.category = \"Storage\"\nITEM.isBag = true\nITEM.invWidth = 2\nITEM.invHeight = 2\nITEM.BagSound = {\"physics/cardboard/cardboard_box_impact_soft2.wav\", 50}\nITEM.pacData = {}\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Name of the bag.</p> </li> <li> <p><code>ITEM.desc</code>: Description of the bag.</p> </li> <li> <p><code>ITEM.model</code>: 3D model representing the bag.</p> </li> <li> <p><code>ITEM.category</code>: Category grouping.</p> </li> <li> <p><code>ITEM.isBag</code>: Indicates it has storage functionality.</p> </li> <li> <p><code>ITEM.invWidth</code> &amp; <code>ITEM.invHeight</code>: Size of the bag's internal inventory.</p> </li> <li> <p><code>ITEM.BagSound</code>: Sound played when interacting with the bag.</p> </li> <li> <p><code>ITEM.pacData</code>: PAC3 customization data.</p> </li> </ul>"},{"location":"framework/definitions/items/#5-book-example","title":"5. Book Example","text":"<p>An item containing readable content.</p> <pre><code>ITEM.name = \"Example Book\"\nITEM.desc = \"An Example\"\nITEM.model = \"models/props_lab/binderblue.mdl\"\nITEM.contents = [[\n&lt;h1&gt;An Example&lt;/h1&gt;\n&lt;h3&gt;By Example&lt;/h3&gt;\n&lt;p&gt;\nEXAMPLE PARA.&lt;br&gt;\nEXAMPLE PARA.&lt;br&gt;\nEXAMPLE PARAGRAPH.&lt;br&gt;\nEXAMPLE PARAGRAPH!\n&lt;/p&gt;\n]]\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Name of the book.</p> </li> <li> <p><code>ITEM.desc</code>: Description of the book.</p> </li> <li> <p><code>ITEM.model</code>: 3D model representing the book.</p> </li> <li> <p><code>ITEM.contents</code>: HTML content displayed when reading the book.</p> </li> </ul>"},{"location":"framework/definitions/items/#6-entities-example","title":"6. Entities Example","text":"<p>An item that spawns a specific entity in the game world.</p> <pre><code>ITEM.name = \"Item Suit\"\nITEM.desc = \"An HL2 Item Suit\"\nITEM.model = \"models/props_c17/BriefCase001a.mdl\"\nITEM.category = \"Entities\"\nITEM.entityid = \"item_suit\"\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Name of the entity item.</p> </li> <li> <p><code>ITEM.desc</code>: Description of the entity.</p> </li> <li> <p><code>ITEM.model</code>: 3D model representing the entity item.</p> </li> <li> <p><code>ITEM.category</code>: Category grouping.</p> </li> <li> <p><code>ITEM.entityid</code>: The class name of the entity to spawn.</p> </li> </ul>"},{"location":"framework/definitions/items/#7-clothing-example","title":"7. Clothing Example","text":"<p>An outfit that modifies player appearance and attributes.</p> <pre><code>ITEM.name = \"Combine Armor\"\nITEM.desc = \"Protects your insides from the outsides.\"\nITEM.model = \"models/props_c17/BriefCase001a.mdl\"\nITEM.category = \"Clothing\"\nITEM.width = 2\nITEM.height = 2\nITEM.outfitCategory = \"body\"\nITEM.replacements = \"models/player/combine_soldier.mdl\"\nITEM.newSkin = 1\nITEM.armor = 50\nITEM.attribBoosts = {\n    strength = 5,\n    agility = 3\n}\nITEM.RequiredSkillLevels = {\n    strength = 10\n}\nITEM.pacData = {\n    [1] = {\n        name = \"combine_armor\",\n        model = \"models/props_c17/BriefCase001a.mdl\"\n    }\n}\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Name of the clothing item.</p> </li> <li> <p><code>ITEM.desc</code>: Description of the clothing.</p> </li> <li> <p><code>ITEM.model</code>: 3D model representing the clothing.</p> </li> <li> <p><code>ITEM.category</code>: Category grouping.</p> </li> <li> <p><code>ITEM.width</code> &amp; <code>ITEM.height</code>: Size in the inventory grid.</p> </li> <li> <p><code>ITEM.outfitCategory</code>: Category of the outfit (e.g., \"body\").</p> </li> <li> <p><code>ITEM.replacements</code>: Player model or adjustments when equipped.</p> </li> <li> <p><code>ITEM.newSkin</code>: New skin index for the player's model.</p> </li> <li> <p><code>ITEM.armor</code>: Armor value provided by the outfit.</p> </li> <li> <p><code>ITEM.attribBoosts</code>: Attribute boosts granted when equipped.</p> </li> <li> <p><code>ITEM.RequiredSkillLevels</code>: Skill requirements to use the outfit.</p> </li> <li> <p><code>ITEM.pacData</code>: PAC3 customization data for visual effects.</p> </li> </ul>"},{"location":"framework/definitions/items/#8-gun-example","title":"8. Gun Example","text":"<p>An item representing a weapon that players can equip and use.</p> <pre><code>ITEM.name = \".357 Revolver\"\nITEM.desc = \"A sidearm utilizing .357 Caliber ammunition.\"\nITEM.model = \"models/weapons/w_357.mdl\"\nITEM.class = \"weapon_357\"\nITEM.weaponCategory = \"sidearm\"\nITEM.width = 2\nITEM.height = 1\nITEM.equipSound = \"items/ammo_pickup.wav\"\nITEM.unequipSound = \"items/ammo_pickup.wav\"\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>ITEM.name</code>: Name of the gun.</p> </li> <li> <p><code>ITEM.desc</code>: Description of the gun.</p> </li> <li> <p><code>ITEM.model</code>: 3D model representing the gun.</p> </li> <li> <p><code>ITEM.class</code>: Weapon class identifier.</p> </li> <li> <p><code>ITEM.weaponCategory</code>: Category of the weapon (e.g., \"sidearm\").</p> </li> <li> <p><code>ITEM.width</code> &amp; <code>ITEM.height</code>: Size in the inventory grid.</p> </li> <li> <p><code>ITEM.equipSound</code>: Sound played when the weapon is equipped.</p> </li> <li> <p><code>ITEM.unequipSound</code>: Sound played when the weapon is unequipped.</p> </li> </ul>"},{"location":"framework/definitions/module/","title":"Module","text":""},{"location":"framework/definitions/module/#example","title":"Example","text":"<pre><code>MODULE.name = \"A Module\"\nMODULE.author = \"76561198312513285\"\nMODULE.discord = \"@liliaplayer\"\nMODULE.version = \"Stock\"\nMODULE.desc = \"This is an Example Module.\"\nMODULE.WorkshopContent = {\"2959728255\"}\nMODULE.enabled = true\nMODULE.CAMIPrivileges = {\n    {\n        Name = \"Staff Permissions - Kekw\",\n        MinAccess = \"superadmin\",\n        Description = \"Allows access to kewking.\",\n    },\n}\nMODULE.Dependencies = {\n    {\n        File = MODULE.path .. \"/nicebogusfile.lua\",\n        Realm = \"server\",\n    },\n    {\n        File = MODULE.path .. \"/badbogusfile.lua\",\n        Realm = \"client\",\n    },\n}\n</code></pre>"},{"location":"framework/definitions/module/#key-variables-explained","title":"Key Variables Explained","text":"Variable Purpose Type Example <code>MODULE.name</code> Identifies the module by name. <code>String</code> <code>MODULE.name = \"A Module\"</code>Names the module \u201cA Module.\u201d <code>MODULE.author</code> Specifies the module\u2019s author (e.g., STEAMID64 or a name). <code>String</code> <code>MODULE.author = \"76561198312513285\"</code>Sets the author\u2019s SteamID64. <code>MODULE.discord</code> (Optional) Provides the Discord handle of the author or support channel. <code>String</code> <code>MODULE.discord = \"@liliaplayer\"</code>Displays the author\u2019s Discord tag. <code>MODULE.version</code> (Optional) Tracks the module\u2019s version or release state. <code>String</code> <code>MODULE.version = \"Stock\"</code>Marks the module\u2019s version as \u201cStock.\u201d <code>MODULE.desc</code> Describes the module\u2019s functionality or purpose. <code>String</code> <code>MODULE.desc = \"This is an Example Module.\"</code>Gives a short overview of the module. <code>MODULE.identifier</code> (Optional) A unique identifier for external references to this module. <code>String</code> <code>MODULE.identifier = \"example_mod\"</code>Helps in referencing the module externally. <code>MODULE.CAMIPrivileges</code> (Optional) Defines CAMI permissions for the module. <code>Table</code> See CAMIPrivileges Details. <code>MODULE.WorkshopContent</code> (Optional) Lists Workshop add-on IDs required by the module. <code>Table</code> of <code>Strings</code> <code>MODULE.WorkshopContent = {\"2959728255\"}</code>Includes relevant Workshop items. <code>MODULE.enabled</code> (Optional) Toggles module activation. <code>Bool</code> <code>MODULE.enabled = true</code>Enables the module. <code>MODULE.Dependencies</code> (Optional) Specifies files and realms this module depends on. <code>Table</code> of <code>Table</code> See Dependencies Details."},{"location":"framework/definitions/module/#detailed-descriptions","title":"Detailed Descriptions","text":""},{"location":"framework/definitions/module/#1-modulename","title":"1. <code>MODULE.name</code>","text":"<ul> <li> <p>Purpose:   Names the module and is used for identification in logs or load orders.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>MODULE.name = \"A Module\"\n</code></pre> Sets the module\u2019s name to \u201cA Module.\u201d</p> </li> </ul>"},{"location":"framework/definitions/module/#2-moduleauthor","title":"2. <code>MODULE.author</code>","text":"<ul> <li> <p>Purpose:   Specifies the module\u2019s author (e.g., STEAMID64 or a name).</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>MODULE.author = \"76561198312513285\"\n</code></pre> Sets the author\u2019s SteamID64.</p> </li> </ul>"},{"location":"framework/definitions/module/#3-modulediscord-optional","title":"3. <code>MODULE.discord</code> (Optional)","text":"<ul> <li> <p>Purpose:   Provides a Discord handle or server invite for support or communication.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>MODULE.discord = \"@liliaplayer\"\n</code></pre> Displays the author\u2019s or module support\u2019s Discord tag.</p> </li> </ul>"},{"location":"framework/definitions/module/#4-moduleversion-optional","title":"4. <code>MODULE.version</code> (Optional)","text":"<ul> <li> <p>Purpose:   Tracks the module\u2019s version or release state.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>MODULE.version = \"Stock\"\n</code></pre> Sets the module version to \u201cStock.\u201d Can help in version control.</p> </li> </ul>"},{"location":"framework/definitions/module/#5-moduledesc","title":"5. <code>MODULE.desc</code>","text":"<ul> <li> <p>Purpose:   Describes the module\u2019s functionality or purpose.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>MODULE.desc = \"This is an Example Module.\"\n</code></pre> Gives users a quick summary of what the module does.</p> </li> </ul>"},{"location":"framework/definitions/module/#6-moduleidentifier-optional","title":"6. <code>MODULE.identifier</code> (Optional)","text":"<ul> <li> <p>Purpose:   A unique identifier for external references to this module.</p> </li> <li> <p>Type: <code>String</code></p> </li> <li> <p>Example: <pre><code>MODULE.identifier = \"example_mod\"\n</code></pre> Allows other scripts or systems to reference this specific module.</p> </li> </ul>"},{"location":"framework/definitions/module/#7-modulecamiprivileges-optional","title":"7. <code>MODULE.CAMIPrivileges</code> (Optional)","text":"<ul> <li> <p>Purpose:   Defines CAMI (Custom Admin Mod Interface) permissions required or provided by the module.   Each privilege can have keys like <code>Name</code>, <code>MinAccess</code>, and <code>Description</code>.</p> </li> <li> <p>Type: <code>Table</code></p> </li> <li> <p>Example: <pre><code>MODULE.CAMIPrivileges = {\n    {\n        Name = \"Staff Permissions - Kekw\",\n        MinAccess = \"superadmin\",\n        Description = \"Allows access to kewking.\",\n    },\n}\n</code></pre> Sets up privileges using the CAMI system so admin mods can integrate these permissions.</p> </li> </ul>"},{"location":"framework/definitions/module/#8-moduleworkshopcontent-optional","title":"8. <code>MODULE.WorkshopContent</code> (Optional)","text":"<ul> <li> <p>Purpose:   Lists Workshop add-on IDs required by the module, enabling automatic downloading if your server or client references them.</p> </li> <li> <p>Type: <code>Table</code> of <code>Strings</code></p> </li> <li> <p>Example: <pre><code>MODULE.WorkshopContent = {\"2959728255\"}\n</code></pre> Ensures users download the specified Workshop add-ons.</p> </li> </ul>"},{"location":"framework/definitions/module/#9-moduleenabled-optional","title":"9. <code>MODULE.enabled</code> (Optional)","text":"<ul> <li> <p>Purpose:   Toggles module activation. If <code>false</code>, the module may not load or function.</p> </li> <li> <p>Type: <code>Bool</code></p> </li> <li> <p>Example: <pre><code>MODULE.enabled = true\n</code></pre> Indicates that the module is currently active.</p> </li> </ul>"},{"location":"framework/definitions/module/#10-moduledependencies-optional","title":"10. <code>MODULE.Dependencies</code> (Optional)","text":"<ul> <li> <p>Purpose:   Specifies additional files or libraries needed by this module, along with where (client or server) they should load.</p> </li> <li> <p>Type: <code>Table</code> of <code>Table</code></p> </li> <li> <p>Example: <pre><code>MODULE.Dependencies = {\n    {\n        File = MODULE.path .. \"/nicebogusfile.lua\",\n        Realm = \"server\",\n    },\n    {\n        File = MODULE.path .. \"/badbogusfile.lua\",\n        Realm = \"client\",\n    },\n}\n</code></pre> Ensures the server or client includes any files on which this module depends.</p> </li> </ul>"},{"location":"framework/definitions/module/#automatically-included-files-and-folders","title":"Automatically Included Files and Folders","text":"<p>When you place standard named files or folders in your module\u2019s directory, many frameworks will auto-include them by default. Here\u2019s a brief overview:</p>"},{"location":"framework/definitions/module/#files","title":"Files","text":"<ol> <li><code>client.lua</code> </li> <li> <p>Runs exclusively on the clients. Usually used for shorter modules.</p> </li> <li> <p><code>server.lua</code> </p> </li> <li> <p>Runs exclusively on the server. Usually used for shorter modules.</p> </li> <li> <p><code>config.lua</code> </p> </li> <li> <p>Stores configuration variables shared across the module. This file is shared between the server and client.</p> </li> <li> <p><code>commands.lua</code> </p> </li> <li>Contains command definitions. This file is shared between the server and client.</li> </ol>"},{"location":"framework/definitions/module/#folders","title":"Folders","text":"<ol> <li> <p><code>config</code>    Stores configuration files for customizing addon settings without modifying core scripts.</p> </li> <li> <p><code>dependencies</code>    Contains essential libraries or resources that must load before other scripts.</p> </li> <li> <p><code>libs</code>    Includes utility scripts or global helper functions used across the addon.</p> </li> <li> <p><code>hooks</code>    Houses scripts to register and manage Garry's Mod or custom hooks.</p> </li> <li> <p><code>libraries</code>    Contains standalone systems or major subsystems for the addon.</p> </li> <li> <p><code>commands</code>    Defines custom chat (<code>/command</code>) or console commands.</p> </li> <li> <p><code>netcalls</code>    Manages client-server communication using the <code>net</code> library.</p> </li> <li> <p><code>meta</code>    Extends or modifies metatables for core objects like <code>Player</code> or <code>Entity</code>.</p> </li> <li> <p><code>derma</code>    Creates visual GUI elements like panels, menus, or HUDs.</p> </li> <li> <p><code>pim</code>     Focuses on Player Interaction Menu definitions and actions.</p> </li> </ol>"},{"location":"framework/hooks/class_hooks/","title":"Class Hooks","text":"<p>Class hooks allow you to manage and respond to various events related to player classes in your game. Similar to Factions, each Class has its own set of hooks that are triggered when players join, leave, switch, or spawn within a class. These hooks are specifically designed to be used within class tables created in <code>schema/classes/classname.lua</code> and are not interchangeable with regular gamemode hooks.</p>"},{"location":"framework/hooks/class_hooks/#oncanbe","title":"OnCanBe","text":"<p>Description</p> <p>Determines whether a player is allowed to switch to a specific class. This hook is evaluated before a class switch occurs, allowing you to enforce restrictions based on player attributes or roles.</p> <p>Parameters</p> <ul> <li>client (<code>Player</code>): The player attempting to switch to the class.</li> </ul> <p>Returns</p> <ul> <li>bool: <code>true</code> if the player is permitted to switch to the class, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>function CLASS:OnCanBe(client)\n    -- Allow switch if the player is staff or has the \"Z\" flag\n    return client:isStaff() or client:getChar():hasFlags(\"Z\")\nend\n</code></pre> <p>In this example, only staff members or players with the \"Z\" flag can switch to this class.</p>"},{"location":"framework/hooks/class_hooks/#onleave","title":"OnLeave","text":"<p>Description</p> <p>Triggered when a player leaves the current class and joins a different one. This hook allows you to perform actions such as resetting models or other class-specific attributes when a player exits a class.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>client (<code>Player</code>): The player who has left the class.</li> </ul> <p>Example</p> <pre><code>function CLASS:OnLeave(client)\n    local character = client:getChar()\n    -- Change the player's model to Alyx when they leave the class\n    character:setModel(\"models/player/alyx.mdl\")\nend\n</code></pre> <p>This example changes the player's model to \"Alyx\" upon leaving the class.</p>"},{"location":"framework/hooks/class_hooks/#onset","title":"OnSet","text":"<p>Description</p> <p>Called when a player successfully joins a class. Use this hook to initialize class-specific settings, such as setting the player's model or other attributes upon joining.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>client (<code>Player</code>): The player who has joined the class.</li> </ul> <p>Example</p> <pre><code>function CLASS:OnSet(client)\n    -- Set the player's model to a police model when they join the class\n    client:setModel(\"models/police.mdl\")\nend\n</code></pre> <p>Here, the player's model is set to a police model upon joining the class.</p>"},{"location":"framework/hooks/class_hooks/#onspawn","title":"OnSpawn","text":"<p>Description</p> <p>Invoked when a player in the class spawns into the world. This hook is useful for setting spawn-specific attributes like health, weapons, or other spawn-related properties.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>client (<code>Player</code>): The player who has just spawned.</li> </ul> <p>Example</p> <pre><code>function CLASS:OnSpawn(client)\n    -- Set the player's maximum and current health to 500 upon spawning\n    client:SetMaxHealth(500)\n    client:SetHealth(500)\nend\n</code></pre> <p>In this example, the player's maximum and current health are both set to 500 when they spawn.</p>"},{"location":"framework/hooks/faction_hooks/","title":"Faction Hooks","text":"<p>This page details the various hooks associated with a Faction in your schema. These hooks define specific behaviors and actions that occur during different stages of a faction member's lifecycle, such as character creation, spawning, and transfer. Proper implementation of these hooks allows for customized and dynamic interactions within factions.</p>"},{"location":"framework/hooks/faction_hooks/#getdefaultname","title":"GetDefaultName","text":"<ul> <li> <p>Description:   Retrieves the default name for a character upon initial creation within the faction.</p> </li> <li> <p>Realm: <code>Shared</code></p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>client</code> (<code>Player</code>): The client for whom the default name is being retrieved.</p> </li> <li> <p>Returns: <code>String</code>: The default name for the newly created character.</p> </li> <li> <p>Usage Example: <pre><code>function FACTION:GetDefaultName(client)\n    return \"CT-\" .. math.random(111111, 999999)\nend\n</code></pre></p> </li> </ul>"},{"location":"framework/hooks/faction_hooks/#getdefaultdesc","title":"GetDefaultDesc","text":"<ul> <li> <p>Description:   Retrieves the default description for a character upon initial creation within the faction.</p> </li> <li> <p>Realm: <code>Shared</code></p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>client</code> (<code>Player</code>): The client for whom the default description is being retrieved.</p> </li> <li> <p><code>faction</code> (<code>Number</code>): The faction ID for which the default description is being retrieved.</p> </li> <li> <p>Returns: <code>String</code>: The default description for the newly created character.</p> </li> <li> <p>Usage Example: <pre><code>function FACTION:GetDefaultDesc(client, faction)\n    return \"A police officer\"\nend\n</code></pre></p> </li> </ul>"},{"location":"framework/hooks/faction_hooks/#oncharcreated","title":"OnCharCreated","text":"<ul> <li> <p>Description:   Executes actions when a character is created and assigned to the faction. Typically used to initialize character-specific data or inventory.</p> </li> <li> <p>Realm: </p> </li> <li> <p><code>Server</code></p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>client</code> (<code>Player</code>): The client that owns the character.</p> </li> <li> <p><code>character</code> (<code>Character</code>): The character that has been created.</p> </li> <li> <p>Usage Example: <pre><code>function FACTION:OnCharCreated(client, character)\n    local inventory = character:getInv()\n    inventory:add(\"fancy_suit\")\nend\n</code></pre></p> </li> </ul>"},{"location":"framework/hooks/faction_hooks/#onspawn","title":"OnSpawn","text":"<ul> <li> <p>Description:   Executes actions when a faction member spawns in the game world. Useful for setting up player-specific settings or notifications.</p> </li> <li> <p>Realm: <code>Server</code></p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>client</code> (<code>Player</code>): The player that has just spawned.</p> </li> <li> <p>Usage Example: <pre><code>function FACTION:OnSpawn(client)\n    client:ChatPrint(\"You have spawned!\")\nend\n</code></pre></p> </li> </ul>"},{"location":"framework/hooks/faction_hooks/#ontransferred","title":"OnTransferred","text":"<ul> <li> <p>Description:   Executes actions when a character is transferred to the faction. This can include changing the character's model or updating faction-specific attributes.</p> </li> <li> <p>Realm: <code>Server</code></p> </li> <li> <p>Parameters:</p> </li> <li> <p><code>character</code> (<code>Character</code>): The character that was transferred.</p> </li> <li> <p>Usage Example: <pre><code>function FACTION:OnTransferred(character)\n    local randomModelIndex = math.random(1, #self.models)\n    character:setModel(self.models[randomModelIndex])\nend\n</code></pre></p> </li> </ul>"},{"location":"framework/hooks/gamemode_hooks/","title":"Gamemode hooks","text":"<p>These hooks are regular hooks that can be used in your schema with SCHEMA:HookName(args), in your module with MODULE:HookName(args), or in your addon with hook.Add(\"HookName\", function(args) end).</p> <p>Below is a comprehensive list of available hooks and their purposes. Internal hooks are meant for internal usage by Lilia; you should only override them if you are absolutely certain you understand the implications.</p>"},{"location":"framework/hooks/gamemode_hooks/#createdefaultinventory","title":"CreateDefaultInventory","text":"<p>Description: Called when creating a default inventory for a character. Should return a deferred (or similar promise) object that resolves with the new inventory.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"CreateDefaultInventory\", \"InitializeStarterInventory\", function(character)\n    local d = deferred.new()\n\n    someInventoryCreationFunction(character)\n        :next(function(inventory)\n            -- Add starter items\n            inventory:addItem(\"health_potion\")\n            inventory:addItem(\"basic_sword\")\n            d:resolve(inventory)\n        end, function(err)\n            print(\"Failed to create inventory:\", err)\n            d:reject(err)\n        end)\n\n    return d\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charrestored","title":"CharRestored","text":"<p>Description: Called after a character has been restored from the database. Useful for post-restoration logic such as awarding default items or setting up data.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"CharRestored\", \"AwardWelcomePackage\", function(character)\n    local welcomePackage = {\"welcome_pack\", \"starter_weapon\", \"basic_armor\"}\n    for _, itemID in ipairs(welcomePackage) do\n        character:getInventory():addItem(itemID)\n    end\n    print(\"Welcome package awarded to:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#prechardelete","title":"PreCharDelete","text":"<p>Description: Called before a character is deleted. Allows for clean-up tasks or checks before removal from DB.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>id</code> (<code>number</code>): The ID of the character to be deleted.</p> <p>Example: <pre><code>hook.Add(\"PreCharDelete\", \"BackupCharacterData\", function(id)\n    local character = lia.character.getByID(id)\n    if character then\n        lia.backup.saveCharacterData(character)\n        print(\"Character data backed up for ID:\", id)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onchardelete","title":"OnCharDelete","text":"<p>Description: Called after a character is deleted. Finalize any remaining actions or remove associated data.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player who triggered the deletion. - <code>id</code> (<code>number</code>): The ID of the deleted character.</p> <p>Example: <pre><code>hook.Add(\"OnCharDelete\", \"NotifyDeletion\", function(client, id)\n    print(client:Name() .. \" has deleted character ID:\", id)\n    -- Notify other systems or perform cleanup\n    lia.notifications.sendAll(\"Character #\" .. id .. \" has been deleted by \" .. client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncharvarchanged","title":"OnCharVarChanged","text":"<p>Description: Called when a character variable changes (server-side). Useful for responding to data updates.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>character</code> (Character): The character object. - <code>key</code> (<code>string</code>): The name of the variable. - <code>oldValue</code> (<code>any</code>): The old value. - <code>newValue</code> (<code>any</code>): The new value.</p> <p>Example: <pre><code>hook.Add(\"OnCharVarChanged\", \"LogAttributeChanges\", function(character, key, oldValue, newValue)\n    print(\"Character \" .. character:getName() .. \" had \" .. key .. \" changed from \" .. tostring(oldValue) .. \" to \" .. tostring(newValue))\n    -- Additional logic, such as triggering events based on specific changes\n    if key == \"health\" and newValue &lt; 50 then\n        lia.events.trigger(\"LowHealthWarning\", character)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playermodelchanged","title":"PlayerModelChanged","text":"<p>Description: Called when a player's model changes.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player whose model changed. - <code>model</code> (<code>string</code>): The new model path.</p> <p>Example: <pre><code>hook.Add(\"PlayerModelChanged\", \"UpdatePlayerAppearance\", function(client, model)\n    print(client:Name() .. \" changed their model to \" .. model)\n    -- Update related appearance settings\n    client:setBodygroup(1, 2) -- Example of setting a bodygroup based on the new model\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getdefaultcharname","title":"GetDefaultCharName","text":"<p>Description: Retrieves a default name for a character during creation. Return <code>(defaultName, overrideBool)</code>.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player creating the character. - <code>faction</code> (<code>number</code>): The faction index. - <code>data</code> (<code>table</code>): Additional creation data.</p> <p>Returns: - <code>string</code>: The default name. - <code>bool</code>: Whether to override the user-provided name.</p> <p>Example: <pre><code>hook.Add(\"GetDefaultCharName\", \"PoliceDefaultName\", function(client, faction, data)\n    if faction == FACTION_POLICE then\n        return \"Officer \" .. data.lastName or \"Smith\", true\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getdefaultchardesc","title":"GetDefaultCharDesc","text":"<p>Description: Retrieves a default description for a character during creation. Return <code>(defaultDesc, overrideBool)</code>.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>faction</code> (<code>number</code>)</p> <p>Returns: - <code>string</code>: The default description. - <code>bool</code>: Whether to override.</p> <p>Example: <pre><code>hook.Add(\"GetDefaultCharDesc\", \"CitizenDefaultDesc\", function(client, faction)\n    if faction == FACTION_CITIZEN then\n        return \"A hardworking member of society.\", true\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shouldhidebars","title":"ShouldHideBars","text":"<p>Description: Determines whether all HUD bars should be hidden.</p> <p>Realm: <code>Client</code></p> <p>Returns: - <code>bool|nil</code>: <code>true</code> to hide, <code>nil</code> to allow rendering.</p> <p>Example: <pre><code>hook.Add(\"ShouldHideBars\", \"HideHUDInCinematic\", function()\n    if gui.IsInCinematicMode() then\n        return true\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shouldbardraw","title":"ShouldBarDraw","text":"<p>Description: Determines whether a specific HUD bar should be drawn.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>barName</code> (<code>string</code>): e.g. <code>\"health\"</code>, <code>\"armor\"</code>.</p> <p>Returns: - <code>bool|nil</code>: <code>false</code> to hide, <code>nil</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"ShouldBarDraw\", \"HideArmorHUD\", function(barName)\n    if barName == \"armor\" then\n        return false\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#initializedchatclasses","title":"InitializedChatClasses","text":"<p>Description: Called once all chat classes have been initialized.</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>hook.Add(\"InitializedChatClasses\", \"RegisterGlobalOOC\", function()\n    lia.chat.register(\"globalOOC\", {\n        prefix = {\"/gooc\"},\n        format = \"[GLOBAL OOC] %s: \\\"%s\\\"\",\n        onCanHear = function(speaker, listener)\n            return listener:isAdmin() -- Only admins can hear global OOC\n        end\n    })\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playermessagesend","title":"PlayerMessageSend","text":"<p>Description: Called before a chat message is sent. Return <code>false</code> to cancel, or modify the message if returning a string.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>speaker</code> (<code>Player</code>) - <code>chatType</code> (<code>string</code>) - <code>message</code> (<code>string</code>) - <code>anonymous</code> (<code>bool</code>)</p> <p>Returns: - <code>bool|nil|modifiedString</code>: <code>false</code> to cancel, or return a modified string to change the message.</p> <p>Example: <pre><code>hook.Add(\"PlayerMessageSend\", \"FilterProfanity\", function(speaker, chatType, message, anonymous)\n    local filteredMessage = string.gsub(message, \"badword\", \"****\")\n    if filteredMessage ~= message then\n        return filteredMessage\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerjoinclass","title":"CanPlayerJoinClass","text":"<p>Description: Determines whether a player can join a certain class. Return <code>false</code> to block.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>class</code> (<code>number</code>) - <code>info</code> (<code>table</code>)</p> <p>Returns: - <code>bool|nil</code>: <code>false</code> to block, <code>nil</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"CanPlayerJoinClass\", \"RestrictEliteClass\", function(client, class, info)\n    if class == CLASS_ELITE and not client:hasPermission(\"join_elite\") then\n        return false\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#initializedclasses","title":"InitializedClasses","text":"<p>Description: Called after all classes have been initialized.</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>hook.Add(\"InitializedClasses\", \"AddCustomClass\", function()\n    local CLASS = {}\n    CLASS.name = \"Medic\"\n    CLASS.faction = FACTION_HEALTHCARE\n    CLASS.isDefault = false\n    CLASS.index = #lia.class.list + 1\n    lia.class.list[CLASS.index] = CLASS\n    print(\"Custom class 'Medic' added.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerusecommand","title":"CanPlayerUseCommand","text":"<p>Description: Determines if a player can use a specific command. Return <code>false</code> to block usage.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>command</code> (<code>string</code>)</p> <p>Returns: - <code>bool|nil</code>: <code>false</code> to block, <code>nil</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"CanPlayerUseCommand\", \"BlockSensitiveCommands\", function(client, command)\n    local blockedCommands = {\"shutdown\", \"restart\"}\n    if table.HasValue(blockedCommands, command) and not client:isSuperAdmin() then\n        return false\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddatabesaved","title":"ShouldDataBeSaved","text":"<p>Description: Determines whether data should be saved during server shutdown.</p> <p>Realm: <code>Server</code></p> <p>Returns: - <code>bool</code>: <code>true</code> to save, <code>false</code> to skip.</p> <p>Example: <pre><code>hook.Add(\"ShouldDataBeSaved\", \"ConditionalDataSave\", function()\n    if not lia.config.enableDataPersistence then\n        return false\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#postloaddata","title":"PostLoadData","text":"<p>Description: Called after all data has been loaded.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"PostLoadData\", \"InitializePlayerStats\", function()\n    for _, ply in ipairs(player.GetAll()) do\n        local stats = lia.data.get(\"player_\" .. ply:getChar():getID(), {kills = 0, deaths = 0})\n        ply:setKills(stats.kills)\n        ply:setDeaths(stats.deaths)\n        print(\"Initialized stats for:\", ply:Name())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#savedata","title":"SaveData","text":"<p>Description: Saves all relevant data to disk, triggered during map cleanup and shutdown.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"SaveData\", \"PersistPlayerData\", function()\n    for _, ply in ipairs(player.GetAll()) do\n        local char = ply:getChar()\n        if char then\n            lia.data.set(\"player_\" .. char:getID(), char:getData(), false, false)\n            print(\"Saved data for:\", char:getName())\n        end\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#loaddata","title":"LoadData","text":"<p>Description: Loads all relevant data from disk, typically after map cleanup.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"LoadData\", \"LoadPlayerData\", function()\n    for key, _ in pairs(lia.data.stored) do\n        if string.StartWith(key, \"player_\") then\n            local data = lia.data.get(key, {})\n            local playerID = string.sub(key, 8) -- Remove 'player_' prefix\n            local ply = player.GetBySteamID(playerID)\n            if ply then\n                ply:setKills(data.kills or 0)\n                ply:setDeaths(data.deaths or 0)\n                print(\"Loaded data for:\", ply:Name())\n            end\n        end\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onmysqlooconnected","title":"OnMySQLOOConnected","text":"<p>Description: Called when MySQLOO successfully connects to the database. Use to register prepared statements or init DB logic.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"OnMySQLOOConnected\", \"PrepareDatabaseStatements\", function()\n    lia.db.prepare(\"insertPlayer\", \"INSERT INTO lia_players (_steamID, _steamName) VALUES (?, ?)\", {MYSQLOO_STRING, MYSQLOO_STRING})\n    lia.db.prepare(\"updatePlayerStats\", \"UPDATE lia_players SET kills = ?, deaths = ? WHERE _steamID = ?\", {MYSQLOO_NUMBER, MYSQLOO_NUMBER, MYSQLOO_STRING})\n    print(\"Prepared MySQLOO statements.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#liliatablesloaded","title":"LiliaTablesLoaded","text":"<p>Description: Called after all essential DB tables have been loaded.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"LiliaTablesLoaded\", \"InitializeGameState\", function()\n    lia.gameState = lia.gameState or {}\n    lia.gameState.activeEvents = {}\n    print(\"All essential Lilia tables have been loaded. Game state initialized.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onloadtables","title":"OnLoadTables","text":"<p>Description: Called before the faction tables are loaded. Good spot for data setup prior to factions being processed.</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>hook.Add(\"OnLoadTables\", \"SetupFactionDefaults\", function()\n    lia.factions = lia.factions or {}\n    lia.factions.defaultPermissions = {canUseWeapons = true, canAccessBank = false}\n    print(\"Faction defaults have been set up.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#persistencesave","title":"PersistenceSave","text":"<p>Description: Called to save persistent data (like map entities), often during map cleanup or shutdown.</p> <p>Realm: <code>Server</code></p> <p>Usage Example: <pre><code>hook.Add(\"PersistenceSave\", \"SaveMapEntities\", function()\n    for _, ent in ipairs(ents.GetAll()) do\n        if ent:isPersistent() then\n            lia.data.set(\"entity_\" .. ent:EntIndex(), ent:getData(), true)\n            print(\"Saved entity data for:\", ent:GetClass())\n        end\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#registerpreparedstatements","title":"RegisterPreparedStatements","text":"<p>Description: Called for registering DB prepared statements post-MySQLOO connection.</p> <p>Realm: <code>Server</code></p> <p>Usage Example: <pre><code>hook.Add(\"RegisterPreparedStatements\", \"RegisterAllStatements\", function()\n    lia.db.prepare(\"deletePlayer\", \"DELETE FROM lia_players WHERE _steamID = ?\", {MYSQLOO_STRING})\n    lia.db.prepare(\"getPlayerData\", \"SELECT * FROM lia_players WHERE _steamID = ?\", {MYSQLOO_STRING})\n    print(\"All prepared statements have been registered.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charcleanup","title":"CharCleanUp","text":"<p>Description: Used during character cleanup routines for additional steps when removing or transitioning a character.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>character</code>: The character being cleaned up.</p> <p>Example: <pre><code>hook.Add(\"CharCleanUp\", \"RemoveTemporaryItems\", function(character)\n    local inventory = character:getInventory()\n    for _, item in ipairs(inventory:getItems()) do\n        if item:isTemporary() then\n            inventory:removeItem(item.id)\n            print(\"Removed temporary item:\", item.name)\n        end\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#createinventorypanel","title":"CreateInventoryPanel","text":"<p>Description: Client-side call when creating the graphical representation of an inventory.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>inventory</code> - <code>parent</code> (<code>Panel</code>)</p> <p>Returns: <code>Panel|nil</code> \u2014 A custom panel or nil for default logic.</p> <p>Example: <pre><code>hook.Add(\"CreateInventoryPanel\", \"CustomInventoryUI\", function(inventory, parent)\n    local panel = vgui.Create(\"DPanel\", parent)\n    panel:SetSize(400, 600)\n    panel.Paint = function(self, w, h)\n        draw.RoundedBox(8, 0, 0, w, h, Color(30, 30, 30, 200))\n    end\n\n    local itemList = vgui.Create(\"DScrollPanel\", panel)\n    itemList:Dock(FILL)\n\n    for _, item in ipairs(inventory:getItems()) do\n        local itemPanel = vgui.Create(\"DButton\", itemList)\n        itemPanel:SetText(item.name)\n        itemPanel:Dock(TOP)\n        itemPanel:SetTall(40)\n        itemPanel.DoClick = function()\n            print(\"Selected item:\", item.name)\n        end\n    end\n\n    return panel\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onitemregistered","title":"OnItemRegistered","text":"<p>Description: Called after an item has been registered. Useful for customizing item behavior or adding properties.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>item</code> (Item)</p> <p>Example: <pre><code>hook.Add(\"OnItemRegistered\", \"AddItemDurability\", function(item)\n    if item.uniqueID == \"sword_basic\" then\n        item.durability = 100\n        item.onUse = function(self)\n            self.durability = self.durability - 10\n            if self.durability &lt;= 0 then\n                self:destroy()\n                print(\"Your sword has broken!\")\n            end\n        end\n        print(\"Durability added to:\", item.name)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#initializeditems","title":"InitializedItems","text":"<p>Description: Called once all item modules have been loaded from a directory.</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>hook.Add(\"InitializedItems\", \"SetupSpecialItems\", function()\n    local specialItem = lia.item.create({\n        uniqueID = \"magic_ring\",\n        name = \"Magic Ring\",\n        description = \"A ring imbued with magical properties.\",\n        onUse = function(self, player)\n            player:grantAbility(\"invisibility\")\n            print(player:Name() .. \" has activated the Magic Ring!\")\n        end\n    })\n    print(\"Special items have been set up.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onserverlog","title":"OnServerLog","text":"<p>Description: Called whenever a new log message is added. Allows for custom logic or modifications to log handling.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>logType</code> (<code>string</code>) - <code>logString</code> (<code>string</code>) - <code>category</code> (<code>string</code>) - <code>color</code> (<code>Color</code>)</p> <p>Example: <pre><code>hook.Add(\"OnServerLog\", \"AlertAdminsOnHighSeverity\", function(client, logType, logString, category, color)\n    if category == \"error\" then\n        for _, admin in ipairs(player.GetAll()) do\n            if admin:isAdmin() then\n                lia.notifications.send(admin, \"Error Log: \" .. logString, color)\n            end\n        end\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#domoduleincludes","title":"DoModuleIncludes","text":"<p>Description: Called when modules include submodules. Useful for advanced module handling or dependency management.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>path</code> (<code>string</code>) - <code>module</code> (<code>table</code>)</p> <p>Example: <pre><code>hook.Add(\"DoModuleIncludes\", \"TrackModuleDependencies\", function(path, module)\n    print(\"Including submodule from path:\", path)\n    module.dependencies = module.dependencies or {}\n    table.insert(module.dependencies, \"base_module\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onfinishload","title":"OnFinishLoad","text":"<p>Description: Called after a module finishes loading. Ideal for final logic once all module files are processed.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>path</code> (<code>string</code>): The file path. - <code>firstLoad</code> (<code>bool</code>): Whether this is the first load of the module.</p> <p>Example: <pre><code>hook.Add(\"OnFinishLoad\", \"ModuleLoadNotifier\", function(path, firstLoad)\n    if firstLoad then\n        print(\"Module loaded for the first time from:\", path)\n    else\n        print(\"Module reloaded from:\", path)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#initializedschema","title":"InitializedSchema","text":"<p>Description: Called after the schema has finished initializing.</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>hook.Add(\"InitializedSchema\", \"SchemaReadyNotification\", function()\n    print(\"Schema has been successfully initialized.\")\n    lia.notifications.broadcast(\"Welcome to the server! The schema is now active.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#initializedmodules","title":"InitializedModules","text":"<p>Description: Called after all modules are fully initialized.</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>hook.Add(\"InitializedModules\", \"FinalizeModuleSetup\", function()\n    lia.modules.finalizeSetup()\n    print(\"All modules have been fully initialized.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onpickupmoney","title":"OnPickupMoney","text":"<p>Description: Called when a player picks up money from the ground.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>moneyEntity</code> (<code>Entity</code>)</p> <p>Example: <pre><code>function MODULE:OnPickupMoney(client, moneyEntity)\n    local amount = moneyEntity:getAmount()\n    client:addMoney(amount)\n    print(client:Name() .. \" picked up $\" .. amount)\n    moneyEntity:Remove() -- Remove the money entity from the ground\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onitemspawned","title":"OnItemSpawned","text":"<p>Description: Called whenever an item entity spawns in the world. Use <code>entity:getItemTable()</code> to access item data.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"OnItemSpawned\", \"LogItemSpawns\", function(entity)\n    local item = entity:getItemTable()\n    if item then\n        print(\"Item spawned:\", item.name, \"at position\", entity:GetPos())\n    else\n        print(\"An unknown item has spawned.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#loadfonts","title":"LoadFonts","text":"<p>Description: Loads custom fonts for the client.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>font</code> (<code>string</code>) - <code>genericFont</code> (<code>string</code>)</p> <p>Example: <pre><code>function MODULE:LoadFonts(font, genericFont)\n    surface.CreateFont(\"CustomHUDFont\", {\n        font = font or \"Arial\",\n        size = 20,\n        weight = 700,\n        antialias = true\n    })\n\n    surface.CreateFont(\"NotificationFont\", {\n        font = genericFont or \"Tahoma\",\n        size = 18,\n        weight = 500,\n        italic = true\n    })\n    print(\"Custom fonts loaded.\")\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#loadliliafonts","title":"LoadLiliaFonts","text":"<p>Description: Used internally to load core fonts. Override only if you understand the implications.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>font</code> (<code>string</code>) - <code>genericFont</code> (<code>string</code>)</p> <p>Example: <pre><code>function MODULE:LoadLiliaFonts(font, genericFont)\n    surface.CreateFont(\"LiliaDefault\", {\n        font = font or \"Verdana\",\n        size = 16,\n        weight = 600\n    })\n    print(\"Lilia core fonts have been loaded.\")\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#initializedconfig","title":"InitializedConfig","text":"<p>Description: Called when <code>lia.config</code> is fully initialized.</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>function MODULE:InitializedConfig()\n    if lia.config.enableSpecialFeatures then\n        lia.features.enable()\n        print(\"Special features have been enabled.\")\n    else\n        print(\"Special features are disabled in the config.\")\n    end\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#moduleloaded","title":"ModuleLoaded","text":"<p>Description: Called when a module has finished loading (post-load logic).</p> <p>Realm: <code>Shared</code></p> <p>Example: <pre><code>function MODULE:ModuleLoaded()\n    print(\"Module '\" .. self.name .. \"' has been loaded successfully.\")\n    -- Perform additional setup or initialization if necessary\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#databaseconnected","title":"DatabaseConnected","text":"<p>Description: Indicates successful MySQLOO DB connection. Used internally.</p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>-- Internal usage; generally not overridden by modules\nfunction MODULE:DatabaseConnected()\n    print(\"Database connection established.\")\n    -- Internal initialization tasks\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onwipetables","title":"OnWipeTables","text":"<p>Description: Called after wiping tables in the DB, typically after major resets/cleanups.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>hook.Add(\"OnWipeTables\", \"ReinitializeDefaults\", function()\n    lia.db.execute(\"INSERT INTO lia_factions (name, description) VALUES ('Citizen', 'Regular inhabitants.')\")\n    lia.db.execute(\"INSERT INTO lia_classes (name, faction) VALUES ('Warrior', 'Citizen')\")\n    print(\"Database tables wiped and defaults reinitialized.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#setupdatabase","title":"SetupDatabase","text":"<p>Description: Used internally by Lilia to set up the database.</p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Realm: <code>Server</code></p> <p>Example: <pre><code>-- Internal usage; generally not overridden by modules\nfunction MODULE:SetupDatabase()\n    lia.db.execute(\"CREATE TABLE IF NOT EXISTS lia_players (id INT AUTO_INCREMENT, _steamID VARCHAR(32), _steamName VARCHAR(64), PRIMARY KEY(id))\")\n    lia.db.execute(\"CREATE TABLE IF NOT EXISTS lia_factions (id INT AUTO_INCREMENT, name VARCHAR(32), description TEXT, PRIMARY KEY(id))\")\n    print(\"Database tables have been set up.\")\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerunequipitem","title":"CanPlayerUnequipItem","text":"<p>Description: Determines whether a player can unequip a given item.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>item</code> (<code>table</code> or custom item object`)</p> <p>Returns: - <code>bool</code>: <code>true</code> if allowed, <code>false</code> if blocked.</p> <p>Example: <pre><code>function MODULE:CanPlayerUnequipItem(client, item)\n    if item.uniqueID == \"quest_item\" then\n        return false -- Prevent unequipping quest-related items\n    end\n    return true\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerdropitem","title":"CanPlayerDropItem","text":"<p>Description: Determines if a player is allowed to drop a specific item.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>item</code> (<code>int</code> or <code>table</code>)</p> <p>Returns: - <code>bool</code>: <code>true</code> to allow, <code>false</code> to block.</p> <p>Example: <pre><code>function MODULE:CanPlayerDropItem(client, item)\n    if item.uniqueID == \"rare_artifact\" and not client:isAdmin() then\n        return false -- Only admins can drop rare artifacts\n    end\n    return true\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayertakeitem","title":"CanPlayerTakeItem","text":"<p>Description: Determines if a player can pick up an item into their inventory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>item</code> (<code>Entity</code> or <code>table</code>)</p> <p>Returns: - <code>bool</code>: <code>true</code> if allowed, <code>false</code> otherwise.</p> <p>Example: <pre><code>function MODULE:CanPlayerTakeItem(client, item)\n    if item:isBoundToPlayer() and item:getOwner() ~= client then\n        return false -- Prevent picking up items bound to other players\n    end\n    return true\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerequipitem","title":"CanPlayerEquipItem","text":"<p>Description: Determines if a player can equip a given item (e.g., outfits, weapons).</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>item</code> (<code>table</code>)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>function MODULE:CanPlayerEquipItem(client, item)\n    if item.category == \"Weapon\" and not client:hasLicense(\"weapon\") then\n        return false -- Require a license to equip weapons\n    end\n    return true\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerinteractitem","title":"CanPlayerInteractItem","text":"<p>Description: Determines if a player can interact with an item (pick up, drop, transfer, etc.). Called after other checks.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>action</code> (<code>string</code>): e.g. <code>\"drop\"</code>, <code>\"pickup\"</code>, <code>\"transfer\"</code> - <code>item</code> (<code>int</code> or <code>table</code>)</p> <p>Returns: - <code>bool</code>: <code>true</code> if allowed, <code>false</code> otherwise.</p> <p>Example: <pre><code>function MODULE:CanPlayerInteractItem(client, action, item)\n    if action == \"transfer\" and item:isBoundToFaction(\"Police\") and not client:isPolice() then\n        return false -- Only police can transfer faction-bound items\n    end\n    return true\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#entityremoved","title":"EntityRemoved","text":"<p>Description: Called when an entity is removed. Often used for cleaning up net variables.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"EntityRemoved\", \"CleanupEntityData\", function(entity)\n    if entity:isItem() then\n        lia.data.remove(\"entity_\" .. entity:EntIndex())\n        print(\"Cleaned up data for removed entity:\", entity:GetClass())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playerinitialspawn","title":"PlayerInitialSpawn","text":"<p>Description: Called when a player initially spawns on the server. Used to sync net vars or send data to the client.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"PlayerInitialSpawn\", \"SyncPlayerData\", function(client)\n    local char = client:getChar()\n    if char then\n        lia.netstream.Start(client, \"SyncCharData\", char:getData())\n        print(\"Synchronized data for:\", client:Name())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#postplayerinitialspawn","title":"PostPlayerInitialSpawn","text":"<p>Description: Called after a player has fully initialized (post-initial-spawn logic).</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"PostPlayerInitialSpawn\", \"SendWelcomeMessage\", function(client)\n    client:ChatPrint(\"Welcome to the server, \" .. client:Name() .. \"!\")\n    lia.notifications.send(client, \"Welcome to the server!\", Color(0, 255, 0))\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playerliliadataloaded","title":"PlayerLiliaDataLoaded","text":"<p>Description: Called when Lilia has finished loading all its data for a player (e.g., characters, inventories).</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"PlayerLiliaDataLoaded\", \"InitializePlayerStats\", function(client)\n    client:setHealth(client:getChar():getHealth())\n    client:setArmor(client:getChar():getArmor())\n    print(\"Player data loaded for:\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onchardisconnect","title":"OnCharDisconnect","text":"<p>Description: Called when a player disconnects while having a valid character. Often used for partial saves or cleanups.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"OnCharDisconnect\", \"SavePartialData\", function(client, character)\n    lia.data.set(\"player_\" .. character:getID(), character:getPartialData(), true)\n    print(\"Partial data saved for disconnected character:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shouldspawnclientragdoll","title":"ShouldSpawnClientRagdoll","text":"<p>Description: Determines if a client ragdoll should spawn (e.g., on death or fallover).</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>bool</code> (<code>false</code> to prevent ragdoll)</p> <p>Example: <pre><code>hook.Add(\"ShouldSpawnClientRagdoll\", \"DisableRagdollForVIPs\", function(client)\n    if client:isVIP() then\n        return false -- VIPs do not spawn ragdolls on death\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playeruse","title":"PlayerUse","text":"<p>Description: Called when a player attempts to use an entity recognized as a door or player.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"PlayerUse\", \"PreventUsingLockedDoors\", function(client, entity)\n    if entity:isDoor() and not entity:isUnlocked() then\n        client:ChatPrint(\"This door is locked.\")\n        return false -- Prevent usage\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shouldmenubuttonshow","title":"ShouldMenuButtonShow","text":"<p>Description: Determines if a particular menu button should appear (e.g., character creation).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>buttonName</code> (<code>string</code>)</p> <p>Returns: 1. <code>bool|nil</code> \u2014 Return <code>false</code> to hide, or <code>nil</code> to allow. 2. <code>string|nil</code> \u2014 Optional reason or message.</p> <p>Example: <pre><code>hook.Add(\"ShouldMenuButtonShow\", \"HideAdminMenuButton\", function(buttonName)\n    if buttonName == \"AdminPanel\" and not LocalPlayer():isAdmin() then\n        return false, \"Admin access required.\"\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onitemcreated","title":"OnItemCreated","text":"<p>Description: Called when an item entity is created in the world (different from OnItemSpawned).</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>itemTable</code> (<code>table</code>) - <code>entity</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"OnItemCreated\", \"LogNewItemCreation\", function(itemTable, entity)\n    print(\"New item created:\", itemTable.name, \"at position\", entity:GetPos())\n    -- Apply special properties\n    if itemTable.uniqueID == \"magic_scroll\" then\n        entity:setGlow(true)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getitemdropmodel","title":"getItemDropModel","text":"<p>Description: Returns an alternate model path for a dropped item instead of the default.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>itemTable</code> (<code>table</code>) - <code>entity</code> (<code>Entity</code>)</p> <p>Returns: - <code>string|nil</code>: An alternate path, or <code>nil</code> for default.</p> <p>Example: <pre><code>hook.Add(\"getItemDropModel\", \"CustomDropModelForWeapons\", function(itemTable, entity)\n    if itemTable.category == \"Weapon\" then\n        return \"models/weapons/w_rif_ak47.mdl\"\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#handleitemtransferrequest","title":"HandleItemTransferRequest","text":"<p>Description: Triggered when the client sends a request to transfer an item from one inventory slot to another.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>itemID</code> (<code>number</code>) - <code>x</code>, <code>y</code> (coordinates or nil) - <code>invID</code> (target inventory ID or nil)</p> <p>Example: <pre><code>hook.Add(\"HandleItemTransferRequest\", \"ValidateItemTransfer\", function(client, itemID, x, y, invID)\n    local item = client:getInventory():getItemByID(itemID)\n    if item and item:isTransferable() then\n        client:getInventory():moveItem(itemID, invID, x, y)\n        print(client:Name() .. \" transferred item ID \" .. itemID .. \" to inventory \" .. invID)\n    else\n        client:ChatPrint(\"You cannot transfer this item.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#setupbaginventoryaccessrules","title":"SetupBagInventoryAccessRules","text":"<p>Description: Configure or override rules for a bag inventory (e.g., restricting categories).</p> <p>Realm: <code>Server</code> or <code>Shared</code></p> <p>Parameters: - <code>inventory</code> (Inventory)</p> <p>Example: <pre><code>hook.Add(\"SetupBagInventoryAccessRules\", \"RestrictBagToConsumables\", function(inventory)\n    inventory:setAllowedCategories({\"Consumables\"})\n    print(\"Bag inventory restricted to Consumables category.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canpickupmoney","title":"CanPickupMoney","text":"<p>Description: Determines if a player can pick up a money entity from the ground.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>activator</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>)</p> <p>Returns: - <code>bool</code> (<code>false</code> to block)</p> <p>Example: <pre><code>hook.Add(\"CanPickupMoney\", \"LimitMoneyPickupInSafeZones\", function(activator, entity)\n    if activator:isInSafeZone() then\n        return false -- Prevent picking up money in safe zones\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getmoneymodel","title":"GetMoneyModel","text":"<p>Description: Returns a custom model path for a money entity based on its amount.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>amount</code> (<code>number</code>)</p> <p>Returns: - <code>string|nil</code></p> <p>Example: <pre><code>hook.Add(\"GetMoneyModel\", \"DynamicMoneyModels\", function(amount)\n    if amount &gt;= 1000 then\n        return \"models/props/cs_assault/money_bag_large.mdl\"\n    elseif amount &gt;= 100 then\n        return \"models/props/cs_assault/money_bag_medium.mdl\"\n    else\n        return \"models/props/cs_assault/money_bag_small.mdl\"\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canoutfitchangemodel","title":"CanOutfitChangeModel","text":"<p>Description: Determines whether an outfit item can change the player\u2019s model.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>item</code> (Item)</p> <p>Returns: - <code>bool</code> (<code>false</code> to block)</p> <p>Example: <pre><code>function MODULE:CanOutfitChangeModel(item)\n    if item.uniqueID == \"halloween_costume\" then\n        return false -- Prevent changing model with Halloween costume\n    end\n    return true\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncharpermakilled","title":"OnCharPermakilled","text":"<p>Description: Called when a character is permanently killed.</p> <p>Realm: <code>Server</code> or <code>Shared</code></p> <p>Parameters: - <code>character</code> (Character) - <code>time</code> (<code>number|nil</code>)</p> <p>Example: <pre><code>hook.Add(\"OnCharPermakilled\", \"HandleCharacterPermakill\", function(character, time)\n    print(\"Character \" .. character:getName() .. \" has been permanently killed.\")\n    -- Log the event or notify administrators\n    lia.log.write(\"CharacterPermakill\", character:getName() .. \" was permakilled.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#itemcombine","title":"ItemCombine","text":"<p>Description: Called when the system attempts to combine one item with another in an inventory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>item</code> (Item) - <code>targetItem</code> (Item)</p> <p>Returns: - <code>bool</code>: <code>true</code> if combination is valid and consumed, <code>false</code> otherwise.</p> <p>Example: <pre><code>hook.Add(\"ItemCombine\", \"CombineHealthAndHerb\", function(client, item, targetItem)\n    if item.uniqueID == \"health_potion\" and targetItem.uniqueID == \"herb\" then\n        local newItem = lia.item.create(\"super_health_potion\")\n        client:getInventory():addItem(newItem)\n        client:getInventory():removeItem(item.id)\n        client:getInventory():removeItem(targetItem.id)\n        print(client:Name() .. \" combined Health Potion with Herb to create Super Health Potion.\")\n        return true\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncharfallover","title":"OnCharFallover","text":"<p>Description: Called when a character ragdolls or \u201cfalls over.\u201d</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>unknown</code> (any) - <code>bool</code> (forced or not)</p> <p>Example: <pre><code>hook.Add(\"OnCharFallover\", \"HandleFallover\", function(client, unknown, forced)\n    if forced then\n        client:ChatPrint(\"You have been forcibly knocked down!\")\n    else\n        client:ChatPrint(\"You have fallen over.\")\n    end\n    -- Apply status effects or cooldowns\n    client:setStatus(\"falling\", true)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#addcreationdata","title":"AddCreationData","text":"<p>Description: Allows modifying or adding extra data steps in the character creation process (server side).</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>data</code> (<code>table</code>) - <code>newData</code> (<code>table</code>) - <code>originalData</code> (<code>table</code>)</p> <p>Example: <pre><code>hook.Add(\"AddCreationData\", \"IncludeBackgroundStory\", function(client, data, newData, originalData)\n    newData.background = \"A mysterious past awaits.\"\n    print(\"Background story added to character creation data.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charlistupdated","title":"CharListUpdated","text":"<p>Description: Called when the character list for a player is updated (client side).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>oldCharList</code> (<code>table</code>) - <code>newCharList</code> (<code>table</code>)</p> <p>Example: <pre><code>hook.Add(\"CharListUpdated\", \"UpdateUIOnCharListChange\", function(oldCharList, newCharList)\n    if #newCharList &gt; #oldCharList then\n        print(\"A new character has been added to the list.\")\n    elseif #newCharList &lt; #oldCharList then\n        print(\"A character has been removed from the list.\")\n    else\n        print(\"Character list updated.\")\n    end\n    -- Refresh the character selection UI\n    inventoryUI:updateCharacterList(newCharList)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#configurecharactercreationsteps","title":"ConfigureCharacterCreationSteps","text":"<p>Description: Allows schemas/modules to insert or modify steps in the char creation UI (client side).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>panel</code> (<code>Panel</code>)</p> <p>Example: <pre><code>hook.Add(\"ConfigureCharacterCreationSteps\", \"AddAppearanceStep\", function(panel)\n    local appearanceStep = vgui.Create(\"DPanel\", panel)\n    appearanceStep:Dock(TOP)\n    appearanceStep:SetTall(100)\n    appearanceStep.Paint = function(self, w, h)\n        draw.SimpleText(\"Customize Your Appearance\", \"Default\", 10, 10, Color(255,255,255))\n    end\n    panel:addStep(\"Appearance\", appearanceStep)\n    print(\"Appearance step added to character creation.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#candeletechar","title":"CanDeleteChar","text":"<p>Description: Checks if a character can be deleted before the UI or server attempts it.</p> <p>Realm: <code>Client</code> or <code>Shared</code></p> <p>Parameters: - <code>charID</code> (<code>number</code>)</p> <p>Returns: - <code>bool</code>: <code>false</code> to block - <code>string|nil</code>: Optional reason</p> <p>Example: <pre><code>hook.Add(\"CanDeleteChar\", \"PreventDeletionOfMainChar\", function(charID)\n    local character = lia.character.getByID(charID)\n    if character and character:isMainCharacter() then\n        return false, \"You cannot delete your main character.\"\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#kickedfromchar","title":"KickedFromChar","text":"<p>Description: Called when a player is forcibly kicked from their current character.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>id</code> (<code>number</code>): The character ID - <code>isCurrentChar</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"KickedFromChar\", \"NotifyPlayerOfKick\", function(id, isCurrentChar)\n    if isCurrentChar then\n        chat.AddText(Color(255,0,0), \"You have been kicked from your current character (ID: \" .. id .. \").\")\n    else\n        print(\"You have been kicked from character ID:\", id)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#lilialoaded","title":"LiliaLoaded","text":"<p>Description: Called when Lilia\u2019s client-side scripts have fully loaded.</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"LiliaLoaded\", \"InitializeClientFeatures\", function()\n    lia.clientFeatures.initialize()\n    print(\"Lilia client-side scripts have been loaded.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendorclassupdated","title":"VendorClassUpdated","text":"<p>Description: Called when a vendor\u2019s allowed classes are updated.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>id</code> (<code>string</code>): Class ID - <code>allowed</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorClassUpdated\", \"UpdateVendorUIForClasses\", function(vendor, id, allowed)\n    local vendorPanel = lia.ui.getVendorPanel(vendor)\n    if vendorPanel then\n        vendorPanel:updateClassAccess(id, allowed)\n        print(\"Vendor class access updated for class ID:\", id)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendorfactionupdated","title":"VendorFactionUpdated","text":"<p>Description: Called when a vendor\u2019s allowed factions are updated.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>id</code> (<code>string</code>) - <code>allowed</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorFactionUpdated\", \"RefreshVendorFactionDisplay\", function(vendor, id, allowed)\n    local vendorUI = lia.ui.getVendorUI(vendor)\n    if vendorUI then\n        vendorUI:updateFactionAccess(id, allowed)\n        print(\"Vendor faction access updated for faction ID:\", id)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendoritemmaxstockupdated","title":"VendorItemMaxStockUpdated","text":"<p>Description: Called when a vendor\u2019s item max stock is updated.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>itemType</code> (<code>string</code>) - <code>value</code> (<code>int</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorItemMaxStockUpdated\", \"UpdateVendorStockLimits\", function(vendor, itemType, value)\n    local vendorPanel = lia.ui.getVendorPanel(vendor)\n    if vendorPanel then\n        vendorPanel:setItemMaxStock(itemType, value)\n        print(\"Vendor stock limit updated for item:\", itemType, \"New limit:\", value)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendoritemstockupdated","title":"VendorItemStockUpdated","text":"<p>Description: Called when a vendor\u2019s item stock is updated.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>itemType</code> (<code>string</code>) - <code>value</code> (<code>int</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorItemStockUpdated\", \"RefreshVendorItemStock\", function(vendor, itemType, value)\n    local vendorUI = lia.ui.getVendorUI(vendor)\n    if vendorUI then\n        vendorUI:updateItemStock(itemType, value)\n        print(\"Vendor item stock updated for\", itemType, \"New stock:\", value)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendoritemmodeupdated","title":"VendorItemModeUpdated","text":"<p>Description: Called when a vendor\u2019s item mode is updated.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>itemType</code> (<code>string</code>) - <code>value</code> (<code>int</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorItemModeUpdated\", \"ChangeVendorItemMode\", function(vendor, itemType, value)\n    local vendorUI = lia.ui.getVendorUI(vendor)\n    if vendorUI then\n        vendorUI:setItemMode(itemType, value)\n        print(\"Vendor item mode updated for\", itemType, \"Mode:\", value)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendoritempriceupdated","title":"VendorItemPriceUpdated","text":"<p>Description: Called when a vendor\u2019s item price is updated.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>itemType</code> (<code>string</code>) - <code>value</code> (<code>int</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorItemPriceUpdated\", \"UpdateVendorItemPrices\", function(vendor, itemType, value)\n    local vendorPanel = lia.ui.getVendorPanel(vendor)\n    if vendorPanel then\n        vendorPanel:updateItemPrice(itemType, value)\n        print(\"Vendor item price updated for\", itemType, \"New price:\", value)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendormoneyupdated","title":"VendorMoneyUpdated","text":"<p>Description: Called when a vendor\u2019s money is updated.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>money</code> (<code>int</code>) - <code>oldMoney</code> (<code>int</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorMoneyUpdated\", \"RefreshVendorFunds\", function(vendor, money, oldMoney)\n    local vendorUI = lia.ui.getVendorUI(vendor)\n    if vendorUI then\n        vendorUI:updateFunds(money)\n        print(\"Vendor funds updated from $\" .. oldMoney .. \" to $\" .. money)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendoredited","title":"VendorEdited","text":"<p>Description: Called after a delay when a vendor\u2019s data is edited.</p> <p>Realm: <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>) - <code>key</code> (<code>string</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorEdited\", \"NotifyVendorEdit\", function(vendor, key)\n    lia.notifications.sendAdmins(\"Vendor \" .. vendor:GetClass() .. \" has been edited. Key changed: \" .. key)\n    print(\"Vendor edited. Key:\", key)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendortradeevent","title":"VendorTradeEvent","text":"<p>Description: Called when a player attempts to trade with a vendor.</p> <p>Realm: <code>Server</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>): The vendor - <code>uniqueID</code> (<code>string</code>): The item ID - <code>isSellingToVendor</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorTradeEvent\", \"LogVendorTrades\", function(client, entity, uniqueID, isSellingToVendor)\n    local action = isSellingToVendor and \"sold\" or \"bought\"\n    print(client:Name() .. \" \" .. action .. \" item \" .. uniqueID .. \" with vendor \" .. entity:GetClass())\n    -- Log the trade or apply additional logic\n    lia.log.write(\"VendorTrade\", client:Name() .. \" \" .. action .. \" \" .. uniqueID .. \" with \" .. entity:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendorsynchronized","title":"VendorSynchronized","text":"<p>Description: Called when vendor synchronization data is received.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorSynchronized\", \"UpdateVendorUIAfterSync\", function(vendor)\n    local vendorUI = lia.ui.getVendorUI(vendor)\n    if vendorUI then\n        vendorUI:refreshItems()\n        print(\"Vendor UI refreshed after synchronization for:\", vendor:GetClass())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayeraccessvendor","title":"CanPlayerAccessVendor","text":"<p>Description: Determines whether a player can access a vendor.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>): The vendor</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanPlayerAccessVendor\", \"RestrictVendorAccess\", function(client, entity)\n    if entity.requiresLevel and client:getLevel() &lt; entity.requiredLevel then\n        client:ChatPrint(\"You need to be level \" .. entity.requiredLevel .. \" to access this vendor.\")\n        return false\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onchartradevendor","title":"OnCharTradeVendor","text":"<p>Description: Called when a character trades with a vendor.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>vendor</code> (<code>Entity</code>) - <code>item</code> (<code>Entity</code> or item table) - <code>isSellingToVendor</code> (<code>bool</code>) - <code>character</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"OnCharTradeVendor\", \"ApplyTradeBonuses\", function(client, vendor, item, isSellingToVendor, character)\n    if isSellingToVendor and item.category == \"Weapon\" then\n        character:addReputation(10)\n        print(\"Reputation increased by 10 for selling a weapon.\")\n    elseif not isSellingToVendor and item.category == \"Potion\" then\n        character:addReputation(5)\n        print(\"Reputation increased by 5 for buying a potion.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendorexited","title":"VendorExited","text":"<p>Description: Called when a player exits from interacting with a vendor.</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"VendorExited\", \"CloseVendorUI\", function()\n    local vendorUI = lia.ui.getActiveVendorUI()\n    if vendorUI then\n        vendorUI:remove()\n        print(\"Vendor UI has been closed.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#vendoropened","title":"VendorOpened","text":"<p>Description: Called when a vendor is opened (client side).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"VendorOpened\", \"InitializeVendorInterface\", function(vendor)\n    local vendorPanel = lia.ui.createVendorPanel(vendor)\n    vendorPanel:open()\n    print(\"Vendor interface opened for:\", vendor:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onopenvendormenu","title":"OnOpenVendorMenu","text":"<p>Description: Called when the vendor menu is opened.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>self</code> (<code>Entity</code>): The vendor</p> <p>Example: <pre><code>hook.Add(\"OnOpenVendorMenu\", \"CustomizeVendorMenu\", function(vendor)\n    local menu = lia.ui.getVendorMenu(vendor)\n    menu:addOption(\"Donate\", function()\n        lia.netstream.Start(\"DonateToVendor\", vendor, 100)\n    end)\n    print(\"Customized vendor menu for:\", vendor:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#factiononloadout","title":"FactionOnLoadout","text":"<p>Description: Called after <code>PlayerLoadout</code> is executed, specifically for faction loadout.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"FactionOnLoadout\", \"EquipFactionWeapons\", function(client)\n    local faction = client:getFaction()\n    if faction == FACTION_POLICE then\n        client:giveWeapon(\"weapon_pistol\")\n        client:giveWeapon(\"weapon_stunstick\")\n        print(client:Name() .. \" has been equipped with police weapons.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#classonloadout","title":"ClassOnLoadout","text":"<p>Description: Called after <code>FactionOnLoadout</code> is executed, specifically for class loadout.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"ClassOnLoadout\", \"EquipClassSpecificGear\", function(client)\n    local class = client:getClass()\n    if class == CLASS_MEDIC then\n        client:giveItem(\"medical_kit\")\n        print(client:Name() .. \" has received a Medical Kit.\")\n    elseif class == CLASS_ENGINEER then\n        client:giveItem(\"toolkit\")\n        print(client:Name() .. \" has received a Toolkit.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#factionpostloadout","title":"FactionPostLoadout","text":"<p>Description: Called after <code>ClassOnLoadout</code>, for extra faction loadout logic.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"FactionPostLoadout\", \"AssignFactionRole\", function(client)\n    local faction = client:getFaction()\n    if faction == FACTION_HEAVY then\n        client:setRole(\"Heavy Infantry\")\n        print(client:Name() .. \" assigned role: Heavy Infantry.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#classpostloadout","title":"ClassPostLoadout","text":"<p>Description: Called after <code>FactionPostLoadout</code>, for extra class loadout logic.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"ClassPostLoadout\", \"ApplyClassModifiers\", function(client)\n    local class = client:getClass()\n    if class == CLASS_SNIPER then\n        client:setAccuracy(90)\n        print(client:Name() .. \" accuracy set to 90 for Sniper class.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#postplayerloadout","title":"PostPlayerLoadout","text":"<p>Description: Called after all player loadout hooks (PlayerLoadout, FactionOnLoadout, ClassOnLoadout) have finished.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"PostPlayerLoadout\", \"FinalizePlayerStats\", function(client)\n    client:updateStats()\n    lia.notifications.send(client, \"Loadout complete. Good luck!\")\n    print(\"Player loadout finalized for:\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#chattextchanged","title":"ChatTextChanged","text":"<p>Description: Called when the text in the chat input box changes.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>text</code> (<code>string</code>)</p> <p>Example: <pre><code>hook.Add(\"ChatTextChanged\", \"MonitorChatInput\", function(text)\n    if string.len(text) &gt; 100 then\n        chat.AddText(Color(255,0,0), \"Warning: Chat message is too long!\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#finishchat","title":"FinishChat","text":"<p>Description: Called when the chat input box is closed.</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"FinishChat\", \"ClearChatInput\", function()\n    print(\"Chat input has been closed.\")\n    -- Perform actions like saving chat history or resetting variables\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#chataddtext","title":"ChatAddText","text":"<p>Description: Called to add text to the chat. Allows formatting or modifying text before display.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>text</code> (<code>string</code>) \u2014 the markup - <code>...</code> additional text arguments</p> <p>Returns: - <code>string</code> modified text markup</p> <p>Example: <pre><code>hook.Add(\"ChatAddText\", \"FormatChatMessages\", function(text, ...)\n    local formattedText = \"&lt;font=DefaultBold&gt;\" .. text .. \"&lt;/font&gt;\"\n    return formattedText, ...\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#startchat","title":"StartChat","text":"<p>Description: Called when the chat input box is opened.</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"StartChat\", \"PrepareChatInput\", function()\n    print(\"Chat input has been opened.\")\n    -- Initialize chat input state or variables\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#postplayersay","title":"PostPlayerSay","text":"<p>Description: Called after a player sends a chat message.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>message</code> (<code>string</code>) - <code>chatType</code> (<code>string</code>) - <code>anonymous</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"PostPlayerSay\", \"LogPlayerChats\", function(client, message, chatType, anonymous)\n    lia.log.write(\"PlayerChat\", client:Name() .. \" [\" .. chatType .. \"]: \" .. message)\n    print(\"Logged chat from:\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onchatreceived","title":"OnChatReceived","text":"<p>Description: Called after a player sends a chat message.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>message</code> (<code>string</code>) - <code>chatType</code> (<code>string</code>) - <code>anonymous</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"OnChatReceived\", \"HandleSpecialCommands\", function(client, message, chatType, anonymous)\n    if string.sub(message, 1, 1) == \"!\" then\n        local command = string.lower(string.sub(message, 2))\n        if command == \"help\" then\n            client:ChatPrint(\"Available commands: !help, !stats, !rules\")\n            return false -- Prevent message from being broadcasted\n        end\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#candisplaycharinfo","title":"CanDisplayCharInfo","text":"<p>Description: Determines whether certain information can be displayed in the character info panel of the F1 menu.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>suppress</code> (table)   - Example keys: <code>name</code>, <code>desc</code>, <code>faction</code>, <code>money</code>, <code>class</code></p> <p>Example Usage: <pre><code>function MODULE:CanDisplayCharInfo(suppress)\n    if LocalPlayer():hasFlag(\"hide_faction\") then\n        suppress.faction = true\n    end\n    if LocalPlayer():hasFlag(\"hide_money\") then\n        suppress.money = true\n    end\nend\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerviewinventory","title":"CanPlayerViewInventory","text":"<p>(Alias for F1 menu usage.) Determines if a player is allowed to open/view their inventory from F1 menu.</p> <p>Realm: <code>Client</code></p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanPlayerViewInventory\", \"RestrictInventoryAccess\", function()\n    if LocalPlayer():isInCombat() then\n        return false -- Prevent accessing inventory during combat\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#buildhelpmenu","title":"BuildHelpMenu","text":"<p>Description: Called when the help menu is being built.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>tabs</code> (table): Contains help menu tabs.</p> <p>Example: <pre><code>hook.Add(\"BuildHelpMenu\", \"AddCustomHelpTab\", function(tabs)\n    local customTab = {}\n    customTab.name = \"Custom Help\"\n    customTab.content = \"This is custom help content.\"\n    table.insert(tabs, customTab)\n    print(\"Custom help tab added.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#createmenubuttons","title":"CreateMenuButtons","text":"<p>Description: Creates menu buttons for the F1 menu.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>tabs</code> (table)</p> <p>Example: <pre><code>hook.Add(\"CreateMenuButtons\", \"AddSettingsButton\", function(tabs)\n    table.insert(tabs, {\n        name = \"Settings\",\n        icon = \"icon16/cog.png\",\n        callback = function()\n            lia.ui.openSettings()\n        end\n    })\n    print(\"Settings button added to F1 menu.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddrawammohud","title":"ShouldDrawAmmoHUD","text":"<p>Description: Whether or not the ammo HUD should be drawn.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>weapon</code> (Entity or table)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDrawAmmoHUD\", \"HideAmmoHUDForSnipers\", function(weapon)\n    if weapon:GetClass() == \"weapon_sniper\" then\n        return false -- Hide ammo HUD for sniper rifles\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddrawcharinfo","title":"ShouldDrawCharInfo","text":"<p>Description: Determines whether character info should be drawn for the given entity/character.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>character</code> (Character) - <code>charInfo</code> (table)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDrawCharInfo\", \"HideSensitiveInfo\", function(entity, character, charInfo)\n    if character:hasFlag(\"private\") then\n        return false -- Do not draw character info for private characters\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddrawentityinfo","title":"ShouldDrawEntityInfo","text":"<p>Description: Determines whether entity info should be drawn for the given entity.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDrawEntityInfo\", \"HideInfoForProtectedEntities\", function(entity)\n    if entity:isProtected() then\n        return false -- Do not draw info for protected entities\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#drawentityinfo","title":"DrawEntityInfo","text":"<p>Description: Draws information about the given entity.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>alpha</code> (<code>float</code>)</p> <p>Example: <pre><code>hook.Add(\"DrawEntityInfo\", \"DisplayEntityHealth\", function(entity, alpha)\n    if entity:isNPC() then\n        local health = entity:getHealth()\n        draw.SimpleText(\"Health: \" .. health, \"Default\", entity:GetPos():ToScreen().x, entity:GetPos():ToScreen().y - 20, Color(255,0,0,alpha))\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#drawcrosshair-alias-1","title":"DrawCrosshair (Alias 1)","text":"<p>Description: Draws the crosshair (if <code>ShouldDrawCrosshair</code> is <code>true</code>).</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"DrawCrosshair\", \"CustomCrosshair\", function()\n    surface.SetDrawColor(255, 255, 255, 255)\n    local x, y = ScrW() / 2, ScrH() / 2\n    surface.DrawLine(x - 10, y, x + 10, y)\n    surface.DrawLine(x, y - 10, x, y + 10)\n    print(\"Custom crosshair drawn.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddrawvignette","title":"ShouldDrawVignette","text":"<p>Description: Determines whether the vignette effect should be drawn.</p> <p>Realm: <code>Client</code></p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDrawVignette\", \"ConditionalVignette\", function()\n    if LocalPlayer():isInDarkArea() then\n        return true -- Enable vignette in dark areas\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#drawvignette","title":"DrawVignette","text":"<p>Description: Draws the vignette effect.</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"DrawVignette\", \"CustomVignetteEffect\", function()\n    surface.SetDrawColor(0, 0, 0, 150)\n    surface.DrawRect(0, 0, ScrW(), ScrH())\n    print(\"Vignette effect drawn.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddrawbranchwarning","title":"ShouldDrawBranchWarning","text":"<p>Description: Determines whether a branching path warning should be drawn.</p> <p>Realm: <code>Client</code></p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDrawBranchWarning\", \"ShowWarningForNewPlayers\", function()\n    if LocalPlayer():getLevel() &lt; 5 then\n        return true -- Show warning to new players\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#drawbranchwarning","title":"DrawBranchWarning","text":"<p>Description: Draws a branching path warning.</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"DrawBranchWarning\", \"RenderBranchWarning\", function()\n    draw.SimpleText(\"Warning: You are on a risky path. Proceed with caution!\", \"DermaLarge\", ScrW()/2, ScrH()/2, Color(255,0,0), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)\n    print(\"Branch warning rendered.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddrawblur","title":"ShouldDrawBlur","text":"<p>Description: Determines whether the blur effect should be drawn.</p> <p>Realm: <code>Client</code></p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDrawBlur\", \"EnableBlurInMenus\", function()\n    if gui.IsMenuVisible() then\n        return true -- Enable blur when menus are open\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#drawblur","title":"DrawBlur","text":"<p>Description: Draws the blur effect.</p> <p>Realm: <code>Client</code></p> <p>Example: <pre><code>hook.Add(\"DrawBlur\", \"RenderBlurEffect\", function()\n    local blur = Material(\"pp/blurscreen\")\n    surface.SetMaterial(blur)\n    surface.SetDrawColor(255, 255, 255, 255)\n    surface.DrawTexturedRect(0, 0, ScrW(), ScrH())\n    print(\"Blur effect rendered.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddrawplayerinfo","title":"ShouldDrawPlayerInfo","text":"<p>Description: Determines whether player information should be drawn.</p> <p>Realm: <code>Client</code></p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDrawPlayerInfo\", \"ShowInfoOnlyForAdmins\", function()\n    if LocalPlayer():isAdmin() then\n        return true -- Only admins see player info\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#tooltipinitialize","title":"TooltipInitialize","text":"<p>Description: Initializes the tooltip before it is displayed.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>panel</code> (tooltip panel) - <code>targetPanel</code> (the panel for which the tooltip is displayed)</p> <p>Example: <pre><code>hook.Add(\"TooltipInitialize\", \"CustomizeTooltip\", function(panel, targetPanel)\n    panel:SetSkin(\"DarkSkin\")\n    panel:SetFont(\"TooltipFont\")\n    print(\"Tooltip initialized for:\", targetPanel:GetName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#tooltippaint","title":"TooltipPaint","text":"<p>Description: Handles painting of the tooltip.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>panel</code> - <code>w</code>, <code>h</code> (width, height)</p> <p>Example: <pre><code>hook.Add(\"TooltipPaint\", \"CustomTooltipAppearance\", function(panel, w, h)\n    surface.SetDrawColor(50, 50, 50, 200)\n    surface.DrawRect(0, 0, w, h)\n    draw.SimpleText(panel:GetTooltipText(), \"TooltipFont\", 10, 10, Color(255,255,255), TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)\n    print(\"Custom tooltip painted.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#tooltiplayout","title":"TooltipLayout","text":"<p>Description: Handles layout of the tooltip.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>panel</code></p> <p>Example: <pre><code>hook.Add(\"TooltipLayout\", \"ArrangeTooltipElements\", function(panel)\n    local text = panel:GetChild(\"TooltipText\")\n    text:SetPos(10, 10)\n    text:SetSize(panel:GetWide() - 20, panel:GetTall() - 20)\n    print(\"Tooltip elements arranged.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#adjustbluramount","title":"AdjustBlurAmount","text":"<p>Description: Adjusts the amount of blur applied to the screen.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>blurGoal</code> (<code>int</code>)</p> <p>Returns: - <code>number</code>: The adjusted blur amount.</p> <p>Example: <pre><code>hook.Add(\"AdjustBlurAmount\", \"IncreaseBlurInRain\", function(blurGoal)\n    if weather.isRaining then\n        return blurGoal + 5 -- Increase blur during rain\n    end\n    return blurGoal\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#setupquickmenu","title":"SetupQuickMenu","text":"<p>Description: Sets up the quick menu by adding buttons, sliders, etc. Called during the panel\u2019s initialization.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>panel</code> (the quick menu panel)</p> <p>Example: <pre><code>hook.Add(\"SetupQuickMenu\", \"AddQuickSettingsButton\", function(panel)\n    local settingsButton = vgui.Create(\"DButton\", panel)\n    settingsButton:SetText(\"Settings\")\n    settingsButton:SetSize(100, 30)\n    settingsButton:SetPos(10, 10)\n    settingsButton.DoClick = function()\n        lia.ui.openSettings()\n    end\n    print(\"Quick menu settings button added.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#drawliliamodelview","title":"DrawLiliaModelView","text":"<p>Description: Called to draw additional content within a model view panel.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>panel</code> - <code>entity</code></p> <p>Example: <pre><code>hook.Add(\"DrawLiliaModelView\", \"EnhanceModelView\", function(panel, entity)\n    cam.Start3D2D(entity:GetPos() + Vector(0,0,50), Angle(0, LocalPlayer():EyeAngles().y - 90, 90), 0.1)\n        draw.SimpleText(\"Item: \" .. entity:getItemTable().name, \"Default\", 0, 0, Color(255,255,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)\n    cam.End3D2D()\n    print(\"Additional content drawn in model view for:\", entity:getItemTable().name)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shouldshowplayeronscoreboard","title":"ShouldShowPlayerOnScoreboard","text":"<p>Description: Determines if a player should be shown on the scoreboard.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldShowPlayerOnScoreboard\", \"HideSpectators\", function(client)\n    if client:isSpectator() then\n        return false -- Hide spectators from the scoreboard\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#showplayeroptions","title":"ShowPlayerOptions","text":"<p>Description: Provides options for the player context menu on the scoreboard.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>options</code> (table)   Each option is a table <code>{icon, callback}</code>.</p> <p>Example: <pre><code>hook.Add(\"ShowPlayerOptions\", \"AddReportOption\", function(targetPlayer, options)\n    table.insert(options, {\n        icon = \"icon16/report.png\",\n        callback = function()\n            lia.ui.openReportMenu(targetPlayer)\n        end\n    })\n    print(\"Report option added to player context menu.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shouldallowscoreboardoverride","title":"ShouldAllowScoreboardOverride","text":"<p>Description: Determines whether a scoreboard value should be overridden (e.g., name, desc).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>var</code> (<code>string</code>)</p> <p>Returns: - <code>bool</code> (true if override)</p> <p>Example: <pre><code>hook.Add(\"ShouldAllowScoreboardOverride\", \"CustomNameDisplay\", function(client, var)\n    if var == \"name\" and client:hasRole(\"Admin\") then\n        return true -- Allow overriding the name for admins\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayeraccessdoor","title":"CanPlayerAccessDoor","text":"<p>Description: Called when a player tries to use abilities on the door (locking, etc.).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>door</code> (<code>Entity</code>) - <code>access</code> (<code>int</code>)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanPlayerAccessDoor\", \"RestrictDoorAccess\", function(client, door, access)\n    if access == DOOR_LOCK and not client:hasPermission(\"lock_doors\") then\n        return false -- Only players with lock permissions can lock doors\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onplayerpurchasedoor","title":"OnPlayerPurchaseDoor","text":"<p>Description: Called when a player purchases or sells a door.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>): The door - <code>buying</code> (<code>bool</code>): True if buying, false if selling - <code>CallOnDoorChild</code> (function)</p> <p>Example: <pre><code>hook.Add(\"OnPlayerPurchaseDoor\", \"HandleDoorPurchase\", function(client, entity, buying, CallOnDoorChild)\n    if buying then\n        client:deductMoney(entity:getPrice())\n        lia.log.write(\"DoorPurchase\", client:Name() .. \" purchased door ID: \" .. entity:EntIndex())\n        print(client:Name() .. \" purchased a door.\")\n    else\n        client:addMoney(entity:getSellPrice())\n        lia.log.write(\"DoorSale\", client:Name() .. \" sold door ID: \" .. entity:EntIndex())\n        print(client:Name() .. \" sold a door.\")\n    end\n    CallOnDoorChild(entity)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playerusedoor","title":"PlayerUseDoor","text":"<p>Description: Called when a player attempts to use a door entity.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>)</p> <p>Returns: - <code>bool|nil</code>: <code>false</code> to disallow, <code>true</code> to allow, or <code>nil</code> to let other hooks decide.</p> <p>Example: <pre><code>hook.Add(\"PlayerUseDoor\", \"LogDoorUsage\", function(client, entity)\n    print(client:Name() .. \" is attempting to use door ID:\", entity:EntIndex())\n    -- Allow or disallow based on custom conditions\n    if client:isBanned() then\n        return false -- Disallow use if the player is banned\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#keylock","title":"KeyLock","text":"<p>Description: Called when a player attempts to lock a door.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>owner</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>) - <code>time</code> (<code>float</code>)</p> <p>Example: <pre><code>hook.Add(\"KeyLock\", \"LogDoorLock\", function(owner, entity, time)\n    entity:setLocked(true)\n    lia.log.write(\"DoorLock\", owner:Name() .. \" locked door ID: \" .. entity:EntIndex() .. \" for \" .. time .. \" seconds.\")\n    print(owner:Name() .. \" locked door ID:\", entity:EntIndex(), \"for\", time, \"seconds.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#keyunlock","title":"KeyUnlock","text":"<p>Description: Called when a player attempts to unlock a door.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>owner</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>) - <code>time</code> (<code>float</code>)</p> <p>Example: <pre><code>hook.Add(\"KeyUnlock\", \"LogDoorUnlock\", function(owner, entity, time)\n    entity:setLocked(false)\n    lia.log.write(\"DoorUnlock\", owner:Name() .. \" unlocked door ID: \" .. entity:EntIndex() .. \" after \" .. time .. \" seconds.\")\n    print(owner:Name() .. \" unlocked door ID:\", entity:EntIndex(), \"after\", time, \"seconds.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#togglelock","title":"ToggleLock","text":"<p>Description: Toggles the lock state of a door.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>door</code> (<code>Entity</code>) - <code>state</code> (<code>bool</code>): <code>true</code>=locked, <code>false</code>=unlocked</p> <p>Example: <pre><code>hook.Add(\"ToggleLock\", \"HandleDoorLockToggle\", function(client, door, state)\n    door:setLocked(state)\n    local action = state and \"locked\" or \"unlocked\"\n    lia.log.write(\"DoorToggle\", client:Name() .. \" \" .. action .. \" door ID: \" .. door:EntIndex())\n    print(client:Name() .. \" has \" .. action .. \" door ID:\", door:EntIndex())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#callondoorchildren","title":"callOnDoorChildren","text":"<p>Description: Calls a function on all child entities of a door.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>callback</code> (function)</p> <p>Example: <pre><code>hook.Add(\"callOnDoorChildren\", \"UpdateChildEntities\", function(entity, callback)\n    for _, child in ipairs(entity:GetChildren()) do\n        callback(child)\n        print(\"Callback executed on child entity ID:\", child:EntIndex())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#copyparentdoor","title":"copyParentDoor","text":"<p>Description: Copies the parent door's properties to a child door.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>child</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"copyParentDoor\", \"SyncChildDoorProperties\", function(child)\n    local parent = child:getParentDoor()\n    if parent then\n        child:setLocked(parent:isLocked())\n        child:setOwner(parent:getOwner())\n        print(\"Copied properties from parent door ID:\", parent:EntIndex(), \"to child door ID:\", child:EntIndex())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddeletesaveditems","title":"ShouldDeleteSavedItems","text":"<p>Description: Determines if saved items should be deleted on server restart.</p> <p>Realm: <code>Server</code></p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"ShouldDeleteSavedItems\", \"ConditionalItemDeletion\", function()\n    if lia.config.resetItemsOnRestart then\n        return true -- Delete saved items on restart\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onsaveditemloaded","title":"OnSavedItemLoaded","text":"<p>Description: Called after saved items are loaded from the database.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>loadedItems</code> (table): Contains loaded item entities.</p> <p>Example: <pre><code>hook.Add(\"OnSavedItemLoaded\", \"InitializeLoadedItems\", function(loadedItems)\n    for _, item in ipairs(loadedItems) do\n        item:initialize()\n        print(\"Loaded and initialized item:\", item:getName())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#shoulddisablethirdperson","title":"ShouldDisableThirdperson","text":"<p>Description: Checks if third-person view is allowed or disabled.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>bool</code> (true if 3rd-person should be disabled)</p> <p>Example: <pre><code>hook.Add(\"ShouldDisableThirdperson\", \"DisableForInvisibles\", function(client)\n    if client:isInvisible() then\n        return true -- Disable third-person view when invisible\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncharattribboosted","title":"OnCharAttribBoosted","text":"<p>Description: Called when a character\u2019s attribute is updated.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character) - <code>key</code> (<code>string</code>) - <code>value</code> (<code>int</code>)</p> <p>Example: <pre><code>hook.Add(\"OnCharAttribBoosted\", \"NotifyAttributeBoost\", function(client, character, key, value)\n    chat.AddText(Color(0,255,0), \"Your \" .. key .. \" attribute has been increased by \" .. value .. \"!\")\n    lia.log.write(\"AttributeBoost\", character:getName() .. \"'s \" .. key .. \" increased by \" .. value)\n    print(\"Attribute \" .. key .. \" boosted by \" .. value .. \" for character:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playerstaminagained","title":"PlayerStaminaGained","text":"<p>Description: Called when a player gains stamina.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"PlayerStaminaGained\", \"NotifyStaminaGain\", function(client)\n    client:ChatPrint(\"You have regained stamina!\")\n    print(client:Name() .. \" has gained stamina.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playerstaminalost","title":"PlayerStaminaLost","text":"<p>Description: Called when a player loses stamina.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"PlayerStaminaLost\", \"WarnStaminaLow\", function(client)\n    if client:getStamina() &lt; 20 then\n        client:ChatPrint(\"Warning: Your stamina is low!\")\n        print(client:Name() .. \" has low stamina.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerthrowpunch","title":"CanPlayerThrowPunch","text":"<p>Description: Determines if a player can throw a punch.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanPlayerThrowPunch\", \"RestrictPunchDuringStealth\", function(client)\n    if client:isStealthed() then\n        return false -- Prevent punching while in stealth mode\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#adjuststaminaoffsetrunning","title":"AdjustStaminaOffsetRunning","text":"<p>Description: Adjusts stamina offset when a player is running.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>offset</code> (<code>float</code>)</p> <p>Returns: - <code>number</code>: The modified offset</p> <p>Example: <pre><code>hook.Add(\"AdjustStaminaOffsetRunning\", \"IncreaseStaminaDrainForHeavyGear\", function(client, offset)\n    if client:hasHeavyGear() then\n        return offset + 5 -- Increase stamina drain by 5 when running with heavy gear\n    end\n    return offset\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#adjuststaminaregeneration","title":"AdjustStaminaRegeneration","text":"<p>Description: Adjusts the rate at which a player regenerates stamina.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>offset</code> (<code>float</code>)</p> <p>Returns: - <code>number</code></p> <p>Example: <pre><code>hook.Add(\"AdjustStaminaRegeneration\", \"BoostRegenerationForMedics\", function(client, offset)\n    if client:getClass() == CLASS_MEDIC then\n        return offset + 2 -- Medics regenerate stamina faster\n    end\n    return offset\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#adjuststaminaoffset","title":"AdjustStaminaOffset","text":"<p>Description: Adjusts the stamina offset otherwise (generic hook).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>offset</code> (<code>float</code>)</p> <p>Returns: - <code>number</code></p> <p>Example: <pre><code>hook.Add(\"AdjustStaminaOffset\", \"ModifyStaminaForNightMode\", function(client, offset)\n    if lia.time.isNight() then\n        return offset - 3 -- Decrease stamina during night\n    end\n    return offset\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#calcstaminachange","title":"CalcStaminaChange","text":"<p>Description: Calculates the change in a player\u2019s stamina (positive or negative).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>number</code> (the stamina change)</p> <p>Example: <pre><code>hook.Add(\"CalcStaminaChange\", \"StaminaChangeBasedOnSpeed\", function(client)\n    local speed = client:getVelocity():Length()\n    if speed &gt; 200 then\n        return -10 -- Decrease stamina quickly when moving fast\n    elseif speed &gt; 100 then\n        return -5 -- Moderate stamina decrease\n    else\n        return 2 -- Regenerate stamina slowly\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerviewattributes","title":"CanPlayerViewAttributes","text":"<p>Description: Checks if a player is allowed to view their attributes.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanPlayerViewAttributes\", \"RestrictAttributeViewForLockedCharacters\", function(client)\n    if client:getChar():isLocked() then\n        return false -- Prevent viewing attributes if character is locked\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getstartattribpoints","title":"GetStartAttribPoints","text":"<p>Description: Retrieves the initial number of attribute points a player starts with.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>context</code> (table)</p> <p>Returns: - <code>number</code>: The starting attribute points</p> <p>Example: <pre><code>hook.Add(\"GetStartAttribPoints\", \"BonusPointsForVeterans\", function(client, context)\n    if client:isVeteran() then\n        return 10 -- Give veterans 10 extra attribute points\n    end\n    return 5 -- Default starting points\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playercanpickupitem-attributes","title":"PlayerCanPickupItem (Attributes)","text":"<p>Description: Determines if a player can pick up an item with their hands.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>item</code> (Item)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"PlayerCanPickupItem\", \"PreventPickupOfCursedItems\", function(client, item)\n    if item:isCursed() and not client:isBlessed() then\n        return false -- Prevent pickup of cursed items unless player is blessed\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charmaxstamina","title":"CharMaxStamina","text":"<p>Description: Determines the maximum stamina for a character.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>character</code> (Character)</p> <p>Returns: - <code>number</code>: The maximum stamina</p> <p>Example: <pre><code>hook.Add(\"CharMaxStamina\", \"SetMaxStaminaBasedOnClass\", function(character)\n    local class = character:getClass()\n    if class == CLASS_WARRIOR then\n        return 150\n    elseif class == CLASS_ROGUE then\n        return 100\n    else\n        return 120\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#postdrawinventory-inventory","title":"PostDrawInventory (Inventory)","text":"<p>Description: Called after the player's inventory is drawn.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>panel</code> (inventory panel)</p> <p>Example: <pre><code>hook.Add(\"PostDrawInventory\", \"AddInventoryFooter\", function(panel)\n    draw.SimpleText(\"End of Inventory\", \"Default\", panel:GetWide() / 2, panel:GetTall() - 20, Color(255,255,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)\n    print(\"Inventory footer added.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#interceptclickitemicon","title":"InterceptClickItemIcon","text":"<p>Description: Called when a player clicks on an item icon.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>self</code> (panel) - <code>itemIcon</code> (panel) - <code>keyCode</code> (int)</p> <p>Example: <pre><code>hook.Add(\"InterceptClickItemIcon\", \"HandleItemDoubleClick\", function(self, itemIcon, keyCode)\n    if keyCode == KEY_MOUSE2 then -- Right-click\n        local item = itemIcon:getItem()\n        lia.ui.openItemContextMenu(item, itemIcon:GetPos())\n        print(\"Item context menu opened for:\", item.name)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onrequestitemtransfer","title":"OnRequestItemTransfer","text":"<p>Description: Called when an item transfer is requested (client side).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>self</code> (panel) - <code>itemID</code> (int) - <code>inventoryID</code> (int) - <code>x</code> (int) - <code>y</code> (int)</p> <p>Example: <pre><code>hook.Add(\"OnRequestItemTransfer\", \"SendTransferRequest\", function(self, itemID, inventoryID, x, y)\n    lia.netstream.Start(\"TransferItem\", {itemID = itemID, inventoryID = inventoryID, x = x, y = y})\n    print(\"Transfer request sent for item ID:\", itemID)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#itempaintover","title":"ItemPaintOver","text":"<p>Description: Called when an item is being painted over in the inventory.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>self</code> (panel) - <code>itemTable</code> (table) - <code>w</code> (int) - <code>h</code> (int)</p> <p>Example: <pre><code>hook.Add(\"ItemPaintOver\", \"DisplayItemRarity\", function(self, itemTable, w, h)\n    if itemTable.rarity == \"rare\" then\n        surface.SetDrawColor(255, 215, 0, 150) -- Gold color\n        surface.DrawOutlinedRect(0, 0, w, h)\n        draw.SimpleText(\"Rare\", \"DefaultSmall\", w - 30, h - 15, Color(255, 215, 0), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncreateiteminteractionmenu","title":"OnCreateItemInteractionMenu","text":"<p>Description: Called when an item interaction menu is created (e.g., right-click menu).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>self</code> (panel) - <code>menu</code> (panel) - <code>itemTable</code> (table)</p> <p>Example: <pre><code>hook.Add(\"OnCreateItemInteractionMenu\", \"AddCustomActions\", function(self, menu, itemTable)\n    if itemTable.uniqueID == \"magic_scroll\" then\n        menu:AddOption(\"Cast Spell\", function()\n            lia.netstream.Start(\"CastSpell\", itemTable.id)\n        end)\n    end\n    print(\"Custom actions added to interaction menu for:\", itemTable.name)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canrunitemaction","title":"CanRunItemAction","text":"<p>Description: Determines if a specific action can be run on an item.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>itemTable</code> (table) - <code>action</code> (string)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanRunItemAction\", \"RestrictActionForCursedItems\", function(itemTable, action)\n    if itemTable.isCursed and action == \"use\" then\n        return false -- Prevent using cursed items\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canitembetransfered","title":"CanItemBeTransfered","text":"<p>Description: Determines whether an item can be transferred between inventories.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>item</code> (Item) - <code>currentInv</code> (Inventory) - <code>oldInv</code> (Inventory)</p> <p>Returns: - <code>bool|string</code>: <code>true</code> to allow, or <code>false</code>/string for disallowed &amp; reason.</p> <p>Example: <pre><code>hook.Add(\"CanItemBeTransfered\", \"PreventTransferOfBoundItems\", function(item, currentInv, oldInv)\n    if item:isBound() and not currentInv:isBoundToOwner(item.owner) then\n        return false, \"This item is bound to another player and cannot be transferred.\"\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#itemdraggedoutofinventory","title":"ItemDraggedOutOfInventory","text":"<p>Description: Called when an item is dragged out of an inventory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>item</code> (Item)</p> <p>Example: <pre><code>hook.Add(\"ItemDraggedOutOfInventory\", \"LogItemDrag\", function(client, item)\n    lia.log.write(\"ItemDrag\", client:Name() .. \" dragged item ID \" .. item.id .. \" out of inventory.\")\n    print(client:Name() .. \" has dragged out item:\", item.name)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#itemtransfered","title":"ItemTransfered","text":"<p>Description: Called when an item is transferred between inventories.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>context</code> (table)</p> <p>Example: <pre><code>hook.Add(\"ItemTransfered\", \"TrackItemTransfers\", function(context)\n    local client = context.client\n    local item = context.item\n    local fromInv = context.fromInv\n    local toInv = context.toInv\n    lia.log.write(\"ItemTransfer\", client:Name() .. \" transferred item \" .. item.name .. \" from \" .. fromInv:getName() .. \" to \" .. toInv:getName())\n    print(client:Name() .. \" transferred item:\", item.name, \"from\", fromInv:getName(), \"to\", toInv:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#onplayerloststackitem","title":"OnPlayerLostStackItem","text":"<p>Description: Called when a player drops a stackable item.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>itemTypeOrItem</code></p> <p>Example: <pre><code>hook.Add(\"OnPlayerLostStackItem\", \"HandleStackItemDrop\", function(itemTypeOrItem)\n    local itemName = type(itemTypeOrItem) == \"table\" and itemTypeOrItem.name or \"Unknown Item\"\n    lia.log.write(\"StackItemDrop\", \"A stackable item was dropped: \" .. itemName)\n    print(\"Player dropped a stackable item:\", itemName)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerspawnstorage","title":"CanPlayerSpawnStorage","text":"<p>Description: Whether a player is allowed to spawn a container entity.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>entity</code> (<code>Entity</code>) - <code>data</code> (table)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanPlayerSpawnStorage\", \"RestrictStorageSpawn\", function(client, entity, data)\n    if client:getLevel() &lt; 10 then\n        client:ChatPrint(\"You need to be at least level 10 to spawn storage containers.\")\n        return false\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#issuitablefortrunk","title":"isSuitableForTrunk","text":"<p>Description: Determines whether an entity is suitable for use as storage (e.g., a trunk).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"isSuitableForTrunk\", \"AllowOnlyCars\", function(entity)\n    return entity:IsVehicle() -- Only vehicles are suitable for trunks\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncreatestoragepanel","title":"OnCreateStoragePanel","text":"<p>Description: Called when a storage panel is created (client side).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>localInvPanel</code> (panel) - <code>storageInvPanel</code> (panel) - <code>storage</code> (entity)</p> <p>Example: <pre><code>hook.Add(\"OnCreateStoragePanel\", \"CustomizeStorageUI\", function(localInvPanel, storageInvPanel, storage)\n    storageInvPanel:SetBackgroundColor(Color(50, 50, 50, 200))\n    storageInvPanel.Paint = function(self, w, h)\n        draw.RoundedBox(8, 0, 0, w, h, Color(30, 30, 30, 150))\n        draw.SimpleText(\"Storage Contents\", \"DermaLarge\", w / 2, 10, Color(255,255,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)\n    end\n    print(\"Storage panel customized for entity:\", storage:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#cansavedata","title":"CanSaveData","text":"<p>Description: Determines whether data associated with a storage entity should be saved.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>inventory</code> (Inventory)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanSaveData\", \"ExcludeTemporaryStorages\", function(entity, inventory)\n    if entity:isTemporary() then\n        return false -- Do not save data for temporary storage entities\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#storagerestored","title":"StorageRestored","text":"<p>Description: Called when a storage entity is restored.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>storage</code> (<code>Entity</code>) - <code>inventory</code> (Inventory)</p> <p>Example: <pre><code>hook.Add(\"StorageRestored\", \"ReinitializeStorage\", function(storage, inventory)\n    storage:setOwner(inventory:getOwner())\n    print(\"Storage entity restored and owner set for:\", storage:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#storageopen","title":"StorageOpen","text":"<p>Description: Called when a storage is opened (car trunk or other).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>isCar</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"StorageOpen\", \"LogStorageAccess\", function(entity, isCar)\n    if isCar then\n        print(\"Car trunk opened:\", entity:GetModel())\n    else\n        print(\"Storage container opened:\", entity:GetClass())\n    end\n    -- Apply access rules or permissions\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#storageunlockprompt","title":"StorageUnlockPrompt","text":"<p>Description: Called when a prompt to unlock storage is displayed (client side).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>)</p> <p>Example: <pre><code>hook.Add(\"StorageUnlockPrompt\", \"CustomizeUnlockPrompt\", function(entity)\n    local prompt = vgui.Create(\"DFrame\")\n    prompt:SetTitle(\"Unlock Storage\")\n    prompt:SetSize(300, 150)\n    prompt:Center()\n    prompt:MakePopup()\n\n    local passwordBox = vgui.Create(\"DTextEntry\", prompt)\n    passwordBox:SetPos(50, 50)\n    passwordBox:SetSize(200, 30)\n    passwordBox:SetText(\"Enter Password\")\n\n    local unlockButton = vgui.Create(\"DButton\", prompt)\n    unlockButton:SetText(\"Unlock\")\n    unlockButton:SetPos(100, 100)\n    unlockButton:SetSize(100, 30)\n    unlockButton.DoClick = function()\n        local password = passwordBox:GetValue()\n        lia.netstream.Start(\"AttemptStorageUnlock\", entity, password)\n        prompt:Close()\n    end\n\n    print(\"Storage unlock prompt displayed for entity:\", entity:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#storagecantransferitem","title":"StorageCanTransferItem","text":"<p>Description: Determines whether a player can transfer an item into storage.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>storage</code> (<code>Entity</code>) - <code>item</code> (Item)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"StorageCanTransferItem\", \"RestrictItemTypesInStorage\", function(client, storage, item)\n    if item.category == \"Weapon\" and not client:hasPermission(\"store_weapons\") then\n        return false -- Prevent storing weapons unless player has permission\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#storageentityremoved","title":"StorageEntityRemoved","text":"<p>Description: Called when a storage entity is removed.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>inventory</code> (Inventory)</p> <p>Example: <pre><code>hook.Add(\"StorageEntityRemoved\", \"HandleStorageRemoval\", function(entity, inventory)\n    lia.data.remove(\"storage_\" .. entity:EntIndex())\n    print(\"Storage entity removed and data cleaned for:\", entity:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#storageinventoryset","title":"StorageInventorySet","text":"<p>Description: Called when the inventory of a storage entity is set.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>inventory</code> (Inventory) - <code>isInitial</code> (<code>bool</code>)</p> <p>Example: <pre><code>hook.Add(\"StorageInventorySet\", \"InitializeStorageInventory\", function(entity, inventory, isInitial)\n    if isInitial then\n        inventory:setOwner(entity:getOwner())\n        lia.log.write(\"StorageInventorySet\", \"Initial inventory set for storage ID: \" .. entity:EntIndex())\n        print(\"Initial inventory set for storage:\", entity:GetClass())\n    else\n        lia.log.write(\"StorageInventorySet\", \"Inventory updated for storage ID: \" .. entity:EntIndex())\n        print(\"Inventory updated for storage:\", entity:GetClass())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#ischarrecognized","title":"isCharRecognized","text":"<p>Description: Checks if a character is recognized.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>character</code> (Character) - <code>id</code> (int)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"isCharRecognized\", \"ValidateCharacterRecognition\", function(character, id)\n    if character:getID() == id and character:isActive() then\n        return true\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#ischarfakerecognized","title":"isCharFakeRecognized","text":"<p>Description: Checks if a character is fake recognized.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>character</code> (Character) - <code>id</code> (int)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"isCharFakeRecognized\", \"DetectFakeCharacters\", function(character, id)\n    if character:isSuspicious() then\n        return true -- Character is fake\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#isfakenameexistant","title":"isFakeNameExistant","text":"<p>Description: Checks if a fake name exists in a given name list.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>name</code> (string) - <code>nameList</code> (table)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"isFakeNameExistant\", \"PreventDuplicateFakeNames\", function(name, nameList)\n    for _, existingName in ipairs(nameList) do\n        if string.lower(existingName) == string.lower(name) then\n            return true\n        end\n    end\n    return false\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncharrecognized","title":"OnCharRecognized","text":"<p>Description: Called when a character is recognized.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>id</code> (int)</p> <p>Example: <pre><code>hook.Add(\"OnCharRecognized\", \"WelcomeRecognizedCharacter\", function(client, id)\n    local character = lia.character.getByID(id)\n    if character then\n        client:ChatPrint(\"Welcome back, \" .. character:getName() .. \"!\")\n        lia.notifications.send(client, \"Character recognized: \" .. character:getName(), Color(0,255,0))\n        print(\"Character recognized for client:\", client:Name())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charrecognize","title":"CharRecognize","text":"<p>Description: Initiates a character recognition process (client side).</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>level</code> (int) - <code>name</code> (string)</p> <p>Example: <pre><code>hook.Add(\"CharRecognize\", \"StartRecognitionProcess\", function(level, name)\n    local recognitionPanel = lia.ui.createRecognitionPanel(level, name)\n    recognitionPanel:open()\n    print(\"Recognition process started for:\", name, \"at level:\", level)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getdisplayeddescription","title":"GetDisplayedDescription","text":"<p>Description: Retrieves the displayed description of an entity (HUD or otherwise).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>) - <code>isHUD</code> (<code>bool</code>)</p> <p>Returns: - <code>string</code></p> <p>Example: <pre><code>hook.Add(\"GetDisplayedDescription\", \"CustomEntityDescription\", function(entity, isHUD)\n    if entity:GetClass() == \"npc_boss\" then\n        return \"The formidable boss of the region. Handle with care.\"\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getdisplayedname-recognition","title":"GetDisplayedName (Recognition)","text":"<p>(Separate from the chat-based version.) Description: Retrieves a displayed name for a client/character in a recognition context.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>chatType</code> (<code>string</code>) or other context param</p> <p>Returns: - <code>string</code></p> <p>Example: <pre><code>hook.Add(\"GetDisplayedName\", \"RecognitionNameTag\", function(client, chatType)\n    if chatType == \"recognition\" and client:isRecognized() then\n        return \"[Recognized] \" .. client:Name()\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#isrecognizedchattype","title":"isRecognizedChatType","text":"<p>Description: Determines if a chat type is recognized by the recognition system.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>chatType</code> (string)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"isRecognizedChatType\", \"ValidateRecognitionChat\", function(chatType)\n    local recognizedTypes = {\"admin\", \"system\", \"recognition\"}\n    return table.HasValue(recognizedTypes, chatType)\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getsalarylimit","title":"GetSalaryLimit","text":"<p>Description: Retrieves the salary limit for a player.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>faction</code> (table) - <code>class</code> (table)</p> <p>Returns: - <code>any</code>: The salary limit</p> <p>Example: <pre><code>hook.Add(\"GetSalaryLimit\", \"SetSalaryLimitsBasedOnRole\", function(client, faction, class)\n    if faction.name == \"Police\" then\n        return 5000 -- Police have a higher salary limit\n    elseif faction.name == \"Citizen\" then\n        return 2000\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getsalaryamount","title":"GetSalaryAmount","text":"<p>Description: Retrieves the amount of salary a player should receive.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>faction</code> (table) - <code>class</code> (table)</p> <p>Returns: - <code>any</code>: The salary amount</p> <p>Example: <pre><code>hook.Add(\"GetSalaryAmount\", \"CalculateDynamicSalary\", function(client, faction, class)\n    local baseSalary = faction.baseSalary or 1000\n    local classBonus = class.salaryBonus or 0\n    return baseSalary + classBonus\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerearnsalary","title":"CanPlayerEarnSalary","text":"<p>Description: Determines if a player is allowed to earn salary.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>faction</code> (table) - <code>class</code> (table)</p> <p>Returns: - <code>bool</code></p> <p>Example: <pre><code>hook.Add(\"CanPlayerEarnSalary\", \"RestrictSalaryToActivePlayers\", function(client, faction, class)\n    if not client:isActive() then\n        return false -- Inactive players do not earn salary\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#createsalarytimer","title":"CreateSalaryTimer","text":"<p>Description: Creates a timer to manage player salary.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Example: <pre><code>hook.Add(\"CreateSalaryTimer\", \"SetupSalaryTimer\", function(client)\n    timer.Create(\"SalaryTimer_\" .. client:SteamID(), 60, 0, function()\n        if IsValid(client) and MODULE:CanPlayerEarnSalary(client, client:getFaction(), client:getClass()) then\n            local salary = MODULE:GetSalaryAmount(client, client:getFaction(), client:getClass())\n            client:addMoney(salary)\n            client:ChatPrint(\"You have received your salary of $\" .. salary)\n            print(\"Salary of $\" .. salary .. \" awarded to:\", client:Name())\n        end\n    end)\n    print(\"Salary timer created for:\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerusechar","title":"CanPlayerUseChar","text":"<p>Description: Checks if a player is allowed to use a specific character.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character)</p> <p>Returns: - <code>bool</code> - <code>string|nil</code> (Reason if disallowed)</p> <p>Example: <pre><code>hook.Add(\"CanPlayerUseChar\", \"RestrictCharacterUsage\", function(client, character)\n    if character:isBanned() then\n        return false, \"This character is banned from use.\"\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayercreatechar","title":"CanPlayerCreateChar","text":"<p>Description: Whether a player can create a new character.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>bool</code> (<code>false</code> to disallow) - <code>string</code> (Lang phrase or reason) - <code>...</code> (Args for the phrase)</p> <p>Example: <pre><code>hook.Add(\"CanPlayerCreateChar\", \"LimitCharacterCreation\", function(client)\n    if client:getCharacterCount() &gt;= MODULE:GetMaxPlayerChar(client) then\n        return false, \"You have reached the maximum number of characters.\"\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#postchardelete","title":"PostCharDelete","text":"<p>Description: Called after a character is deleted.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"PostCharDelete\", \"NotifyCharacterDeletion\", function(client, character)\n    lia.notifications.broadcast(client:Name() .. \" has deleted their character: \" .. character:getName())\n    print(\"Character deleted:\", character:getName(), \"by\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getmaxplayerchar","title":"GetMaxPlayerChar","text":"<p>Description: Retrieves the max number of characters a player can have.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>)</p> <p>Returns: - <code>int</code></p> <p>Example: <pre><code>hook.Add(\"GetMaxPlayerChar\", \"SetMaxCharacters\", function(client)\n    if client:isPremium() then\n        return 5 -- Premium players can have up to 5 characters\n    else\n        return 3 -- Regular players can have up to 3 characters\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#chardeleted","title":"CharDeleted","text":"<p>(Synonym to OnCharDelete or PostCharDelete in some code.) Description: Called after a character is deleted.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"CharDeleted\", \"LogCharacterDeletion\", function(client, character)\n    lia.log.write(\"CharDeleted\", \"Character \" .. character:getName() .. \" deleted by \" .. client:Name())\n    print(\"Character deleted:\", character:getName(), \"by\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#preplayerloadedchar","title":"PrePlayerLoadedChar","text":"<p>Description: Called before a player's character is loaded.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character) - <code>currentChar</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"PrePlayerLoadedChar\", \"PrepareForCharacterLoad\", function(client, character, currentChar)\n    if currentChar then\n        client:saveCurrentCharacter()\n        print(\"Saved current character before loading new one for:\", client:Name())\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playerloadedchar","title":"PlayerLoadedChar","text":"<p>Description: Called when a player's character is loaded.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character) - <code>currentChar</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"PlayerLoadedChar\", \"InitializeNewCharacter\", function(client, character, currentChar)\n    client:setHealth(character:getHealth())\n    client:setArmor(character:getArmor())\n    print(\"Loaded character:\", character:getName(), \"for player:\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#postplayerloadedchar","title":"PostPlayerLoadedChar","text":"<p>Description: Called after a player's character is loaded.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>) - <code>character</code> (Character) - <code>currentChar</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"PostPlayerLoadedChar\", \"WelcomeCharacter\", function(client, character, currentChar)\n    client:ChatPrint(\"Welcome back, \" .. character:getName() .. \"!\")\n    lia.notifications.send(client, \"Character \" .. character:getName() .. \" loaded successfully.\", Color(0, 255, 0))\n    print(\"Post-load welcome sent to:\", client:Name())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charloaded","title":"CharLoaded","text":"<p>Description: Called after a character has been successfully loaded (sometimes shared realm usage).</p> <p>Realm: <code>Shared</code> or <code>Server</code></p> <p>Parameters: - <code>character</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"CharLoaded\", \"InitializeCharacterSkills\", function(character)\n    character:initSkills()\n    print(\"Skills initialized for character:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charpostsave","title":"CharPostSave","text":"<p>Description: Called after a character is saved.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>character</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"CharPostSave\", \"NotifyCharacterSaved\", function(character)\n    lia.notifications.sendAdmins(\"Character \" .. character:getName() .. \" has been saved.\")\n    print(\"Character saved:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charpresave","title":"CharPreSave","text":"<p>Description: Called before a character is saved.</p> <p>Realm: <code>Shared</code> (or <code>Server</code>, depending on the usage)</p> <p>Parameters: - <code>character</code> (Character)</p> <p>Example: <pre><code>hook.Add(\"CharPreSave\", \"ValidateCharacterBeforeSave\", function(character)\n    if not character:isValid() then\n        return false, \"Character is invalid and cannot be saved.\"\n    end\n    -- Perform additional validations or modifications\n    character:calculateDerivedStats()\n    print(\"Character validated and modified before save:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#f1onaddsection","title":"F1OnAddSection","text":"<p>Description: Called when adding a new section to the F1 menu. Allows customization of sections within the help or character menu.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>sectionName</code> (<code>string</code>): The name identifier of the section. - <code>color</code> (<code>Color</code>): The color associated with the section. - <code>priority</code> (<code>number</code>): The priority/order of the section in the menu.</p> <p>Example: <pre><code>hook.Add(\"F1OnAddSection\", \"AddSettingsSection\", function(sectionName, color, priority)\n    if sectionName == \"settings\" then\n        color = Color(0, 128, 255)\n        priority = 5\n        print(\"Settings section customized.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#f1onaddtextfield","title":"F1OnAddTextField","text":"<p>Description: Called when adding a text field to a section in the F1 menu. Allows adding customizable input fields to the menu.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>sectionName</code> (<code>string</code>): The name identifier of the section to add the text field to. - <code>fieldName</code> (<code>string</code>): The unique identifier for the text field. - <code>labelText</code> (<code>string</code>): The label displayed for the text field. - <code>valueFunc</code> (<code>function</code>): A function that returns the current value of the text field.</p> <p>Returns: - <code>nil</code> or custom behavior.</p> <p>Example: <pre><code>hook.Add(\"F1OnAddTextField\", \"AddNicknameField\", function(sectionName, fieldName, labelText, valueFunc)\n    if sectionName == \"character\" then\n        fieldName = \"nickname\"\n        labelText = \"Nickname\"\n        valueFunc = function()\n            return LocalPlayer():getChar():getNickname()\n        end\n        print(\"Nickname text field added to character section.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#f1onaddbarfield","title":"F1OnAddBarField","text":"<p>Description: Called when adding a bar field (e.g., progress bar) to a section in the F1 menu. Allows adding customizable visual bars to represent data like health, stamina, etc.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>sectionName</code> (<code>string</code>): The name identifier of the section to add the bar field to. - <code>fieldName</code> (<code>string</code>): The unique identifier for the bar field. - <code>labelText</code> (<code>string</code>): The label displayed for the bar field. - <code>minFunc</code> (<code>function</code>): A function that returns the minimum value of the bar. - <code>maxFunc</code> (<code>function</code>): A function that returns the maximum value of the bar. - <code>valueFunc</code> (<code>function</code>): A function that returns the current value of the bar.</p> <p>Returns: - <code>nil</code> or custom behavior.</p> <p>Example: <pre><code>hook.Add(\"F1OnAddBarField\", \"AddHealthBar\", function(sectionName, fieldName, labelText, minFunc, maxFunc, valueFunc)\n    if sectionName == \"stats\" then\n        fieldName = \"health\"\n        labelText = \"Health\"\n        minFunc = function()\n            return 0\n        end\n        maxFunc = function()\n            return 100\n        end\n        valueFunc = function()\n            return LocalPlayer():getChar():getHealth()\n        end\n        print(\"Health bar added to stats section.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerviewcommands","title":"CanPlayerViewCommands","text":"<p>Description: Determines if a player is allowed to view the list of available commands. Return <code>false</code> to hide the commands.</p> <p>Realm: <code>Client</code></p> <p>Returns: - <code>bool</code>: <code>false</code> to block, <code>nil</code> or <code>true</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"CanPlayerViewCommands\", \"HideCommandsForRegularPlayers\", function()\n    if not LocalPlayer():isAdmin() then\n        return false -- Hide commands for non-admin players\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#charlistloaded","title":"CharListLoaded","text":"<p>Description: Called when the character list has been fully loaded for a player. Useful for performing actions after all characters are available.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>newCharList</code> (<code>table</code>): The updated list of characters for the player.</p> <p>Example: <pre><code>hook.Add(\"CharListLoaded\", \"InitializeCharacterUI\", function(newCharList)\n    lia.ui.initializeCharacterSelection(newCharList)\n    print(\"Character list loaded and UI initialized.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerswitchchar","title":"CanPlayerSwitchChar","text":"<p>Description: Determines if a player can switch from their current character to another character. Return <code>false</code> to prevent the switch.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player attempting to switch characters. - <code>currentChar</code> (<code>Character</code>): The player's current character. - <code>character</code> (<code>Character</code>): The character the player is attempting to switch to.</p> <p>Returns: - <code>bool|nil</code>: <code>false</code> to block, <code>nil</code> or <code>true</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"CanPlayerSwitchChar\", \"PreventSwitchDuringCombat\", function(client, currentChar, character)\n    if client:isInCombat() then\n        client:ChatPrint(\"You cannot switch characters while in combat.\")\n        return false\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#oncharcreated","title":"OnCharCreated","text":"<p>Description: Called after a new character has been successfully created. Allows for additional setup or initialization of the new character.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player who created the character. - <code>character</code> (<code>Character</code>): The newly created character. - <code>originalData</code> (<code>table</code>): The data provided during character creation.</p> <p>Example: <pre><code>hook.Add(\"OnCharCreated\", \"SetupInitialInventory\", function(client, character, originalData)\n    local inventory = character:getInventory()\n    inventory:addItem(\"starter_pack\")\n    inventory:addItem(\"basic_weapon\")\n    print(\"Initial inventory setup for new character:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#adjustcreationdata","title":"AdjustCreationData","text":"<p>Description: Allows modifying or adding extra data steps in the character creation process on the server side. Can be used to inject custom data into character creation.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player creating the character. - <code>data</code> (<code>table</code>): The original data being used for character creation. - <code>newData</code> (<code>table</code>): The new data that can be modified. - <code>originalData</code> (<code>table</code>): The unmodified original data.</p> <p>Example: <pre><code>hook.Add(\"AdjustCreationData\", \"IncludeSkillPoints\", function(client, data, newData, originalData)\n    newData.skillPoints = 10\n    print(\"Skill points added to character creation data.\")\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#drawcharinfo","title":"DrawCharInfo","text":"<p>Description: Called to draw information about a character, such as stats or status effects, within the UI.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>entity</code> (<code>Entity</code>): The entity associated with the character. - <code>character</code> (<code>Character</code>): The character whose info is being drawn. - <code>charInfo</code> (<code>table</code>): A table containing character information to be displayed.</p> <p>Example: <pre><code>hook.Add(\"DrawCharInfo\", \"DisplayCharacterStats\", function(entity, character, charInfo)\n    draw.SimpleText(\"Strength: \" .. character:getAttribute(\"strength\"), \"Default\", 10, 10, Color(255,255,255))\n    draw.SimpleText(\"Agility: \" .. character:getAttribute(\"agility\"), \"Default\", 10, 30, Color(255,255,255))\n    print(\"Character stats drawn for:\", character:getName())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getinjuredtext","title":"GetInjuredText","text":"<p>Description: Called to retrieve the text displayed when a player is injured. Allows customization of injury messages.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player who is injured. - <code>isSevere</code> (<code>bool</code>): Whether the injury is severe.</p> <p>Returns: - <code>string</code>: The injury message to display.</p> <p>Example: <pre><code>hook.Add(\"GetInjuredText\", \"CustomInjuryMessage\", function(client, isSevere)\n    if isSevere then\n        return \"You are critically injured! Seek medical attention immediately.\"\n    else\n        return \"You are hurt but can continue.\"\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getweaponname","title":"GetWeaponName","text":"<p>Description: Called to retrieve the display name for a weapon. Allows customization of weapon names in the UI.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>weapon</code> (<code>Entity</code> or <code>table</code>): The weapon entity or table for which the name is being retrieved.</p> <p>Returns: - <code>string|nil</code>: A custom weapon name, or <code>nil</code> to use the default.</p> <p>Example: <pre><code>hook.Add(\"GetWeaponName\", \"RenameAK47\", function(weapon)\n    if weapon:GetClass() == \"weapon_ak47\" then\n        return \"Assault Rifle AK-47\"\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#weaponcyclesound","title":"WeaponCycleSound","text":"<p>Description: Called when a player cycles through their weapons, allowing custom sounds to be played.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - None directly, but could include context in some implementations.</p> <p>Returns: - <code>bool|nil</code>: Can be used to prevent default sound if handled.</p> <p>Example: <pre><code>hook.Add(\"WeaponCycleSound\", \"PlayCustomCycleSound\", function()\n    print(\"Custom weapon cycle sound played.\")\n    return \"custom/sounds/weapon_cycle.wav\"\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerchooseweapon","title":"CanPlayerChooseWeapon","text":"<p>Description: Determines if a player is allowed to choose a specific weapon. Return <code>false</code> to block weapon selection.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>weapon</code> (<code>Entity</code> or <code>table</code>): The weapon being selected.</p> <p>Returns: - <code>bool</code>: <code>false</code> to block, <code>nil</code> or <code>true</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"CanPlayerChooseWeapon\", \"RestrictWeaponChoiceForNovices\", function()\n    if LocalPlayer():getLevel() &lt; 5 then\n        return false -- Prevent weapon choice for players below level 5\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#weaponselectsound","title":"WeaponSelectSound","text":"<p>Description: Called when a weapon is selected, allowing custom sounds to be played.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>weapon</code> (<code>Entity</code> or <code>table</code>): The weapon being selected.</p> <p>Returns: - <code>bool|nil</code>: <code>false</code> to block default sound, or <code>nil</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"WeaponSelectSound\", \"CustomSelectSound\", function(weapon)\n    surface.PlaySound(\"custom/sounds/weapon_select.wav\")\n    print(\"Custom weapon select sound played.\")\n    return true -- Prevent default sound\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#canplayerusedoor","title":"CanPlayerUseDoor","text":"<p>Description: Determines if a player is allowed to use a door entity, such as opening, locking, or unlocking. Return <code>false</code> to prevent the action.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>client</code> (<code>Player</code>): The player attempting to use the door. - <code>door</code> (<code>Entity</code>): The door entity being used. - <code>access</code> (<code>int</code>): The type of access attempted (e.g., <code>DOOR_LOCK</code>).</p> <p>Returns: - <code>bool</code>: <code>false</code> to block, <code>nil</code> or <code>true</code> to allow.</p> <p>Example: <pre><code>hook.Add(\"CanPlayerUseDoor\", \"AllowOnlyOwners\", function(client, door, access)\n    if access == DOOR_LOCK and door:getOwner() ~= client then\n        return false -- Only the owner can lock the door\n    end\n    return true\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#playeraccessvendor","title":"PlayerAccessVendor","text":"<p>Description: Called when a player accesses a vendor. Useful for tracking access or applying additional logic upon access.</p> <p>Realm: <code>Server</code></p> <p>Parameters: - <code>activator</code> (<code>Player</code>): The player accessing the vendor. - <code>self</code> (<code>Entity</code>): The vendor entity being accessed.</p> <p>Example: <pre><code>hook.Add(\"PlayerAccessVendor\", \"TrackVendorAccess\", function(activator, vendor)\n    lia.log.write(\"VendorAccess\", activator:Name() .. \" accessed vendor \" .. vendor:GetClass())\n    lia.stats.increment(activator, \"vendor_accesses\")\n    print(activator:Name() .. \" has accessed vendor:\", vendor:GetClass())\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#getpriceoverride","title":"getPriceOverride","text":"<p>Description: Gets the price override for an item in a vendor's inventory. Allows dynamic pricing based on item, vendor, or other conditions.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: - <code>vendor</code> (<code>Entity</code>): The vendor entity. - <code>uniqueID</code> (<code>string</code>): The unique identifier of the item. - <code>price</code> (<code>int</code>): The base price of the item. - <code>isSellingToVendor</code> (<code>bool</code>): <code>true</code> if the player is selling to the vendor, <code>false</code> if buying from the vendor.</p> <p>Returns: - <code>int|nil</code>: The overridden price, or <code>nil</code> to use the default.</p> <p>Example: <pre><code>hook.Add(\"getPriceOverride\", \"DynamicPricing\", function(vendor, uniqueID, price, isSellingToVendor)\n    if uniqueID == \"rare_item\" then\n        if isSellingToVendor then\n            return price * 0.75 -- Vendor buys at 75% of base price\n        else\n            return price * 1.25 -- Vendor sells at 125% of base price\n        end\n    end\nend)\n</code></pre></p>"},{"location":"framework/hooks/gamemode_hooks/#thirdpersontoggled","title":"thirdPersonToggled","text":"<p>Description: Called when third-person mode is toggled on or off. Allows for custom handling of third-person mode changes.</p> <p>Realm: <code>Client</code></p> <p>Parameters: - <code>state</code> (<code>bool</code>): <code>true</code> if third-person is enabled, <code>false</code> if disabled.</p> <p>Example: <pre><code>hook.Add(\"thirdPersonToggled\", \"NotifyThirdPersonChange\", function(state)\n    if state then\n        chat.AddText(Color(0,255,0), \"Third-person view enabled.\")\n    else\n        chat.AddText(Color(255,0,0), \"Third-person view disabled.\")\n    end\n    print(\"Third-person mode toggled to:\", state)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.attrib/","title":"lia.attribs","text":"<p>The lia.attribs library is used for managing attributes in the Lilia framework. Attributes represent roleplay-improving traits that can be dynamically loaded and customized through Lua files.</p>"},{"location":"framework/libraries/lia.attrib/#liaattribsloadfromdir","title":"lia.attribs.loadFromDir","text":"<p>Description: Loads attribute data from Lua files located in the specified directory.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>directory</code> (<code>String</code>): The directory path from which to load attribute files.</li> </ul> <p>Usage Example: <pre><code>lia.attribs.loadFromDir(\"schema/attributes\")\n</code></pre></p>"},{"location":"framework/libraries/lia.attrib/#liaattribssetup","title":"lia.attribs.setup","text":"<p>Description: Sets up attributes for a given character. Attributes can define custom behavior using the <code>OnSetup</code> function in their respective definitions.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player for whom attributes are being set up.</li> </ul> <p>Usage Example: <pre><code>ATTRIBUTE.name = \"Strength\"\nATTRIBUTE.desc = \"Strength Skill.\"\n\nfunction ATTRIBUTE:OnSetup(client, value)\n    if value &gt; 5 then client:ChatPrint(\"You are very Strong!\") end\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.bar/","title":"lia.bar","text":"<p>The <code>lia.bar</code> library is a helper library for generating and managing UI bars within the Lilia framework. Bars can represent various metrics or actions, enhancing the user interface and improving the roleplay experience. This library provides functions to add, retrieve, remove, and draw bars dynamically on the client side.</p>"},{"location":"framework/libraries/lia.bar/#liabarget","title":"lia.bar.get","text":"<p>Description: Retrieves information about a bar identified by its unique identifier.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>identifier</code> (<code>String</code>): The unique identifier of the bar.</li> </ul> <p>Returns: - <code>Table</code> | <code>nil</code>: The information about the bar if found; otherwise, <code>nil</code>.</p> <p>Usage Example: <pre><code>local barInfo = lia.bar.get(\"healthBar\")\nif barInfo then\n    print(\"Health Bar Found:\")\n    PrintTable(barInfo)\nelse\n    print(\"Health Bar does not exist.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.bar/#liabaradd","title":"lia.bar.add","text":"<p>Description: Adds a new bar or updates an existing one. Bars can display dynamic values and are rendered based on their priority in the draw order.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>getValue</code> (<code>function</code>): A function that retrieves the current value of the bar (expected to return a number between 0 and 1).</p> </li> <li> <p><code>color</code> (<code>Color</code>, optional): The color of the bar. Defaults to a random pastel color if not provided.</p> </li> <li> <p><code>priority</code> (<code>Number</code>, optional): The priority of the bar in the draw order. Higher priority bars are drawn on top. Defaults to the next available priority.</p> </li> <li> <p><code>identifier</code> (<code>String</code>, optional): The unique identifier of the bar. If provided and a bar with the same identifier exists, it will be updated.</p> </li> </ul> <p>Returns: - <code>Number</code>: The priority of the added or updated bar.</p> <p>Usage Example: <pre><code>lia.bar.add(function() return LocalPlayer():GetHealth() / LocalPlayer():GetMaxHealth() end, Color(255, 0, 0), 1, \"healthBar\")\n</code></pre></p>"},{"location":"framework/libraries/lia.bar/#liabarremove","title":"lia.bar.remove","text":"<p>Description: Removes a bar identified by its unique identifier.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>identifier</code> (<code>String</code>): The unique identifier of the bar to remove.</li> </ul> <p>Usage Example: <pre><code>lia.bar.remove(\"healthBar\")\n</code></pre></p>"},{"location":"framework/libraries/lia.bar/#liabardraw","title":"lia.bar.draw","text":"<p>Description: Draws a single bar with the specified parameters on the screen.</p> <p>Realm: - <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>x</code> (<code>Number</code>): The x-coordinate of the top-left corner of the bar.</p> </li> <li> <p><code>y</code> (<code>Number</code>): The y-coordinate of the top-left corner of the bar.</p> </li> <li> <p><code>w</code> (<code>Number</code>): The width of the bar.</p> </li> <li> <p><code>h</code> (<code>Number</code>): The height of the bar.</p> </li> <li> <p><code>value</code> (<code>Number</code>): The current value of the bar (ranging from 0 to 1).</p> </li> <li> <p><code>color</code> (<code>Color</code>): The color of the bar.</p> </li> </ul> <p>Usage Example: <pre><code>lia.bar.draw(50, 50, 200, 20, 0.75, Color(0, 255, 0))\n</code></pre></p>"},{"location":"framework/libraries/lia.bar/#liabardrawaction","title":"lia.bar.drawAction","text":"<p>Description: Draws the action bar, which displays ongoing actions with a progress indicator.</p> <p>Realm: - <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p>"},{"location":"framework/libraries/lia.bar/#liabardrawall","title":"lia.bar.drawAll","text":"<p>Description: Draws all active bars in the list, handling their rendering order and visibility based on their priorities and conditions.</p> <p>Realm: - <code>Client</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p>"},{"location":"framework/libraries/lia.character/","title":"lia.character","text":"<pre><code>                       \u26a0\ufe0f WARNING: Use With Caution! \u26a0\ufe0f\n</code></pre> <p>This library is highly sensitive and should only be used by experienced developers or individuals  who fully understand its functions.</p> <p>Misuse of these functions can easily corrupt character data and cause irreversible damage.  Proceed responsibly and double-check all operations before executing them.</p>"},{"location":"framework/libraries/lia.character/#liacharnew","title":"lia.char.new","text":"<p>Description: Creates a new empty <code>Character</code> object. If you are looking to create a usable character, see <code>lia.char.create</code>.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>data</code> (<code>table</code>): Character variables to assign.</li> <li><code>id</code> (<code>integer</code>, optional): Unique ID of the character.</li> <li><code>client</code> (<code>Player</code>): Player that will own the character.</li> <li><code>steamID</code> (<code>string</code>, optional): SteamID64 of the player that will own the character. Defaults to <code>client:SteamID64()</code> if not provided.</li> </ul> <p>Usage Example: <pre><code>local character = lia.char.new({\n    name = \"Alice\",\n    desc = \"A brave adventurer.\",\n    model = \"models/player/male_01.mdl\"\n}, 1, playerInstance)\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharhookvar","title":"lia.char.hookVar","text":"<p>Description: Adds a hook function to be called when a character variable is modified.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>varName</code> (<code>string</code>): The name of the character variable.</li> <li><code>hookName</code> (<code>string</code>): The name of the hook.</li> <li><code>func</code> (<code>function</code>): The function to be called when the character variable is modified.</li> </ul> <p>Usage Example: <pre><code>lia.char.hookVar(\"money\", \"OnMoneyChange\", function(character, oldValue, newValue)\n    character.player:ChatPrint(\"Your money changed from \" .. oldValue .. \" to \" .. newValue)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharregistervar","title":"lia.char.registerVar","text":"<p>Description: Registers a new character variable with specified data and associated hooks. This function is used to define a new character variable in the system, setting up how it interacts with the database, how it is networked, and how it can be accessed or modified within the game.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>key</code> (<code>string</code>): The key identifier for the character variable. This is used as the variable's name.</li> <li><code>data</code> (<code>table</code>): A table containing the data and configuration for the character variable.</li> </ul> <p>Usage Example: <pre><code>lia.char.registerVar(\"strength\", {\n    field = \"_strength\",\n    default = 10,\n    onValidate = function(value, data, client)\n        return value &gt;= 0, \"Strength cannot be negative.\"\n    end,\n    onSet = function(character, value)\n        -- Custom behavior when strength is set\n    end\n})\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liachargetchardata","title":"lia.char.getCharData","text":"<p>Description: Loads data for a character from the database.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>charID</code> (<code>integer</code>): The ID of the character to load data for.</li> <li><code>key</code> (<code>string</code>, optional): Key to retrieve a specific value from the character's data.</li> </ul> <p>Returns: If <code>key</code> is provided, returns the value associated with that key in the character's data. Otherwise, returns the entire data table.</p> <p>Usage Example: <pre><code>local money = lia.char.getCharData(123, \"money\")\nlocal allData = lia.char.getCharData(123)\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liachargetchardataraw","title":"lia.char.getCharDataRaw","text":"<p>Description: Loads raw data for a character from the database.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>charID</code> (<code>integer</code>): The ID of the character to load data for.</li> <li><code>key</code> (<code>string</code>, optional): The specific key to retrieve from the character's data.</li> </ul> <p>Returns: - If <code>key</code> is provided, returns the value associated with that key in the character's data. - If <code>key</code> is not provided, returns the entire data table for the character. - Returns <code>false</code> if the character data could not be found.</p> <p>Usage Example: <pre><code>local rawData = lia.char.getCharDataRaw(123)\nlocal specificData = lia.char.getCharDataRaw(123, \"inventory\")\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liachargetbyid","title":"lia.char.getByID","text":"<p>Description: Retrieves the client associated with a character by their character ID.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>ID</code> (<code>number</code>): The ID of the character to find the associated client.</li> </ul> <p>Returns: <code>Player|nil</code> - The client associated with the character, or <code>nil</code> if no client is found.</p> <p>Usage Example: <pre><code>local client = lia.char.getByID(123)\nif IsValid(client) then\n    print(client:Nick() .. \" is the player associated with the character ID.\")\nelse\n    print(\"No client found for that character ID.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liachargetbysteamid","title":"lia.char.getBySteamID","text":"<p>Description: Retrieves the character associated with a player's SteamID or SteamID64.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>steamID</code> (<code>string</code>): The SteamID or SteamID64 of the player to find the associated character.</li> </ul> <p>Returns: <code>table|nil</code> - The character associated with the SteamID, or <code>nil</code> if no character is found.</p> <p>Usage Example: <pre><code>local character = lia.char.getBySteamID(\"STEAM_0:1:12345678\")\nif character then\n    print(\"Character found: \" .. character:getName())\nelse\n    print(\"No character found for the given SteamID.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liachargetall","title":"lia.char.getAll","text":"<p>Description: Retrieves the SteamIDs of all connected players.</p> <p>Realm: <code>Shared</code></p> <p>Returns: <code>table</code> - Table containing SteamIDs of all connected players.</p> <p>Usage Example: <pre><code>local allCharacters = lia.char.getAll()\nfor client, character in pairs(allCharacters) do\n    print(client:Nick() .. \" has character \" .. character:getName())\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liachargetteamcolor","title":"lia.char.GetTeamColor","text":"<p>Description: Gets the color associated with a player's team or class.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player whose color to retrieve.</li> </ul> <p>Returns: <code>Color</code> - The color associated with the player's team or class.</p> <p>Usage Example: <pre><code>local color = lia.char.GetTeamColor(playerInstance)\nplayerInstance:SetPlayerColor(Vector(color.r/255, color.g/255, color.b/255))\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharcreate","title":"lia.char.create","text":"<p>Description: Creates a character object with its assigned properties and saves it to the database.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>data</code> (<code>table</code>): Properties to assign to this character. If fields are missing from the table, it will use the default value for that property.</li> <li><code>callback</code> (<code>function</code>): Function to call after the character saves.</li> </ul> <p>Usage Example: <pre><code>lia.char.create({\n    name = \"Bob\",\n    desc = \"A skilled trader.\",\n    steamID = \"STEAM_0:1:87654321\"\n}, function(charID)\n    print(\"Character created with ID:\", charID)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharrestore","title":"lia.char.restore","text":"<p>Description: Loads all of a player's characters into memory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): Player to load the characters for.</li> <li><code>callback</code> (<code>function</code>, optional): Function to call when the characters have been loaded.</li> <li><code>id</code> (<code>integer</code>, optional): The ID of a specific character to load instead of all of the player's characters.</li> </ul> <p>Usage Example: <pre><code>lia.char.restore(playerInstance, function(characters)\n    print(\"Characters loaded:\", characters)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharcleanupforplayer","title":"lia.char.cleanUpForPlayer","text":"<p>Description: Cleans up a player's characters, removing them from memory and database.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player whose characters to clean up.</li> </ul> <p>Usage Example: <pre><code>lia.char.cleanUpForPlayer(playerInstance)\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liachardelete","title":"lia.char.delete","text":"<p>Description: Deletes a character from memory and database.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>id</code> (<code>integer</code>): The ID of the character to delete.</li> <li><code>client</code> (<code>Player</code>): The player associated with the character.</li> </ul> <p>Usage Example: <pre><code>lia.char.delete(123, playerInstance)\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharsetchardata","title":"lia.char.setCharData","text":"<p>Description: Sets data for a character in the database and in memory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>charID</code> (<code>integer</code>): The ID of the character to set data for.</li> <li><code>key</code> (<code>string</code>): The key of the data to set.</li> <li><code>val</code> (<code>any</code>): The value to set for the specified key.</li> </ul> <p>Returns: <code>boolean</code> - <code>True</code> if the data was successfully set, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>local success = lia.char.setCharData(123, \"health\", 100)\nif success then\n    print(\"Health updated successfully.\")\nelse\n    print(\"Failed to update health.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharsetcharname","title":"lia.char.setCharName","text":"<p>Description: Sets the name for a character in the database and in memory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>charID</code> (<code>integer</code>): The ID of the character to set the name for.</li> <li><code>name</code> (<code>string</code>): The new name to set for the character.</li> </ul> <p>Returns: <code>boolean</code> - <code>True</code> if the name was successfully set, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>local success = lia.char.setCharName(123, \"Charlie\")\nif success then\n    print(\"Character name updated successfully.\")\nelse\n    print(\"Failed to update character name.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#liacharsetcharmodel","title":"lia.char.setCharModel","text":"<p>Description: Sets the model and bodygroups for a character in the database and in memory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>charID</code> (<code>integer</code>): The ID of the character to set the model for.</li> <li><code>model</code> (<code>string</code>): The model path to set for the character.</li> <li><code>bg</code> (<code>table</code>): A table containing bodygroup IDs and values.</li> </ul> <p>Returns: <code>boolean</code> - <code>True</code> if the model and bodygroups were successfully set, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>lia.char.setCharModel(123, \"models/player/male_02.mdl\", {\n    {id = 1, value = 2},\n    {id = 2, value = 1}\n})\n</code></pre></p>"},{"location":"framework/libraries/lia.character/#default-variables","title":"Default Variables","text":"<p>name</p> <p>Description: The name of the character.</p> <p>Default: <code>\"John Doe\"</code></p> <p>Field: <code>_name</code></p> <p>Validation: Ensures the name is a non-empty string and, if configured, unique.</p> <p>Adjustment: Trims the name to a maximum of 70 characters or overrides it based on hooks.</p> <p>Usage Example: <pre><code>local character = lia.char.new({ name = \"Alice\" }, 1, playerInstance)\nprint(character:getName()) -- Outputs: Alice\n</code></pre></p> <p>desc</p> <p>Description: The description of the character.</p> <p>Default: <code>\"Please enter your description with a minimum of X characters!\"</code> (X is defined by <code>lia.config.MinDescLen</code>)</p> <p>Field: <code>_desc</code></p> <p>Validation: Ensures the description meets the minimum length requirement.</p> <p>Adjustment: Trims the description or overrides it based on hooks.</p> <p>Usage Example: <pre><code>local character = lia.char.new({ desc = \"A brave warrior.\" }, 1, playerInstance)\nprint(character:getDesc()) -- Outputs: A brave warrior.\n</code></pre></p> <p>model</p> <p>Description: The model of the character.</p> <p>Default: <code>\"models/error.mdl\"</code></p> <p>Field: <code>_model</code></p> <p>Validation: Ensures the model exists within the character's faction.</p> <p>Adjustment: Sets the model and applies bodygroups based on faction.</p> <p>Display: Provides a UI panel with model selection for the character.</p> <p>Usage Example: <pre><code>local character = lia.char.new({ model = \"models/player/male_01.mdl\" }, 1, playerInstance)\nprint(character:getModel()) -- Outputs: models/player/male_01.mdl\n</code></pre></p> <p>class</p> <p>Description: The class of the character.</p> <p>Default: <code>{}</code></p> <p>Usage Example: <pre><code>local character = lia.char.new({ class = \"Warrior\" }, 1, playerInstance)\nprint(character:getClass()) -- Outputs: Warrior\n</code></pre></p> <p>faction</p> <p>Description: The faction of the character.</p> <p>Default: <code>\"Citizen\"</code></p> <p>Field: <code>_faction</code></p> <p>Validation: Ensures the faction exists and the client has access to it.</p> <p>Adjustment: Sets the faction's unique ID based on the selected faction.</p> <p>Usage Example: <pre><code>local success = lia.char.setFaction(123, \"Police\")\nif success then\n    print(\"Faction updated successfully.\")\nelse\n    print(\"Failed to update faction.\")\nend\n</code></pre></p> <p>money</p> <p>Description: The money the character possesses.</p> <p>Default: <code>0</code></p> <p>Field: <code>_money</code></p> <p>Usage Example: <pre><code>local character = lia.char.new({ money = 500 }, 1, playerInstance)\nprint(character:getMoney()) -- Outputs: 500\n</code></pre></p> <p>data</p> <p>Description: Additional data associated with the character.</p> <p>Default: <code>{}</code></p> <p>Field: <code>_data</code></p> <p>Usage Example: <pre><code>local character = lia.char.new({ data = { reputation = 10 } }, 1, playerInstance)\nprint(character:getData(\"reputation\")) -- Outputs: 10\n</code></pre></p> <p>var</p> <p>Description: Custom variables associated with the character.</p> <p>Default: <code>{}</code></p> <p>Usage Example: <pre><code>local character = lia.char.new({ var = { customKey = \"customValue\" } }, 1, playerInstance)\nprint(character:getVar(\"customKey\")) -- Outputs: customValue\n</code></pre></p> <p>inv</p> <p>Description: Represents the character's inventory, containing all items the character possesses.</p> <p>Default: <code>{}</code></p> <p>Field: <code>_inv</code></p> <p>Usage Example: <pre><code>character:getInv()\n</code></pre></p> <p>attribs</p> <p>Description: Holds the character's attributes, such as strength, agility, intelligence, etc.</p> <p>Default: <code>{}</code></p> <p>Field: <code>_attribs</code></p> <p>Validation: Ensures that each attribute does not exceed its maximum allowed value and that the total attribute points do not surpass the permitted maximum.</p> <p>Usage Example: <pre><code>local strength = character:getAttrib(\"strength\")\ncharacter:setAttrib(\"agility\", 5)\n</code></pre></p> <p>RecognizedAs</p> <p>Description: A list of entities or roles that recognize this character as another, allowing for disguised or alternate identities.</p> <p>Default: <code>{}</code></p> <p>Field: <code>recognized_as</code></p> <p>Usage Example: <pre><code>character:setRecognizedAs(\"UndercoverAgent\")\nlocal recognitions = character:getRecognizedAs()\n</code></pre></p>"},{"location":"framework/libraries/lia.chat/","title":"lia.chat","text":"<p>Chat manipulation and helper functions.</p> <p>Chat messages are a core part of the framework\u2014it takes up a significant portion of the gameplay and is also used to interact with the framework. Chat messages can have types or \"classes\" that describe how the message should be interpreted. All chat messages will have some type of class: <code>ic</code> for regular in-character speech, <code>me</code> for actions, <code>ooc</code> for out-of-character, etc. These chat classes can affect how the message is displayed in each player's chatbox. See <code>lia.chat.register</code> to create your own chat classes.</p> <p>NOTE: For the most part, you shouldn't use this library unless you know what you're doing. You can very easily corrupt character data using these functions!</p>"},{"location":"framework/libraries/lia.chat/#liachattimestamp","title":"lia.chat.timestamp","text":"<p>Description: Generates a timestamp string for chat messages.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>ooc</code> (<code>boolean</code>): Whether the message is Out of Character (OOC).</li> </ul> <p>Returns: <code>string</code> - The formatted timestamp string, including date and time if configured to show.</p> <p>Usage Example: <pre><code>local timestamp = lia.chat.timestamp(true)\nprint(timestamp) -- Outputs: (12:34) \n</code></pre></p>"},{"location":"framework/libraries/lia.chat/#liachatregister","title":"lia.chat.register","text":"<p>Description: Registers a new chat type with the information provided. Chat classes should usually be created inside of the <code>InitializedChatClasses</code> hook.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>chatType</code> (<code>string</code>): Name of the chat type.</li> <li><code>data</code> (<code>table</code>): Properties and functions to assign to this chat class.</li> </ul> <p>Usage Example: <pre><code>lia.chat.register(\"me\", {\n    format = \"**%s %s\",\n    onGetColor = lia.chat.classes.ic.onGetColor,\n    onCanHear = ChatboxCore.ChatRange,\n    prefix = {\"/me\", \"/action\"},\n    deadCanChat = true\n})\n</code></pre></p> <p>See: ChatClassStructure</p>"},{"location":"framework/libraries/lia.chat/#liachatparse","title":"lia.chat.parse","text":"<p>Description: Identifies which chat mode should be used.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): Player who is speaking.</li> <li><code>message</code> (<code>string</code>): Message to parse.</li> <li><code>noSend</code> (<code>boolean</code>, optional, default <code>false</code>): Whether or not to send the chat message after parsing.</li> </ul> <p>Returns: - <code>string</code>: Name of the chat type. - <code>string</code>: Message that was parsed. - <code>boolean</code>: Whether or not the speaker should be anonymous.</p> <p>Usage Example: <pre><code>local chatType, parsedMessage, isAnonymous = lia.chat.parse(playerInstance, \"/me waves\")\nif chatType then\n    print(\"Chat Type:\", chatType)\n    print(\"Message:\", parsedMessage)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.chat/#liachatsend","title":"lia.chat.send","text":"<p>Description: Sends a chat message from a speaker to specified receivers, based on the provided chat type and text. The message is processed according to the properties and functions defined for the chat class.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>speaker</code> (<code>Entity</code>): Entity sending the message.</li> <li><code>chatType</code> (<code>string</code>): Type of the chat message.</li> <li><code>text</code> (<code>string</code>): The message content.</li> <li><code>anonymous</code> (<code>boolean</code>, optional, default <code>false</code>): Whether the message should be sent anonymously.</li> <li><code>receivers</code> (<code>table</code>, optional): List of entities to receive the message (if specified).</li> </ul> <p>Usage Example: <pre><code>lia.chat.send(playerInstance, \"ic\", \"Hello, world!\", false)\n</code></pre></p>"},{"location":"framework/libraries/lia.chat/#variables","title":"Variables","text":""},{"location":"framework/libraries/lia.chat/#liachatclasses","title":"lia.chat.classes","text":"<p>Description: List of all chat classes that have been registered by the framework, where each key is the name of the chat class, and the value is the chat class data. Accessing a chat class's data is useful for when you want to copy some functionality or properties to use in your own. Note that if you're accessing this table, you should do so inside of the <code>InitializedChatClasses</code> hook.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>print(lia.chat.classes.ic.format)\n-- Output: \"%s says \\\"%s\\\"\"\n</code></pre></p>"},{"location":"framework/libraries/lia.chat/#structures","title":"Structures","text":""},{"location":"framework/libraries/lia.chat/#chatclassstructure","title":"ChatClassStructure","text":"<p>Description: Chat messages can have different classes or \"types\" of messages that have different properties. This can include how the text is formatted, color, hearing distance, etc.</p> <p>Realm: <code>Shared</code></p> <p>Fields:</p> <ul> <li><code>prefix</code> (<code>string</code> or <code>table</code> of <code>string</code>):   What the player must type before their message in order to use this chat class. For example, having a prefix of <code>/y</code> will require typing <code>/y I am yelling</code> to send a message with this chat class. This can also be a table of strings if you want to allow multiple prefixes, such as <code>{\"//\", \"/ooc\"}</code>.</li> </ul> <p>NOTE: The prefix should usually start with a <code>/</code> to be consistent with the rest of the framework. However, you can use something different like the <code>LOOC</code> chat class where the prefixes are <code>.//</code>, <code>[[</code>, and <code>/looc</code>.</p> <ul> <li> <p><code>noSpaceAfter</code> (<code>boolean</code>, optional, default <code>false</code>):   Whether or not the <code>prefix</code> can be used without a space after it. For example, the <code>OOC</code> chat class allows you to type <code>//my message</code> instead of <code>// my message</code>. NOTE: This only works if the last character in the prefix is non-alphanumeric (i.e., <code>noSpaceAfter</code> with <code>/y</code> will not work, but <code>/!</code> will).</p> </li> <li> <p><code>format</code> (<code>string</code>, optional, default <code>\"%s: \\\"%s\\\"\"</code>):   How to format a message with this chat class. The first <code>%s</code> will be the speaking player's name, and the second one will be their message.</p> </li> <li> <p><code>color</code> (<code>Color</code>, optional, default <code>Color(242, 230, 160)</code>):   Color to use when displaying a message with this chat class.</p> </li> <li> <p><code>font</code> (<code>string</code>, optional, default <code>liaChatFont</code>):   Font to use for displaying a message with this chat class.</p> </li> <li> <p><code>deadCanChat</code> (<code>boolean</code>, optional, default <code>false</code>):   Whether or not a dead player can send a message with this chat class.</p> </li> <li> <p><code>onCanHear</code> (<code>number</code> or <code>function</code>, optional):   This can be either a <code>number</code> representing how far away another player can hear this message, or a <code>function</code> which returns <code>true</code> if the given listener can hear the message emitted from a speaker.</p> </li> </ul> <p>Examples: <pre><code>onCanHear = 1000 -- Message can be heard by any player 1000 units away from the speaking player\n\nonCanHear = function(speaker, text)\n    return true -- The speaking player will be heard by everyone\nend\n</code></pre></p> <ul> <li><code>onCanSay</code> (<code>function</code>, optional):   Function to run to check whether or not a player can send a message with this chat class. By default, it will return <code>false</code> if the player is dead and <code>deadCanChat</code> is <code>false</code>. Overriding this function will prevent <code>deadCanChat</code> from working, and you must implement this functionality manually.</li> </ul> <p>Example: <pre><code>onCanSay = function(speaker, text)\n    return false -- The speaker will never be able to send a message with this chat class\nend\n</code></pre></p> <ul> <li><code>onGetColor</code> (<code>function</code>, optional):   Function to run to set the color of a message with this chat class. Generally, stick to using <code>color</code>, but this is useful for when you want the color of the message to change based on some criteria.</li> </ul> <p>Example: <pre><code>onGetColor = function(speaker, text)\n    return Color(math.random(120, 200), 0, 0) -- Each message will be colored a random shade of red\nend\n</code></pre></p> <ul> <li><code>onChatAdd</code> (<code>function</code>, optional):   Function to run when a message with this chat class should be added to the chatbox. If using this function, make sure to end the function by calling <code>chat.AddText</code> for the text to show up.</li> </ul> <p>NOTE: Using your own <code>onChatAdd</code> function will prevent <code>color</code>, <code>onGetColor</code>, or <code>format</code> from being used since you'll be overriding the base function that uses those properties. In such cases, you'll need to add that functionality back in manually. In general, avoid overriding this function where possible. The <code>data</code> argument in the function is whatever is passed into the same <code>data</code> argument in <code>lia.chat.send</code>.</p> <p>Example: <pre><code>onChatAdd = function(speaker, text, bAnonymous, data)\n    chat.AddText(color_white, speaker:GetName(), \": \", text) -- Adds white text in the form of \"Player Name: Message contents\"\nend\n</code></pre></p> <p>See: lia.chat.register</p>"},{"location":"framework/libraries/lia.class/","title":"lia.class","text":"<p>Classes are temporary assignments for characters\u2014analogous to a \"job\" in a faction. For example, you may have a police faction in your schema and have \"police recruit\" and \"police chief\" as different classes in your faction. Anyone can join a class in their faction by default, but you can restrict this as needed with <code>CLASS.OnCanBe</code>.</p> <p>If you are looking for the class structure, you can find it here.</p>"},{"location":"framework/libraries/lia.class/#liaclassloadfromdir","title":"lia.class.loadFromDir","text":"<p>Description: Loads class information from Lua files in the specified directory.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>directory</code> (<code>string</code>): The directory path from which to load class Lua files.</li> </ul> <p>Usage Example: <pre><code>lia.class.loadFromDir(\"schema/classes\")\n</code></pre></p>"},{"location":"framework/libraries/lia.class/#liaclasscanbe","title":"lia.class.canBe","text":"<p>Description: Checks if a player can join a particular class.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player wanting to join the class.</li> <li><code>class</code> (<code>integer</code>): The identifier of the class.</li> </ul> <p>Returns: - <code>boolean</code>: Whether the player can join the class. - <code>string</code>: Reason for the failure, if any.</p> <p>Usage Example: <pre><code>local canJoin, reason = lia.class.canBe(playerInstance, 2)\nif canJoin then\n    print(\"Player can join the class.\")\nelse\n    print(\"Cannot join class:\", reason)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.class/#liaclassget","title":"lia.class.get","text":"<p>Description: Retrieves information about a class.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>identifier</code> (<code>integer</code>): The identifier of the class.</li> </ul> <p>Returns: <code>table</code>: Information about the class.</p> <p>Usage Example: <pre><code>local classInfo = lia.class.get(1)\nprint(classInfo.name) -- Outputs the name of the class\n</code></pre></p>"},{"location":"framework/libraries/lia.class/#liaclassgetplayers","title":"lia.class.getPlayers","text":"<p>Description: Retrieves a list of players belonging to a specific class.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>class</code> (<code>integer</code>): The identifier of the class.</li> </ul> <p>Returns: <code>table</code>: List of players belonging to the class.</p> <p>Usage Example: <pre><code>local policePlayers = lia.class.getPlayers(3)\nfor _, player in ipairs(policePlayers) do\n    print(player:Nick() .. \" is a police officer.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.class/#liaclassgetplayercount","title":"lia.class.getPlayerCount","text":"<p>Description: Retrieves the count of players belonging to a specific class.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>class</code> (<code>integer</code>): The identifier of the class.</li> </ul> <p>Returns: <code>integer</code>: The count of players belonging to the class.</p> <p>Usage Example: <pre><code>local count = lia.class.getPlayerCount(3)\nprint(\"Number of police officers:\", count)\n</code></pre></p>"},{"location":"framework/libraries/lia.class/#liaclassretrieveclass","title":"lia.class.retrieveClass","text":"<p>Description: Retrieves the identifier of a class based on its unique ID or name.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>class</code> (<code>string</code>): The unique ID or name of the class.</li> </ul> <p>Returns: <code>integer|nil</code>: The identifier of the class if found, <code>nil</code> otherwise.</p> <p>Usage Example: <pre><code>local classID = lia.class.retrieveClass(\"police_chief\")\nif classID then\n    print(\"Class ID:\", classID)\nelse\n    print(\"Class not found.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.class/#liaclasshaswhitelist","title":"lia.class.hasWhitelist","text":"<p>Description: Checks if a class has a whitelist.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>class</code> (<code>integer</code>): The identifier of the class.</li> </ul> <p>Returns: <code>boolean</code>: <code>true</code> if the class has a whitelist, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>local hasWL = lia.class.hasWhitelist(2)\nif hasWL then\n    print(\"This class has a whitelist.\")\nelse\n    print(\"This class does not have a whitelist.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.color/","title":"lia.color","text":"<p>The <code>lia.color</code> library provides a set of utility functions for manipulating and handling colors within the Lilia framework. This includes adjusting color components, converting colors to hexadecimal strings, creating dynamic color effects like rainbows and color cycles, and blending colors. These functions are essential for creating visually appealing interfaces and effects in your schema.</p> <p>NOTE: Always ensure that color values are within the valid range (0-255) to prevent unexpected behavior or errors.</p>"},{"location":"framework/libraries/lia.color/#liacoloradjust","title":"lia.color.Adjust","text":"<p>Description: Adjusts the components of a color by the specified offsets.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>color</code> (<code>Color</code>): The color to adjust (expects a table with <code>r</code>, <code>g</code>, <code>b</code>, and optionally <code>a</code> values).</li> <li><code>rOffset</code> (<code>number</code>): The offset to apply to the red component.</li> <li><code>gOffset</code> (<code>number</code>): The offset to apply to the green component.</li> <li><code>bOffset</code> (<code>number</code>): The offset to apply to the blue component.</li> <li><code>aOffset</code> (<code>number</code>, optional, default <code>0</code>): The offset to apply to the alpha component.</li> </ul> <p>Returns: <code>Color</code> - The adjusted color as a new color table.</p> <p>Usage Example: <pre><code>local originalColor = Color(100, 150, 200, 255)\nlocal newColor = lia.color.Adjust(originalColor, 10, -20, 30)\nprint(newColor) -- Outputs: Color(110, 130, 230, 255)\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorcolortohex","title":"lia.color.ColorToHex","text":"<p>Description: Converts a color to a hexadecimal string.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>color</code> (<code>Color</code>): The color to convert.</li> </ul> <p>Returns: <code>string</code> - The hexadecimal color code.</p> <p>Usage Example: <pre><code>local color = Color(255, 0, 0)\nlocal hex = lia.color.ColorToHex(color)\nprint(hex) -- Outputs: \"0xFF0000\"\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorlighten","title":"lia.color.Lighten","text":"<p>Description: Lightens a color by the specified amount.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>color</code> (<code>Color</code>): The color to lighten.</li> <li><code>amount</code> (<code>number</code>): The amount by which to lighten the color.</li> </ul> <p>Returns: <code>Color</code> - The resulting lightened color.</p> <p>Usage Example: <pre><code>local darkColor = Color(50, 50, 50)\nlocal lightColor = lia.color.Lighten(darkColor, 0.2)\nprint(lightColor) -- Outputs a lighter shade of the original color\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorrainbow","title":"lia.color.Rainbow","text":"<p>Description: Returns a color that cycles through the hues of the HSV color spectrum.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>frequency</code> (<code>number</code>): The speed at which the color cycles through hues.</li> </ul> <p>Returns: <code>Color</code> - The color object with the current hue.</p> <p>Usage Example: <pre><code>hook.Add(\"Think\", \"RainbowColor\", function()\n    local rainbowColor = lia.color.Rainbow(30)\n    surface.SetDrawColor(rainbowColor)\n    surface.DrawRect(10, 10, 100, 100)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorcolorcycle","title":"lia.color.ColorCycle","text":"<p>Description: Returns a color that smoothly transitions between two given colors.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>col1</code> (<code>Color</code>): The first color.</li> <li><code>col2</code> (<code>Color</code>): The second color.</li> <li><code>freq</code> (<code>number</code>): The frequency of the color transition.</li> </ul> <p>Returns: <code>Color</code> - The color resulting from the transition.</p> <p>Usage Example: <pre><code>hook.Add(\"Think\", \"ColorCycleExample\", function()\n    local cyclingColor = lia.color.ColorCycle(Color(255, 0, 0), Color(0, 0, 255), 1)\n    surface.SetDrawColor(cyclingColor)\n    surface.DrawRect(120, 10, 100, 100)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolortotext","title":"lia.color.toText","text":"<p>Description: Converts a color object to a string representation.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>color</code> (<code>Color</code>): The color object to convert.</li> </ul> <p>Returns: <code>string</code> - A string representation of the color in the format <code>\"r,g,b,a\"</code>.</p> <p>Usage Example: <pre><code>local color = Color(255, 255, 255, 255)\nlocal colorText = lia.color.toText(color)\nprint(colorText) -- Outputs: \"255,255,255,255\"\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolordarken","title":"lia.color.Darken","text":"<p>Description: Darkens a color by the specified amount.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>color</code> (<code>Color</code>): The color to darken.</li> <li><code>amount</code> (<code>number</code>): The amount by which to darken the color.</li> </ul> <p>Returns: <code>Color</code> - The resulting darkened color.</p> <p>Usage Example: <pre><code>local lightColor = Color(200, 200, 200)\nlocal darkColor = lia.color.Darken(lightColor, 0.3)\nprint(darkColor) -- Outputs a darker shade of the original color\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorblend","title":"lia.color.Blend","text":"<p>Description: Blends two colors together by a specified ratio.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>color1</code> (<code>Color</code>): The first color.</li> <li><code>color2</code> (<code>Color</code>): The second color.</li> <li><code>ratio</code> (<code>number</code>): The blend ratio (<code>0.0</code> to <code>1.0</code>).</li> </ul> <p>Returns: <code>Color</code> - The resulting blended color.</p> <p>Usage Example: <pre><code>local colorA = Color(255, 0, 0)\nlocal colorB = Color(0, 0, 255)\nlocal blendedColor = lia.color.Blend(colorA, colorB, 0.5)\nprint(blendedColor) -- Outputs: Color(127, 0, 127)\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorrgb","title":"lia.color.rgb","text":"<p>Description: Converts RGB values to a <code>Color</code> object.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>r</code> (<code>integer</code>): The red component (<code>0-255</code>).</li> <li><code>g</code> (<code>integer</code>): The green component (<code>0-255</code>).</li> <li><code>b</code> (<code>integer</code>): The blue component (<code>0-255</code>).</li> </ul> <p>Returns: <code>Color</code> - The resulting color.</p> <p>Usage Example: <pre><code>local color = lia.color.rgb(128, 64, 255)\nprint(color) -- Outputs: Color(128, 64, 255, 255)\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorlerpcolor","title":"lia.color.LerpColor","text":"<p>Description: Linearly interpolates between two colors.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>frac</code> (<code>number</code>): A fraction between <code>0</code> and <code>1</code> representing the interpolation amount.</li> <li><code>from</code> (<code>Color</code>): The starting color (a table with <code>r</code>, <code>g</code>, <code>b</code>, and <code>a</code> fields).</li> <li><code>to</code> (<code>Color</code>): The target color (a table with <code>r</code>, <code>g</code>, <code>b</code>, and <code>a</code> fields).</li> </ul> <p>Returns: <code>Color</code> - The resulting interpolated color.</p> <p>Usage Example: <pre><code>local startColor = Color(255, 0, 0)\nlocal endColor = Color(0, 0, 255)\nlocal interpolatedColor = lia.color.LerpColor(0.5, startColor, endColor)\nprint(interpolatedColor) -- Outputs: Color(127.5, 0, 127.5, 255)\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorreturnmainadjustedcolors","title":"lia.color.ReturnMainAdjustedColors","text":"<p>Description: Returns a table of adjusted colors based on a base color. This function calculates a set of colors for use in a UI, including background, sidebar, accent, text, hover, border, and highlight colors. These colors are derived by adjusting the provided base color using various offsets.</p> <p>Realm: <code>Client</code></p> <p>Returns: <code>table</code> - A table containing the adjusted colors with the following keys:</p> <ul> <li><code>background</code>: Adjusted background color.</li> <li><code>sidebar</code>: Adjusted sidebar color.</li> <li><code>accent</code>: Accent color (base color).</li> <li><code>text</code>: Text color.</li> <li><code>hover</code>: Adjusted hover color.</li> <li><code>border</code>: Border color.</li> <li><code>highlight</code>: Highlight color.</li> </ul> <p>Usage Example: <pre><code>local adjustedColors = lia.color.ReturnMainAdjustedColors()\nsurface.SetDrawColor(adjustedColors.background)\nsurface.DrawRect(0, 0, 200, 200)\n</code></pre></p>"},{"location":"framework/libraries/lia.color/#liacolorlerphsv","title":"lia.color.LerpHSV","text":"<p>Description: Interpolates between two colors in the HSV color space.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>start_color</code> (<code>Color</code>): The starting color.</li> <li><code>end_color</code> (<code>Color</code>): The ending color.</li> <li><code>maxValue</code> (<code>integer</code>): The maximum value to interpolate between (used for normalization).</li> <li><code>currentValue</code> (<code>integer</code>): The current value to interpolate (used for normalization).</li> <li><code>minValue</code> (<code>integer</code>, optional, default <code>0</code>): The minimum value to interpolate between (used for normalization).</li> </ul> <p>Returns: <code>Color</code> - The resulting interpolated color.</p> <p>Usage Example: <pre><code>local startHSV = Color(255, 0, 0) -- Red\nlocal endHSV = Color(0, 255, 0)   -- Green\nlocal interpolatedColor = lia.color.LerpHSV(startHSV, endHSV, 100, 50)\nprint(interpolatedColor) -- Outputs a color halfway between red and green in HSV space\n</code></pre></p>"},{"location":"framework/libraries/lia.command/","title":"lia.command","text":"<p>Registration, parsing, and handling of commands.</p> <p>Commands can be run through the chat with slash commands or they can be executed through the console. Commands can be manually restricted to certain user groups using a CAMI-compliant admin mod.</p> <p>If you are looking for the command structure, you can find it here.</p>"},{"location":"framework/libraries/lia.command/#liacommandadd","title":"lia.command.add","text":"<p>Description: Creates a new command by registering it with the provided structure. This includes setting up access restrictions, handling aliases, and defining the command's execution behavior.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>command</code> (<code>string</code>): Name of the command (recommended in UpperCamelCase).</li> <li><code>data</code> (<code>table</code>): Data describing the command, adhering to the <code>Command Fields</code>.</li> </ul> <p>Usage Example: <pre><code>lia.command.add(\"Slap\", {\n    adminOnly = true,\n    privilege = \"Can Slap\",\n    onRun = function(client, arguments)\n        local target = lia.command.findPlayer(client, arguments[1])\n        if target then\n            target:TakeDamage(10, client, client)\n            client:notify(\"You slapped \" .. target:Nick())\n            target:notify(client:Nick() .. \" slapped you!\")\n        end\n    end,\n    syntax = \"&lt;player&gt;\"\n})\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandhasaccess","title":"lia.command.hasAccess","text":"<p>Description: Checks if a player has access to execute a specific command. This function determines whether a player is authorized to run a given command based on privileges, admin-only or superadmin-only restrictions, and any custom hooks.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player to check access for.</li> <li><code>command</code> (<code>string</code>): The name of the command to check access for.</li> <li><code>data</code> (<code>table</code>, optional): The command data. If not provided, the function retrieves the data from <code>lia.command.list</code>.</li> </ul> <p>Returns: </p> <ul> <li><code>boolean</code>: Whether the player has access to the command.</li> <li><code>string</code>: The privilege associated with the command.</li> </ul> <p>Usage Example: <pre><code>local canUse, privilege = lia.command.hasAccess(playerInstance, \"Ban\")\nif canUse then\n    print(\"Player can run the command:\", privilege)\nelse\n    print(\"Player does not have access to the command:\", privilege)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandextractargs","title":"lia.command.extractArgs","text":"<p>Description: Returns a table of arguments from a given string. Words separated by spaces are considered individual arguments. To have an argument containing multiple words, they must be enclosed within quotation marks.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>text</code> (<code>string</code>): The input string to extract arguments from.</li> </ul> <p>Returns: </p> <ul> <li><code>table</code>: Arguments extracted from the string.</li> </ul> <p>Usage Example: <pre><code>local args = lia.command.extractArgs('kick \"John Doe\" 30')\nPrintTable(args)\n-- Output:\n-- 1 = kick\n-- 2 = John Doe\n-- 3 = 30\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandfindplayer","title":"lia.command.findPlayer","text":"<p>Description: Attempts to find a player by an identifier. If unsuccessful, a notice is displayed to the specified player. The search criteria are derived from <code>lia.util.findPlayer</code>.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player to notify if the target player cannot be found.</li> <li><code>name</code> (<code>string</code>): The search query (e.g., player name or SteamID).</li> </ul> <p>Returns: </p> <ul> <li><code>Player|nil</code>: The player that matches the given search query, or <code>nil</code> if not found.</li> </ul> <p>Usage Example: <pre><code>local target = lia.command.findPlayer(adminPlayer, \"PlayerName\")\nif target then\n    print(\"Found player:\", target:Nick())\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandfindfaction","title":"lia.command.findFaction","text":"<p>Description: Attempts to find a faction by an identifier.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player to notify if the faction cannot be found.</li> <li><code>name</code> (<code>string</code>): The search query (e.g., faction name).</li> </ul> <p>Returns: </p> <ul> <li><code>table|nil</code>: The faction that matches the given search query, or <code>nil</code> if not found.</li> </ul> <p>Usage Example: <pre><code>local faction = lia.command.findFaction(adminPlayer, \"Police\")\nif faction then\n    print(\"Found faction:\", faction.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandfindplayersilent","title":"lia.command.findPlayerSilent","text":"<p>Description: Attempts to find a player by an identifier silently. If the player is not found, no notification is sent to the client.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player executing the search.</li> <li><code>name</code> (<code>string</code>): The search query (e.g., player name or SteamID).</li> </ul> <p>Returns: </p> <ul> <li><code>Player|nil</code>: The player that matches the given search query, or <code>nil</code> if not found.</li> </ul> <p>Usage Example: <pre><code>local target = lia.command.findPlayerSilent(adminPlayer, \"PlayerName\")\nif target then\n    print(\"Found player silently:\", target:Nick())\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandrun","title":"lia.command.run","text":"<p>Description: Forces a player to execute a command by name. This mimics similar functionality to the player typing <code>/CommandName</code> in the chatbox.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The client who is executing the command.</li> <li><code>command</code> (<code>string</code>): The full name of the command to be executed. This string is case-insensitive.</li> <li><code>arguments</code> (<code>table</code>): An array of arguments to be passed to the command.</li> </ul> <p>Usage Example: <pre><code>lia.command.run(adminPlayer, \"Roll\", {10})\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandparse","title":"lia.command.parse","text":"<p>Description: Parses a command from an input string and executes it.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>): The player who is executing the command.</li> <li><code>text</code> (<code>string</code>): The input string to search for the command format.</li> <li><code>realCommand</code> (<code>string</code>, optional): Specific command to check for. If specified, it will only try to run this command.</li> <li><code>arguments</code> (<code>table</code>, optional): An array of arguments to pass to the command. If not specified, it will try to extract them from the text.</li> </ul> <p>Returns: </p> <ul> <li><code>boolean</code>: Whether a command has been found and executed.</li> </ul> <p>Usage Example: <pre><code>local success = lia.command.parse(adminPlayer, \"/roll 10\")\nif success then\n    print(\"Command executed successfully.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.command/#liacommandsend","title":"lia.command.send","text":"<p>Description: Requests the server to run a command. This mimics similar functionality to the client typing <code>/CommandName</code> in the chatbox.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>command</code> (<code>string</code>): Unique ID of the command.</li> <li><code>...</code> (<code>any</code>): Arguments to pass to the command.</li> </ul> <p>Usage Example: <pre><code>lia.command.send(\"roll\", 10)\n</code></pre></p>"},{"location":"framework/libraries/lia.currency/","title":"lia.currency","text":"<p>The <code>lia.currency</code> library provides functions to manage in-game currency, including setting currency symbols and names, formatting currency amounts, spawning currency entities in the game world, and more. This library ensures consistent handling and display of currency across the framework.</p> <p>NOTE: Ensure that currency settings are properly configured to match the desired in-game economy.</p>"},{"location":"framework/libraries/lia.currency/#liacurrencyset","title":"lia.currency.set","text":"<p>Description: Sets the symbol, singular, and plural forms of the currency.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>symbol</code> (<code>string</code>): The currency symbol.</li> <li><code>singular</code> (<code>string</code>): The singular form of the currency name.</li> <li><code>plural</code> (<code>string</code>): The plural form of the currency name.</li> </ul> <p>Usage Example: <pre><code>lia.currency.set(\"$\", \"dollar\", \"dollars\")\n</code></pre></p>"},{"location":"framework/libraries/lia.currency/#liacurrencyget","title":"lia.currency.get","text":"<p>Description: Retrieves the formatted currency string based on the amount.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>amount</code> (<code>integer</code>): The amount of currency.</li> </ul> <p>Returns: <code>string</code> - The formatted currency string.</p> <p>Usage Example: <pre><code>local formattedCurrency = lia.currency.get(5)\nprint(formattedCurrency) -- Outputs: \"$5 dollars\"\n</code></pre></p>"},{"location":"framework/libraries/lia.currency/#liacurrencyspawn","title":"lia.currency.spawn","text":"<p>Description: Spawns a currency entity at the specified position with the given amount and angle.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>pos</code> (<code>Vector</code>): The position where the currency entity will be spawned.</li> <li><code>amount</code> (<code>integer</code>): The amount of currency for the spawned entity.</li> <li><code>angle</code> (<code>Angle</code>, optional, default <code>Angle(0, 0, 0)</code>): The angle of the spawned entity.</li> </ul> <p>Returns: <code>Entity|nil</code> - The spawned currency entity, or <code>nil</code> if spawning failed.</p> <p>Usage Example: <pre><code>local pos = Vector(100, 200, 300)\nlocal moneyEntity = lia.currency.spawn(pos, 50)\nif moneyEntity then\n    print(\"Spawned currency entity with 50 dollars.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.currency/#variables","title":"Variables","text":""},{"location":"framework/libraries/lia.currency/#liacurrencysymbol","title":"lia.currency.symbol","text":"<p>Description: The symbol representing the currency (e.g., <code>$</code>).</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>string</code></p> <p>Usage Example: <pre><code>print(lia.currency.symbol) -- Outputs: \"$\"\n</code></pre></p>"},{"location":"framework/libraries/lia.currency/#liacurrencysingular","title":"lia.currency.singular","text":"<p>Description: The singular form of the currency name (e.g., \"dollar\").</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>string</code></p> <p>Usage Example: <pre><code>print(lia.currency.singular) -- Outputs: \"dollar\"\n</code></pre></p>"},{"location":"framework/libraries/lia.currency/#liacurrencyplural","title":"lia.currency.plural","text":"<p>Description: The plural form of the currency name (e.g., \"dollars\").</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>string</code></p> <p>Usage Example: <pre><code>print(lia.currency.plural) -- Outputs: \"dollars\"\n</code></pre></p>"},{"location":"framework/libraries/lia.darkrp/","title":"lia.darkrp","text":"<p>The <code>lia.darkrp</code> library provides a set of utility functions designed to enhance compatibility and streamline interactions within the DarkRP game mode of the Lilia Framework. These functions handle tasks such as position validation, empty space searching, client notifications, text wrapping, and money formatting. By leveraging these utilities, developers can efficiently manage common DarkRP-related operations, ensuring smoother gameplay experiences and more robust server management.</p>"},{"location":"framework/libraries/lia.darkrp/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.darkrp/#liadarkrpisempty","title":"lia.darkrp.isEmpty","text":"<p>Description: Checks if a given position is empty by evaluating the presence of obstacles, entities, and specific content types. This function ensures that the position is free from solid objects, movable items, ladders, player clips, monster clips, and other obstructive entities, while also ignoring specified entities.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>position</code> (<code>Vector</code>):   The position to check for emptiness.</p> </li> <li> <p><code>entitiesToIgnore</code> (<code>table</code>, optional):   A table of entities to ignore during the check. Defaults to an empty table if not provided.</p> </li> </ul> <p>Returns: <code>boolean</code> - Returns <code>true</code> if the position is empty; otherwise, <code>false</code>.</p> <p>Usage Example: <pre><code>local position = Vector(0, 0, 0)\nlocal ignoredEntities = {someEntity}\nlocal isPositionEmpty = lia.darkrp.isEmpty(position, ignoredEntities)\n\nif isPositionEmpty then\n    print(\"The position is empty.\")\nelse\n    print(\"The position is occupied.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.darkrp/#liadarkrpfindemptypos","title":"lia.darkrp.findEmptyPos","text":"<p>Description: Finds an empty position within a specified maximum distance from a starting position. The function searches in multiple directions and steps to locate a suitable empty space, taking into account entities to ignore and the defined check area around each position.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>startPos</code> (<code>Vector</code>):   The starting position from which to begin the search.</p> </li> <li> <p><code>entitiesToIgnore</code> (<code>table</code>, optional):   A table of entities to ignore during the search. Defaults to an empty table if not provided.</p> </li> <li> <p><code>maxDistance</code> (<code>number</code>):   The maximum distance to search for an empty position.</p> </li> <li> <p><code>searchStep</code> (<code>number</code>):   The incremental step size for each search iteration.</p> </li> <li> <p><code>checkArea</code> (<code>Vector</code>):   A vector defining the area around each position to check for emptiness.</p> </li> </ul> <p>Returns: <code>Vector</code> - Returns the found empty position. If none are found within the specified distance, it returns the original starting position.</p> <p>Usage Example: <pre><code>local startPosition = Vector(100, 200, 300)\nlocal ignoredEntities = {someEntity}\nlocal maxSearchDistance = 500\nlocal stepSize = 50\nlocal areaToCheck = Vector(10, 10, 10)\n\nlocal emptyPosition = lia.darkrp.findEmptyPos(startPosition, ignoredEntities, maxSearchDistance, stepSize, areaToCheck)\nprint(\"Found empty position at:\", emptyPosition)\n</code></pre></p>"},{"location":"framework/libraries/lia.darkrp/#liadarkrpnotify","title":"lia.darkrp.notify","text":"<p>Description: Sends a notification message to a specific client. This function utilizes the client's <code>notify</code> method to display messages, ensuring that notifications are delivered reliably.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>client</code> (<code>Player</code>):   The client who will receive the notification.</p> </li> <li> <p><code>_</code> (<code>any</code>, unused):   Unused argument. This parameter is retained for compatibility purposes.</p> </li> <li> <p><code>_</code> (<code>any</code>, unused):   Unused argument. This parameter is retained for compatibility purposes.</p> </li> <li> <p><code>message</code> (<code>string</code>):   The message to be sent to the client.</p> </li> </ul> <p>Returns: None</p> <p>Usage Example: <pre><code>local targetClient = somePlayer\nlocal notificationMessage = \"You have received a new item!\"\n\nlia.darkrp.notify(targetClient, nil, nil, notificationMessage)\n</code></pre></p>"},{"location":"framework/libraries/lia.darkrp/#liadarkrptextwrap","title":"lia.darkrp.textWrap","text":"<p>Description: Wraps text to fit within a specified maximum line width by inserting line breaks where necessary. This function calculates the width of each character and word based on the chosen font, ensuring that the wrapped text maintains proper formatting and readability.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>text</code> (<code>string</code>):   The text string to be wrapped.</p> </li> <li> <p><code>fontName</code> (<code>string</code>):   The name of the font used to measure text width.</p> </li> <li> <p><code>maxLineWidth</code> (<code>number</code>):   The maximum width in pixels allowed for each line of text.</p> </li> </ul> <p>Returns: <code>string</code> - The wrapped text with inserted line breaks.</p> <p>Usage Example: <pre><code>local originalText = \"This is a sample text that needs to be wrapped properly.\"\nlocal font = \"Arial\"\nlocal maxWidth = 300\n\nlocal wrappedText = lia.darkrp.textWrap(originalText, font, maxWidth)\nprint(wrappedText)\n-- Output:\n-- \"This is a sample text\n-- that needs to be wrapped\n-- properly.\"\n</code></pre></p>"},{"location":"framework/libraries/lia.darkrp/#liadarkrpformatmoney","title":"lia.darkrp.formatMoney","text":"<p>Description: Formats a given amount of money according to the server's currency system. This function leverages the currency formatting utilities to present monetary values in a standardized and readable format.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>amount</code> (<code>number</code>):   The amount of money to format.</li> </ul> <p>Returns: <code>string</code> - The formatted money string.</p> <p>Usage Example: <pre><code>local moneyAmount = 1500.75\nlocal formattedMoney = lia.darkrp.formatMoney(moneyAmount)\nprint(formattedMoney)\n-- Output: \"$1,500.75\" (Assuming the currency symbol is \"$\")\n</code></pre></p>"},{"location":"framework/libraries/lia.darkrp/#integration-with-darkrp","title":"Integration with DarkRP","text":"<p>The <code>lia.darkrp</code> library integrates seamlessly with the DarkRP framework by mapping its utility functions to DarkRP's native functions. This ensures that existing DarkRP functionalities remain compatible while enhancing them with additional features provided by the <code>lia.darkrp</code> library.</p> <pre><code>DarkRP.formatMoney = lia.darkrp.formatMoney\nDarkRP.isEmpty = lia.darkrp.isEmpty\nDarkRP.findEmptyPos = lia.darkrp.findEmptyPos\nDarkRP.notify = lia.darkrp.notify\nDarkRP.textWrap = lia.darkrp.textWrap\n</code></pre> <p>This integration allows developers to utilize <code>lia.darkrp</code> functions interchangeably with DarkRP's built-in functions, providing greater flexibility and extended capabilities within their game modes.</p>"},{"location":"framework/libraries/lia.data/","title":"lia.data","text":"<p>The <code>lia.data</code> library provides functions to manage persistent data storage within the <code>data/lilia</code> directory. This includes setting, retrieving, and deleting data files, as well as handling data persistence during map cleanup and server shutdown. This library ensures that data is consistently saved and loaded, maintaining the integrity of player and game-related information across sessions.</p> <p>NOTE: Always ensure that data paths and keys are correctly specified to prevent data loss or corruption.</p>"},{"location":"framework/libraries/lia.data/#liadataset","title":"lia.data.set","text":"<p>Description: Populates a file in the <code>data/lilia</code> folder with serialized data.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>key</code> (<code>string</code>): Name of the file to save.</li> <li><code>value</code> (<code>any</code>): Data to save.</li> <li><code>global</code> (<code>boolean</code>, optional, default <code>false</code>): Determines whether to write directly to the <code>data/lilia</code> folder (<code>true</code>) or to the <code>data/lilia/schema</code> folder (<code>false</code>).</li> <li><code>ignoreMap</code> (<code>boolean</code>, optional, default <code>false</code>): If <code>true</code>, saves in the schema folder instead of <code>data/lilia/schema/map</code>.</li> </ul> <p>Returns: <code>string</code> - The path where the file is saved.</p> <p>Usage Example: <pre><code>lia.data.set(\"playerStats\", {kills = 10, deaths = 2}, false, false)\n</code></pre></p>"},{"location":"framework/libraries/lia.data/#liadatadelete","title":"lia.data.delete","text":"<p>Description: Deletes the contents of a saved file in the <code>data/lilia</code> folder.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>key</code> (<code>string</code>): Name of the file to delete.</li> <li><code>global</code> (<code>boolean</code>, optional, default <code>false</code>): Determines whether to delete from the <code>data/lilia</code> folder (<code>true</code>) or the <code>data/lilia/schema</code> folder (<code>false</code>).</li> <li><code>ignoreMap</code> (<code>boolean</code>, optional, default <code>false</code>): If <code>true</code>, deletes from the schema folder instead of <code>data/lilia/schema/map</code>.</li> </ul> <p>Returns: <code>boolean</code> - Whether the deletion succeeded.</p> <p>Usage Example: <pre><code>local success = lia.data.delete(\"playerStats\")\nif success then\n    print(\"Player stats deleted successfully.\")\nelse\n    print(\"Failed to delete player stats.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.data/#liadataget","title":"lia.data.get","text":"<p>Description: Retrieves the contents of a saved file in the <code>data/lilia</code> folder.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>key</code> (<code>string</code>): Name of the file to load.</li> <li><code>default</code> (<code>any</code>): Value to return if the file could not be loaded successfully.</li> <li><code>global</code> (<code>boolean</code>, optional, default <code>false</code>): Determines whether to load from the <code>data/lilia</code> folder (<code>true</code>) or the <code>data/lilia/schema</code> folder (<code>false</code>).</li> <li><code>ignoreMap</code> (<code>boolean</code>, optional, default <code>false</code>): If <code>true</code>, loads from the schema folder instead of <code>data/lilia/schema/map</code>.</li> <li><code>refresh</code> (<code>boolean</code>, optional, default <code>false</code>): If <code>true</code>, skips the cache and forcefully loads from disk.</li> </ul> <p>Returns: <code>any</code> - Value associated with the key, or the default value if it doesn't exist.</p> <p>Usage Example: <pre><code>local playerStats = lia.data.get(\"playerStats\", {kills = 0, deaths = 0})\nprint(\"Kills:\", playerStats.kills)\nprint(\"Deaths:\", playerStats.deaths)\n</code></pre></p>"},{"location":"framework/libraries/lia.data/#liadataset_1","title":"lia.data.set","text":"<p>Description: Initializes currency settings based on the configuration after a short delay.</p> <p>Internal: </p> <p>This function is intended for internal use and should not be called directly.</p> <p>Usage Example: <pre><code>timer.Simple(1, function()\n    lia.currency.set(lia.config.CurrencySymbol, lia.config.CurrencySingularName, lia.config.CurrencyPluralName)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.db/","title":"lia.db","text":"<p>The <code>lia.db</code> library provides comprehensive functions to manage persistent data storage within the <code>data/lilia</code> directory. It supports both SQLite and MySQL (via MySQLOO) database modules, allowing for flexible data handling depending on your server's configuration. This library handles tasks such as setting, retrieving, and deleting data files, managing query queues, handling prepared statements, and ensuring data persistence during map cleanup and server shutdown.</p> <p>NOTE: Ensure that your database configurations are correctly set to prevent connection issues. Always validate and sanitize inputs to maintain data integrity and security.</p>"},{"location":"framework/libraries/lia.db/#liadbconnect","title":"lia.db.connect","text":"<p>Description: Establishes a connection to the specified database module based on the configuration. If the database is not connected yet or if reconnection is forced, it connects to the database module.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>callback</code> (<code>function</code>, optional): A function to be called after the database connection is established.</li> <li><code>reconnect</code> (<code>boolean</code>, optional, default <code>false</code>): Determines whether to force a reconnection to the database module.</li> </ul> <p>Usage Example: <pre><code>lia.db.connect(function()\n    print(\"Database connected successfully!\")\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbconvertdatatype","title":"lia.db.convertDataType","text":"<p>Description: Converts a Lua value to a format suitable for insertion into the database.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>value</code> (<code>any</code>): The value to be converted.</li> <li><code>noEscape</code> (<code>boolean</code>, optional, default <code>false</code>): Whether to skip escaping the value.</li> </ul> <p>Returns: <code>string</code> - The converted value suitable for database insertion.</p> <p>Usage Example: <pre><code>local safeValue = lia.db.convertDataType(\"O'Reilly\")\nprint(safeValue) -- Outputs: 'O\\'Reilly'\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbdelete","title":"lia.db.delete","text":"<p>Description: Deletes rows from the specified database table based on the given condition.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>dbTable</code> (<code>string</code>, optional, default <code>\"character\"</code>): The name of the database table.</li> <li><code>condition</code> (<code>string</code>, optional): The condition to apply to the deletion.</li> </ul> <p>Returns: <code>Deferred</code> - A deferred object that resolves to a table containing the deletion results and the last inserted ID.</p> <p>Usage Example: <pre><code>lia.db.delete(\"characters\", \"_id = 1\"):next(function(result)\n    print(\"Deletion successful:\", result.results)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbinserttable","title":"lia.db.insertTable","text":"<p>Description: Inserts a new row into the specified database table with the provided values.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>value</code> (<code>table</code>): The values to be inserted into the table.</li> <li><code>callback</code> (<code>function</code>, optional): A function to be called after the insertion operation is completed.</li> <li><code>dbTable</code> (<code>string</code>, optional, default <code>\"characters\"</code>): The name of the database table.</li> </ul> <p>Returns: <code>Deferred</code> - A deferred object that resolves to a table containing the insertion results and the last inserted ID.</p> <p>Usage Example: <pre><code>lia.db.insertTable({\n    _steamID = \"STEAM_0:1:123456\",\n    _name = \"John Doe\",\n    _desc = \"A brave warrior.\",\n    _model = \"models/player.mdl\",\n    _money = 100,\n    _faction = \"Warriors\"\n}, function(result)\n    print(\"Character inserted with ID:\", result.lastID)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbloadtables","title":"lia.db.loadTables","text":"<p>Description: Loads the necessary tables into the database.</p> <p>Realm: <code>Server</code></p>"},{"location":"framework/libraries/lia.db/#liadbprepare","title":"lia.db.prepare","text":"<p>Description: Prepares a SQL statement with the specified key, query string, and value types for later execution.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>key</code> (<code>string</code>): The unique key for the prepared statement.</li> <li><code>str</code> (<code>string</code>): The SQL query string.</li> <li><code>values</code> (<code>table</code>): A table defining the types of the values (<code>MYSQLOO_INTEGER</code>, <code>MYSQLOO_STRING</code>, <code>MYSQLOO_BOOL</code>).</li> </ul> <p>Usage Example: <pre><code>lia.db.prepare(\"insertPlayer\", \"INSERT INTO lia_players (_steamID, _steamName) VALUES (?, ?)\", {MYSQLOO_STRING, MYSQLOO_STRING})\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbpreparedcall","title":"lia.db.preparedCall","text":"<p>Description: Executes a prepared SQL statement with the specified key and arguments.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>key</code> (<code>string</code>): The unique key for the prepared statement.</li> <li><code>callback</code> (<code>function</code>): A function to be called after the prepared statement is executed.</li> <li><code>...</code> (<code>any</code>): Arguments to pass to the prepared statement.</li> </ul> <p>Usage Example: <pre><code>lia.db.preparedCall(\"insertPlayer\", function(result)\n    print(\"Player inserted successfully with ID:\", result.lastID)\nend, \"STEAM_0:1:123456\", \"John Doe\")\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbselect","title":"lia.db.select","text":"<p>Description: Selects data from the specified database table based on the provided fields, condition, and limit.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>fields</code> (<code>table|string</code>): The fields to select from the table.</li> <li><code>dbTable</code> (<code>string</code>, optional, default <code>\"characters\"</code>): The name of the database table.</li> <li><code>condition</code> (<code>string</code>, optional): The condition to apply to the selection.</li> <li><code>limit</code> (<code>integer</code>, optional): The maximum number of rows to retrieve.</li> </ul> <p>Returns: <code>Deferred</code> - A deferred object that resolves to a table containing the selected results and the last inserted ID.</p> <p>Usage Example: <pre><code>lia.db.select({\"_name\", \"_money\"}, \"characters\", \"_id = 1\", 1):next(function(result)\n    print(\"Character Name:\", result.results[1]._name)\n    print(\"Money:\", result.results[1]._money)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbupsert","title":"lia.db.upsert","text":"<p>Description: Inserts or updates rows in the specified database table with the provided values.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>value</code> (<code>table</code>): The values to be inserted or updated in the table.</li> <li><code>dbTable</code> (<code>string</code>, optional, default <code>\"characters\"</code>): The name of the database table.</li> </ul> <p>Returns: <code>Deferred</code> - A deferred object that resolves to a table containing the insertion or update results and the last inserted ID.</p> <p>Usage Example: <pre><code>lia.db.upsert({\n    _id = 1,\n    _name = \"John Doe\",\n    _money = 150\n}, \"characters\"):next(function(result)\n    print(\"Upsert completed with ID:\", result.lastID)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.db/#liadbwaitfortablestoload","title":"lia.db.waitForTablesToLoad","text":"<p>Description: Waits for the database tables to be loaded.</p> <p>Realm: <code>Server</code></p> <p>Returns: <code>Deferred</code> - A deferred object that resolves when the tables are loaded.</p> <p>Usage Example: <pre><code>lia.db.waitForTablesToLoad():next(function()\n    print(\"Database tables are loaded and ready.\")\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/","title":"lia.ease","text":"<p>The <code>lia.ease</code> library provides a comprehensive set of easing functions to facilitate smooth and visually appealing animations within the Lilia Framework. These functions interpolate values over time, allowing for various animation effects such as bouncing, elastic movements, and backtracking motions. By leveraging these easing functions, developers can create more dynamic and engaging user experiences in their games or applications.</p> <p>NOTE: Always ensure that the time (<code>t</code>) and duration (<code>tMax</code>) parameters are correctly managed to achieve the desired animation effects without causing unexpected behavior.</p>"},{"location":"framework/libraries/lia.ease/#liaeaseeasein","title":"lia.ease.easeIn","text":"<p>Description: Eases in the value over time using a cubic easing function. The animation starts slowly and accelerates towards the end.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeIn(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseout","title":"lia.ease.easeOut","text":"<p>Description: Eases out the value over time using a cubic easing function. The animation starts quickly and decelerates towards the end.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOut(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseinout","title":"lia.ease.easeInOut","text":"<p>Description: Eases in and out the value over time using a cubic easing function. The animation starts slowly, accelerates in the middle, and slows down towards the end.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeInOut(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseoutin","title":"lia.ease.easeOutIn","text":"<p>Description: Eases out and then in the value over time using a cubic easing function. The animation starts quickly, slows down in the middle, and speeds up towards the end.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOutIn(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseinback","title":"lia.ease.easeInBack","text":"<p>Description: Eases in the value with a back effect. The animation overshoots the starting point slightly before moving towards the target value, creating a \"pull-back\" motion.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeInBack(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Back Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseoutback","title":"lia.ease.easeOutBack","text":"<p>Description: Eases out the value with a back effect. The animation overshoots the target value slightly before settling back, creating a \"push-forward\" motion.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOutBack(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Back Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseinoutback","title":"lia.ease.easeInOutBack","text":"<p>Description: Eases in and out the value with a back effect. The animation overshoots both the starting and target values, creating a dynamic \"pull-back and push-forward\" motion.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeInOutBack(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Back Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseoutinback","title":"lia.ease.easeOutInBack","text":"<p>Description: Eases out and then in the value with a back effect. The animation first overshoots the target value before pulling back towards it, creating a \"push-forward and pull-back\" motion.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOutInBack(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Back Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseinelastic","title":"lia.ease.easeInElastic","text":"<p>Description: Eases in the value with an elastic effect. The animation starts with a spring-like motion, overshooting the target and oscillating before settling.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeInElastic(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Elastic Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseoutelastic","title":"lia.ease.easeOutElastic","text":"<p>Description: Eases out the value with an elastic effect. The animation overshoots the target value and oscillates before settling, creating a spring-like motion at the end.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOutElastic(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Elastic Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseinoutelastic","title":"lia.ease.easeInOutElastic","text":"<p>Description: Eases in and out the value with an elastic effect. The animation starts and ends with spring-like motions, providing a dynamic and bouncy transition.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeInOutElastic(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Elastic Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseoutinelastic","title":"lia.ease.easeOutInElastic","text":"<p>Description: Eases out and then in the value with an elastic effect. The animation first overshoots the target with a spring-like motion and then pulls back towards it.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOutInElastic(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Elastic Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseinbounce","title":"lia.ease.easeInBounce","text":"<p>Description: Eases in the value with a bounce effect. The animation starts by bouncing into the target value, creating a playful and dynamic motion.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeInBounce(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Bounce Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseoutbounce","title":"lia.ease.easeOutBounce","text":"<p>Description: Eases out the value with a bounce effect. The animation overshoots the target and bounces back, providing a lively and engaging transition.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOutBounce(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Bounce Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseinoutbounce","title":"lia.ease.easeInOutBounce","text":"<p>Description: Eases in and out the value with a bounce effect. The animation starts with a bounce into the target and ends with a bounce out, creating a dynamic and playful motion.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeInOutBounce(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Bounce Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseeaseoutinbounce","title":"lia.ease.easeOutInBounce","text":"<p>Description: Eases out and then in the value with a bounce effect. The animation first bounces out of the target and then bounces back in, creating a lively transition.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): Time elapsed.</li> <li><code>tMax</code> (<code>float</code>): The total duration of the animation.</li> <li><code>start</code> (<code>float</code>): The starting value of the animation.</li> <li><code>delta</code> (<code>float</code>): The total change in value to be applied.</li> </ul> <p>Returns: <code>number</code> - The eased value at the given time.</p> <p>Usage Example: <pre><code>local currentTime = 0\nlocal duration = 2 -- seconds\nlocal startValue = 0\nlocal changeInValue = 100\n\n-- In a loop or timed callback\ncurrentTime = currentTime + FrameTime()\nif currentTime &lt;= duration then\n    local easedValue = lia.ease.easeOutInBounce(currentTime, duration, startValue, changeInValue)\n    print(\"Eased Value with Bounce Effect:\", easedValue)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.ease/#liaeaseinoutcirc","title":"lia.ease.InOutCirc","text":"<p>Description: Eases in and out a value over time using a circular easing function. The animation follows a circular motion pattern, providing a smooth and natural transition.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>t</code> (<code>float</code>): The current time elapsed, normalized between 0 and 1.</li> </ul> <p>Returns: <code>number</code> - The eased value based on the circular easing function.</p> <p>Usage Example: <pre><code>local normalizedTime = 0.5 -- halfway through the animation\nlocal easedValue = lia.ease.InOutCirc(normalizedTime)\nprint(\"Eased Value with Circular Effect:\", easedValue)\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/","title":"lia.faction","text":"<p>The <code>lia.faction</code> library facilitates the creation, retrieval, and management of factions within the Lilia Framework. It allows developers to load faction data from directories, access faction details, manage associated classes and players, and handle faction categories. This library ensures that factions are consistently integrated into the game environment, enhancing organization and functionality.</p> <p>NOTE: Ensure that faction files are correctly structured and placed in the specified directories to prevent loading issues. Always validate faction data to maintain consistency and integrity.</p>"},{"location":"framework/libraries/lia.faction/#liafactionloadfromdir","title":"lia.faction.loadFromDir","text":"<p>Description: Loads factions from a specified directory. It reads all Lua files within the given directory, processes each faction file, sets up the faction within the framework, and ensures that all necessary properties are defined. If essential properties are missing, default values are assigned, and warnings are logged.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>directory</code> (<code>string</code>): The path to the faction files.</li> </ul> <p>Usage Example: <pre><code>lia.faction.loadFromDir(\"schema/factions\")\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactionget","title":"lia.faction.get","text":"<p>Description: Retrieves a faction table based on its index or name. This function allows access to all properties and methods associated with a specific faction.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>identifier</code> (<code>int|string</code>): Index or name of the faction.</li> </ul> <p>Returns: <code>table|nil</code> - The faction table if found, otherwise <code>nil</code>.</p> <p>Usage Example: <pre><code>local faction = lia.faction.get(1)\nif faction then\n    print(\"Faction Name:\", faction.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactiongetindex","title":"lia.faction.getIndex","text":"<p>Description: Retrieves the index of a faction based on its unique identifier. Useful for obtaining the numerical representation of a faction when you have its unique string ID.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>uniqueID</code> (<code>string</code>): Unique ID of the faction.</li> </ul> <p>Returns: <code>number|nil</code> - The faction index if found, otherwise <code>nil</code>.</p> <p>Usage Example: <pre><code>local index = lia.faction.getIndex(\"police\")\nif index then\n    print(\"Police Faction Index:\", index)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactiongetclasses","title":"lia.faction.getClasses","text":"<p>Description: Returns a table containing all classes associated with a specific faction. Classes typically define roles or job types within a faction.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>faction</code> (<code>int</code>): The index of the faction.</li> </ul> <p>Returns: <code>table</code> - A table containing the classes associated with the faction.</p> <p>Usage Example: <pre><code>local classes = lia.faction.getClasses(1)\nfor _, class in ipairs(classes) do\n    print(\"Class Name:\", class.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactiongetplayers","title":"lia.faction.getPlayers","text":"<p>Description: Returns a table containing all players belonging to a specific faction. This function iterates through all connected players and filters those who are part of the specified faction.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>faction</code> (<code>int</code>): The index of the faction.</li> </ul> <p>Returns: <code>table</code> - A table containing the players belonging to the specified faction.</p> <p>Usage Example: <pre><code>local policePlayers = lia.faction.getPlayers(1)\nfor _, player in ipairs(policePlayers) do\n    print(\"Police Officer:\", player:Nick())\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactiongetplayercount","title":"lia.faction.getPlayerCount","text":"<p>Description: Returns the number of players belonging to a specific faction. Useful for tracking faction sizes and managing game balance.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>faction</code> (<code>int</code>): The index of the faction.</li> </ul> <p>Returns: <code>number</code> - The number of players in the specified faction.</p> <p>Usage Example: <pre><code>local count = lia.faction.getPlayerCount(1)\nprint(\"Number of Police Officers:\", count)\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactionisfactioncategory","title":"lia.faction.isFactionCategory","text":"<p>Description: Checks if a given faction is part of a specified category of factions. Useful for grouping factions into broader categories for organizational purposes.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>faction</code> (<code>int</code>): The index of the faction to check.</li> <li><code>categoryFactions</code> (<code>table</code>): A table containing faction indices that define the category.</li> </ul> <p>Returns: <code>bool</code> - <code>true</code> if the faction is in the category, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>local isLawEnforcement = lia.faction.isFactionCategory(1, {1, 2, 3})\nif isLawEnforcement then\n    print(\"Faction is part of Law Enforcement.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactionjobgenerate","title":"lia.faction.jobGenerate","text":"<p>Description: Generates a custom faction by defining its properties such as index, name, color, default status, and associated models. This function is an example of how to create a custom faction programmatically. It is recommended to use faction files for defining factions to ensure consistency and prevent unexpected behavior.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>index</code> (<code>int</code>): The unique numerical identifier for the faction.</li> <li><code>name</code> (<code>string</code>): The name of the faction.</li> <li><code>color</code> (<code>Color</code>): The color representing the faction.</li> <li><code>default</code> (<code>bool</code>): Indicates whether the faction is default.</li> <li><code>models</code> (<code>table</code>): A table of models associated with the faction.</li> </ul> <p>Returns: <code>table</code> - The generated faction table.</p> <p>Usage Example: <pre><code>local customFaction = lia.faction.jobGenerate(9, \"Custom Faction\", Color(255, 0, 0), false, {\"models/player/custom_model.mdl\", \"models/player/custom_accessory.mdl\"})\nprint(\"Custom Faction Created:\", customFaction.name)\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactionformatmodeldata","title":"lia.faction.formatModelData","text":"<p>Description: Iterates through faction model data and formats the model groups to ensure consistency and correctness. This function processes model group information, handling both server and client-side model precaching and group assignments.</p> <p>Realm: <code>Shared</code></p> <p>Usage Example: <pre><code>lia.faction.formatModelData()\n</code></pre></p> <p>Note: This function is intended for internal use within the <code>lia.faction</code> library and is not exposed for external use.</p>"},{"location":"framework/libraries/lia.faction/#liafactiongetdefaultclass","title":"lia.faction.getDefaultClass","text":"<p>Description: Retrieves the default class of a specified faction. The default class is determined based on the faction index and the <code>isDefault</code> flag set for each class.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>id</code> (<code>int</code>): The index of the faction for which to retrieve the default class.</li> </ul> <p>Returns: <code>table|nil</code> - Information about the default class if found, <code>nil</code> otherwise.</p> <p>Usage Example: <pre><code>local defaultClass = lia.faction.getDefaultClass(1)\nif defaultClass then\n    print(\"Default Class:\", defaultClass.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.faction/#liafactionhaswhitelist","title":"lia.faction.hasWhitelist","text":"<p>Description: Determines whether a faction requires a whitelist. Useful for restricting access to certain factions based on predefined whitelist criteria.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li><code>faction</code> (<code>int</code>): Index of the faction.</li> </ul> <p>Returns: <code>bool</code> - <code>true</code> if the faction requires a whitelist, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>if lia.faction.hasWhitelist(1) then\n    print(\"Police faction requires a whitelist.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.flag/","title":"lia.flag","text":"<p>The <code>lia.flag</code> library provides a system for granting and managing abilities or permissions for characters within the Lilia framework. Flags are represented by single alphanumeric characters and allow for fine-grained control over what actions a character can perform, such as spawning props or using specific tools. This system is essential for enforcing role-based permissions and ensuring server-side validation of player actions.</p> <p>NOTE: Flags should be unique single alphanumeric characters to avoid conflicts and ensure proper functionality.</p>"},{"location":"framework/libraries/lia.flag/#liaflagadd","title":"lia.flag.add","text":"<p>Description: Creates a new flag that can be assigned to characters. This function should be called in a shared context to ensure that both the server and client are aware of the flag's existence.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>flag</code> (<code>string</code>): A single alphanumeric character representing the flag.</li> <li><code>desc</code> (<code>string</code>): A description of what the flag does.</li> <li><code>callback</code> (<code>function</code>): A function to be called when the flag is given or taken from a player. The function receives two arguments:</li> <li><code>client</code> (<code>Player</code>): The player to whom the flag is being assigned or removed.</li> <li><code>bGiven</code> (<code>boolean</code>): <code>true</code> if the flag is being given, <code>false</code> if it is being taken.</li> </ul> <p>Usage Example: <pre><code>lia.flag.add(\"z\", \"Grants the ability to fly.\", function(client, bGiven)\n    if bGiven then\n        client:EnableFlight()\n    else\n        client:DisableFlight()\n    end\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/","title":"lia.inventory","text":"<p>Inventory manipulation and helper functions.</p> <p>The <code>lia.inventory</code> library provides robust tools for managing character inventories within the Lilia Framework. It allows developers to create new inventory types, instantiate inventory instances, load and manage inventories from storage, and handle inventory-related operations both on the server and client sides. This library ensures that inventory systems are flexible, scalable, and seamlessly integrated into the broader framework, enhancing the gameplay experience by providing structured and efficient inventory management.</p> <p>NOTE: Ensure that inventory types are uniquely defined and that all required fields are correctly set to prevent conflicts and maintain data integrity. Proper management of server and client realms is crucial for synchronized inventory operations.</p>"},{"location":"framework/libraries/lia.inventory/#liainventorynewtype","title":"lia.inventory.newType","text":"<p>Description: Creates a new inventory type by defining its unique identifier and structure. This function registers the inventory type within the framework, allowing for the instantiation and management of inventories based on the defined type.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>typeID</code> (<code>string</code>):   The unique identifier for the new inventory type.</p> </li> <li> <p><code>invTypeStruct</code> (<code>table</code>):   The structure defining the behavior and configuration of the new inventory type. It must adhere to the <code>InvTypeStructType</code> structure, ensuring all required fields are present and correctly typed.</p> </li> </ul> <p>Usage Example: <pre><code>-- Define a new inventory type \"backpack\" with specific configurations\nlia.inventory.newType(\"backpack\", {\n    add = function(self, item) \n        table.insert(self.items, item) \n    end,\n    remove = function(self, itemID)\n        for index, item in ipairs(self.items) do\n            if item.id == itemID then\n                table.remove(self.items, index)\n                break\n            end\n        end\n    end,\n    sync = function(self)\n        -- Sync inventory with the client\n    end,\n    typeID = \"backpack\",\n    className = \"BackpackInventory\"\n})\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventorynew","title":"lia.inventory.new","text":"<p>Description: Creates a new inventory instance of the specified type. This function initializes the inventory with default settings and prepares it for use within the framework.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>typeID</code> (<code>string</code>):   The unique identifier for the type of inventory to create.</li> </ul> <p>Returns: <code>Inventory</code> A new instance of the specified inventory type.</p> <p>Usage Example: <pre><code>-- Create a new backpack inventory\nlocal backpack = lia.inventory.new(\"backpack\")\nbackpack:add({id = 1, name = \"Health Potion\"})\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventoryloadbyid","title":"lia.inventory.loadByID","text":"<p>Description: Loads an inventory instance by its ID from the cache or default storage if not cached. This function ensures that inventories are efficiently retrieved and instantiated, minimizing database queries by utilizing cached instances when available.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>id</code> (<code>number</code>):   The ID of the inventory to load.</p> </li> <li> <p><code>noCache</code> (<code>bool</code>, optional, default <code>false</code>):   If set to <code>true</code>, forces the function to load the inventory from storage even if it is already cached.</p> </li> </ul> <p>Returns: <code>Deferred</code> A deferred object that resolves with the loaded inventory instance or <code>nil</code> if not found.</p> <p>Usage Example: <pre><code>-- Load inventory with ID 5\nlia.inventory.loadByID(5):next(function(inventory)\n    if inventory then\n        print(\"Inventory loaded:\", inventory.id)\n    else\n        print(\"Inventory not found.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventoryloadfromdefaultstorage","title":"lia.inventory.loadFromDefaultStorage","text":"<p>Description: Loads an inventory instance from the default storage system. This function is used when no specific storage handler is defined for an inventory type, ensuring that inventories are still accessible even without custom storage implementations.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>id</code> (<code>number</code>):   The ID of the inventory to load.</p> </li> <li> <p><code>noCache</code> (<code>bool</code>, optional, default <code>false</code>):   If set to <code>true</code>, forces the function to load the inventory from storage even if it is already cached.</p> </li> </ul> <p>Returns: <code>Deferred</code> A deferred object that resolves with the loaded inventory instance or <code>nil</code> if not found.</p> <p>Usage Example: <pre><code>-- Load inventory with ID 10 from default storage\nlia.inventory.loadFromDefaultStorage(10):next(function(inventory)\n    if inventory then\n        print(\"Inventory loaded from default storage:\", inventory.id)\n    else\n        print(\"Inventory not found in default storage.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventoryinstance","title":"lia.inventory.instance","text":"<p>Description: Creates and initializes a new inventory instance based on the specified type ID and initial data. This function registers the new inventory within the framework, associating it with a unique ID and preparing it for use.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>typeID</code> (<code>string</code>):   The ID of the inventory type.</p> </li> <li> <p><code>initialData</code> (<code>table</code>, optional):   Initial data to be assigned to the inventory upon creation.</p> </li> </ul> <p>Returns: <code>Deferred</code> A deferred object that resolves with the created inventory instance.</p> <p>Usage Example: <pre><code>-- Create a new weapon inventory with initial data\nlia.inventory.instance(\"weapon\", {char = 2}):next(function(inventory)\n    print(\"New inventory created with ID:\", inventory.id)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventoryloadallfromcharid","title":"lia.inventory.loadAllFromCharID","text":"<p>Description: Loads all inventory instances associated with a specific character ID. This function is useful for initializing a character's inventories when they log in or spawn into the game.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>charID</code> (<code>number</code>):   The character ID for which to load inventory instances.</li> </ul> <p>Returns: <code>Deferred</code> A deferred object that resolves with an array of loaded inventory instances.</p> <p>Usage Example: <pre><code>-- Load all inventories for character ID 3\nlia.inventory.loadAllFromCharID(3):next(function(inventories)\n    for _, inventory in ipairs(inventories) do\n        print(\"Loaded inventory ID:\", inventory.id)\n    end\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventorydeletebyid","title":"lia.inventory.deleteByID","text":"<p>Description: Deletes an inventory instance by its ID from both the database and the cache. This function ensures that inventories are properly removed, freeing up resources and maintaining database integrity.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>id</code> (<code>number</code>):   The ID of the inventory to delete.</li> </ul> <p>Usage Example: <pre><code>-- Delete inventory with ID 7\nlia.inventory.deleteByID(7)\nprint(\"Inventory 7 has been deleted.\")\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventorycleanupforcharacter","title":"lia.inventory.cleanUpForCharacter","text":"<p>Description: Cleans up all inventory instances associated with a specific character. This function is typically called when a character is deleted or removed from the game, ensuring that all related inventories are properly disposed of.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>character</code> (<code>Character</code>):   The character for which to clean up inventory instances.</li> </ul> <p>Usage Example: <pre><code>-- Clean up inventories for a character\nlia.inventory.cleanUpForCharacter(playerCharacter)\nprint(\"All inventories for the character have been cleaned up.\")\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventoryshow","title":"lia.inventory.show","text":"<p>Description: Displays the graphical representation of an inventory. This function creates a user interface panel that visually represents the inventory's contents, allowing players to interact with their items.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>inventory</code> (<code>Inventory</code>):   The inventory to display.</p> </li> <li> <p><code>parent</code> (<code>Panel</code>):   The parent panel to which the inventory panel will be attached.</p> </li> </ul> <p>Returns: <code>Panel</code> The panel displaying the inventory.</p> <p>Usage Example: <pre><code>-- Show the player's backpack inventory\nlocal backpack = player:getChar():getInventory(\"backpack\")\nif backpack then\n    lia.inventory.show(backpack, someParentPanel)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#variables","title":"Variables","text":""},{"location":"framework/libraries/lia.inventory/#liainventorytypes","title":"lia.inventory.types","text":"<p>Description: A table that stores all registered inventory types. Each key is the inventory type ID, and the value is the structure defining the inventory's behavior and configuration. This allows for easy retrieval and instantiation of inventories based on their type.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Retrieve the \"backpack\" inventory type\nlocal backpackType = lia.inventory.types[\"backpack\"]\nprint(\"Backpack Config:\", backpackType.config)\n</code></pre></p>"},{"location":"framework/libraries/lia.inventory/#liainventoryinstances","title":"lia.inventory.instances","text":"<p>Description: A table that maps inventory IDs to their corresponding inventory instances. This cache allows for efficient access to inventories without repeatedly querying the database, enhancing performance and reducing latency.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Access inventory instance with ID 4\nlocal inventory = lia.inventory.instances[4]\nif inventory then\n    print(\"Inventory ID 4 has\", #inventory.items, \"items.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/","title":"lia.item","text":"<p>Inventory manipulation and helper functions.</p> <p>The <code>lia.item</code> library provides comprehensive tools for managing items within the Lilia Framework. It allows developers to create, retrieve, and manipulate items, handle inventory interactions, and manage item instances efficiently. This library ensures that items are consistently managed on a per-character basis, enhancing both gameplay mechanics and administrative control.</p>"},{"location":"framework/libraries/lia.item/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.item/#liaitemget","title":"lia.item.get","text":"<p>Description: Retrieves an item table based on its unique identifier. This function allows access to all properties and methods associated with a specific item.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>identifier</code> (<code>string</code>):   Unique ID of the item.</li> </ul> <p>Returns: <code>table|nil</code> - The item table if found, otherwise <code>nil</code>.</p> <p>Usage Example: <pre><code>local item = lia.item.get(\"health_potion\")\nif item then\n    print(\"Item Name:\", item.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemgetitembyid","title":"lia.item.getItemByID","text":"<p>Description: Retrieves an item instance by its ID and determines its current location (e.g., inventory, world).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>itemID</code> (<code>number</code>):   The ID of the item instance.</li> </ul> <p>Returns: <code>table|nil, string|nil</code> - Returns a table containing the item instance and its location if found, otherwise <code>nil</code> and an error message.</p> <p>Usage Example: <pre><code>local itemInfo, location = lia.item.getItemByID(42)\nif itemInfo then\n    print(\"Item Location:\", location)\n    print(\"Item Name:\", itemInfo.item.name)\nelse\n    print(\"Error:\", location)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemgetinstanceditembyid","title":"lia.item.getInstancedItemByID","text":"<p>Description: Retrieves an instanced item by its ID.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>itemID</code> (<code>number</code>):   The ID of the item instance.</li> </ul> <p>Returns: <code>table|nil, string|nil</code> - Returns the item instance if found, otherwise <code>nil</code> and an error message.</p> <p>Usage Example: <pre><code>local item, err = lia.item.getInstancedItemByID(42)\nif item then\n    print(\"Instanced Item Name:\", item.name)\nelse\n    print(\"Error:\", err)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemgetitemdatabyid","title":"lia.item.getItemDataByID","text":"<p>Description: Retrieves an item's data by its ID.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>itemID</code> (<code>number</code>):   The ID of the item instance.</li> </ul> <p>Returns: <code>table|nil, string|nil</code> - Returns the item's data table if found, otherwise <code>nil</code> and an error message.</p> <p>Usage Example: <pre><code>local data, err = lia.item.getItemDataByID(42)\nif data then\n    print(\"Item Data:\", data.description)\nelse\n    print(\"Error:\", err)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemload","title":"lia.item.load","text":"<p>Description: Loads an item from a Lua file. It registers the item within the framework, ensuring it adheres to the defined structure and base type.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>path</code> (<code>string</code>):   The path to the Lua file.</p> </li> <li> <p><code>baseID</code> (<code>string</code>):   The base ID of the item.</p> </li> <li> <p><code>isBaseItem</code> (<code>bool</code>):   Indicates whether the item is a base item.</p> </li> </ul> <p>Usage Example: <pre><code>-- Load a base item\nlia.item.load(\"path/to/sh_base_medkit.lua\", nil, true)\n\n-- Load a derived item\nlia.item.load(\"path/to/sh_health_potion.lua\", \"base_medkit\", false)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemisitem","title":"lia.item.isItem","text":"<p>Description: Checks if a given object is recognized as an item within the framework.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>object</code> (<code>table</code>):   The object to check.</li> </ul> <p>Returns: <code>bool</code> - <code>true</code> if the object is an item, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>local obj = someObject\nif lia.item.isItem(obj) then\n    print(\"Object is a valid item.\")\nelse\n    print(\"Object is not an item.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemregister","title":"lia.item.register","text":"<p>Description: Registers a new item within the framework. This function ensures that the item is properly integrated, adhering to its base type and defined structure.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>uniqueID</code> (<code>string</code>):   The unique ID of the item.</p> </li> <li> <p><code>baseID</code> (<code>string</code>):   The base ID of the item.</p> </li> <li> <p><code>isBaseItem</code> (<code>bool</code>):   Indicates if the item is a base item.</p> </li> <li> <p><code>path</code> (<code>string</code>):   The file path of the item.</p> </li> <li> <p><code>luaGenerated</code> (<code>bool</code>):   Indicates if the item is Lua-generated.</p> </li> </ul> <p>Returns: <code>table</code> - The registered item table.</p> <p>Usage Example: <pre><code>-- Register a new item\nlocal newItem = lia.item.register(\"health_potion\", \"base_medkit\", false, \"path/to/sh_health_potion.lua\")\nprint(\"Registered Item:\", newItem.name)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemloadfromdir","title":"lia.item.loadFromDir","text":"<p>Description: Loads items from a specified directory. It first loads base items, then derived items, ensuring that all items are registered correctly.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>directory</code> (<code>string</code>):   The directory path containing the item Lua files.</li> </ul> <p>Usage Example: <pre><code>-- Load all items from the items directory\nlia.item.loadFromDir(\"lilia/gamemode/items\")\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemnew","title":"lia.item.new","text":"<p>Description: Creates a new item instance based on its unique ID and assigns it a specific ID within the framework.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>uniqueID</code> (<code>string</code>):   The unique ID of the item.</p> </li> <li> <p><code>id</code> (<code>number</code>):   The ID of the item instance.</p> </li> </ul> <p>Returns: <code>table</code> - The new item instance.</p> <p>Usage Example: <pre><code>-- Create a new item instance\nlocal item = lia.item.new(\"health_potion\", 101)\nprint(\"New Item ID:\", item.id)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemregisterinv","title":"lia.item.registerInv","text":"<p>Description: Registers a new inventory type with specified dimensions. This function extends the <code>GridInv</code> metatable to include custom inventory types.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>invType</code> (<code>string</code>):   The inventory type identifier.</p> </li> <li> <p><code>w</code> (<code>number</code>):   The width of the inventory.</p> </li> <li> <p><code>h</code> (<code>number</code>):   The height of the inventory.</p> </li> </ul> <p>Usage Example: <pre><code>-- Register a new inventory type \"backpack\" with dimensions 4x4\nlia.item.registerInv(\"backpack\", 4, 4)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemnewinv","title":"lia.item.newInv","text":"<p>Description: Creates a new inventory instance for a specified owner and inventory type. This function initializes the inventory and syncs it with the owner if applicable.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>owner</code> (<code>number</code>):   The owner (character ID) of the inventory.</p> </li> <li> <p><code>invType</code> (<code>string</code>):   The inventory type identifier.</p> </li> <li> <p><code>callback</code> (<code>function</code>):   The callback function to execute after the inventory is created.</p> </li> </ul> <p>Usage Example: <pre><code>-- Create a new backpack inventory for character ID 5\nlia.item.newInv(5, \"backpack\", function(inventory)\n    print(\"New Backpack Inventory Created with ID:\", inventory.id)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemgetinv","title":"lia.item.getInv","text":"<p>Description: Retrieves an inventory by its ID.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>invID</code> (<code>number</code>):   The ID of the inventory.</li> </ul> <p>Returns: <code>table|nil</code> - The inventory object if found, otherwise <code>nil</code>.</p> <p>Usage Example: <pre><code>local inventory = lia.item.getInv(10)\nif inventory then\n    print(\"Inventory Type:\", inventory.invType)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemcreateinv","title":"lia.item.createInv","text":"<p>Description: Creates a new inventory instance with specified dimensions and assigns it a unique ID.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>w</code> (<code>number</code>):   The width of the inventory.</p> </li> <li> <p><code>h</code> (<code>number</code>):   The height of the inventory.</p> </li> <li> <p><code>id</code> (<code>number</code>):   The unique ID to assign to the inventory.</p> </li> </ul> <p>Returns: <code>table</code> - The new inventory instance.</p> <p>Usage Example: <pre><code>-- Create a new 5x5 inventory with ID 20\nlocal newInventory = lia.item.createInv(5, 5, 20)\nprint(\"Created Inventory ID:\", newInventory.id)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemsetitemdatabyid-server-only","title":"lia.item.setItemDataByID (Server Only)","text":"<p>Description: Sets the data of an item by its ID. This function updates specific data fields of an item and optionally notifies receivers or skips saving to the database.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>itemID</code> (<code>number</code>):   The ID of the item instance.</p> </li> <li> <p><code>key</code> (<code>string</code>):   The data key to set.</p> </li> <li> <p><code>value</code> (<code>any</code>):   The value to assign to the data key.</p> </li> <li> <p><code>receivers</code> (<code>table</code>, optional):   A table of receivers for network updates.</p> </li> <li> <p><code>noSave</code> (<code>bool</code>, optional):   If <code>true</code>, skips saving the data to the database.</p> </li> <li> <p><code>noCheckEntity</code> (<code>bool</code>, optional):   If <code>true</code>, skips entity checks.</p> </li> </ul> <p>Returns: <code>bool, string|nil</code> - <code>true</code> if successful, otherwise <code>false</code> and an error message.</p> <p>Usage Example: <pre><code>-- Set the \"description\" data field of item ID 42\nlocal success, err = lia.item.setItemDataByID(42, \"description\", \"A shiny health potion.\")\nif success then\n    print(\"Item data updated successfully.\")\nelse\n    print(\"Error updating item data:\", err)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaiteminstance-server-only","title":"lia.item.instance (Server Only)","text":"<p>Description: Instantiates an item and adds it to an inventory. This function handles the creation of item instances, assigns them to inventories, and manages their placement within the inventory grid.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>index</code> (<code>number|string</code>):   The inventory index or unique ID.</p> </li> <li> <p><code>uniqueID</code> (<code>string</code>):   The unique ID of the item.</p> </li> <li> <p><code>itemData</code> (<code>table</code>):   The item data.</p> </li> <li> <p><code>x</code> (<code>number</code>):   The x-coordinate within the inventory grid.</p> </li> <li> <p><code>y</code> (<code>number</code>):   The y-coordinate within the inventory grid.</p> </li> <li> <p><code>callback</code> (<code>function</code>):   The callback function to execute after instantiation.</p> </li> </ul> <p>Returns: <code>table</code> - A deferred promise that resolves with the instantiated item.</p> <p>Usage Example: <pre><code>-- Instantiate a health potion in inventory ID 5 at position (2,3)\nlia.item.instance(5, \"health_potion\", {quantity = 10}, 2, 3, function(item)\n    print(\"Instantiated Item ID:\", item.id)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemdeletebyid-server-only","title":"lia.item.deleteByID (Server Only)","text":"<p>Description: Deletes an item by its ID from both the database and the cache. This function ensures that items are properly removed, freeing up resources and maintaining database integrity.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>id</code> (<code>number</code>):   The ID of the item to delete.</li> </ul> <p>Usage Example: <pre><code>-- Delete item with ID 15\nlia.item.deleteByID(15)\nprint(\"Item 15 has been deleted.\")\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemloaditembyid-server-only","title":"lia.item.loadItemByID (Server Only)","text":"<p>Description: Loads an item by its ID from the database and instantiates it within the framework. This function is used to restore items that exist in the database but are not currently loaded into memory.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>itemIndex</code> (<code>number|table</code>):   The item ID or a table of item IDs to load.</li> </ul> <p>Usage Example: <pre><code>-- Load a single item by ID\nlia.item.loadItemByID(42)\n\n-- Load multiple items by IDs\nlia.item.loadItemByID({43, 44, 45})\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemspawn-server-only","title":"lia.item.spawn (Server Only)","text":"<p>Description: Instances and spawns a given item type in the game world. This function creates an item instance, assigns it to a position and angle in the world, and optionally executes a callback upon creation.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>uniqueID</code> (<code>string</code>):   Unique ID of the item.</p> </li> <li> <p><code>position</code> (<code>Vector</code>):   The position where the item's entity will be spawned.</p> </li> <li> <p><code>callback</code> (<code>function</code>, optional):   Function to call when the item entity is created.</p> </li> <li> <p><code>angles</code> (<code>Angle</code>, optional, default <code>Angle(0,0,0)</code>):   The angles at which the item's entity will spawn.</p> </li> <li> <p><code>data</code> (<code>table</code>, optional):   Additional data for this item instance.</p> </li> </ul> <p>Returns: <code>table</code> - A deferred promise that resolves with the spawned item and its entity.</p> <p>Usage Example: <pre><code>-- Spawn a health potion at a specific position\nlia.item.spawn(\"health_potion\", Vector(0, 0, 100), function(item, entity)\n    print(\"Spawned Item ID:\", item.id, \"at Entity:\", entity)\nend, Angle(0, 0, 0), {quantity = 5})\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitemrestoreinv-server-only","title":"lia.item.restoreInv (Server Only)","text":"<p>Description: Restores an inventory with specified dimensions. This function is used to reset or modify the dimensions of an existing inventory, ensuring that it aligns with the desired configuration.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>invID</code> (<code>number</code>):   The ID of the inventory to restore.</p> </li> <li> <p><code>w</code> (<code>number</code>):   The new width of the inventory.</p> </li> <li> <p><code>h</code> (<code>number</code>):   The new height of the inventory.</p> </li> <li> <p><code>callback</code> (<code>function</code>):   The callback function to execute after restoration.</p> </li> </ul> <p>Usage Example: <pre><code>-- Restore inventory ID 10 to dimensions 6x6\nlia.item.restoreInv(10, 6, 6, function(inventory)\n    print(\"Inventory 10 has been restored to 6x6.\")\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#variables","title":"Variables","text":""},{"location":"framework/libraries/lia.item/#liaitemlist","title":"lia.item.list","text":"<p>Description: A table that stores all registered items. Each key is the item's unique identifier, and the value is the item's definition table. This allows for easy retrieval and management of items based on their unique IDs.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Access the \"health_potion\" item\nlocal healthPotion = lia.item.list[\"health_potion\"]\nprint(\"Health Potion Description:\", healthPotion.desc)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaitembase","title":"lia.item.base","text":"<p>Description: A table that stores base item definitions. Base items serve as templates for derived items, providing common properties and functionalities that can be extended or overridden.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Access the base_medkit item\nlocal baseMedkit = lia.item.base[\"base_medkit\"]\nprint(\"Base Medkit Description:\", baseMedkit.desc)\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaiteminstances","title":"lia.item.instances","text":"<p>Description: A table that maps item IDs to their corresponding item instances. This cache allows for efficient access to items without repeatedly querying the database, enhancing performance and reducing latency.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Access item instance with ID 42\nlocal item = lia.item.instances[42]\nif item then\n    print(\"Item ID 42:\", item.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaiteminventories","title":"lia.item.inventories","text":"<p>Description: A reference to <code>lia.inventory.instances</code>, linking item inventories to their corresponding instances. This association facilitates efficient inventory management and item placement within inventories.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Access all inventory instances\nfor invID, inventory in pairs(lia.item.inventories) do\n    print(\"Inventory ID:\", invID, \"Type:\", inventory.invType)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.item/#liaiteminventorytypes","title":"lia.item.inventoryTypes","text":"<p>Description: A table that stores all registered inventory types related to items. Each key is the inventory type identifier, and the value contains configuration and behavior definitions for that inventory type.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Access the \"backpack\" inventory type\nlocal backpackType = lia.item.inventoryTypes[\"backpack\"]\nprint(\"Backpack Inventory Width:\", backpackType:getWidth())\n</code></pre></p> <p>--</p>"},{"location":"framework/libraries/lia.languages/","title":"lia.lang","text":"<p>Multi-language phrase support.</p> <p>The <code>lia.lang</code> library provides robust support for multiple languages within the Lilia Framework. It allows developers to load, manage, and retrieve localized phrases, enabling seamless integration of multi-language features in schemas, plugins, and other components. By leveraging this system, developers can ensure that their applications cater to a diverse audience, enhancing user experience through dynamic language support.</p>"},{"location":"framework/libraries/lia.languages/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.languages/#lialangloadfromdir","title":"lia.lang.loadFromDir","text":"<p>Description: Loads language files from a specified directory. It processes each Lua file within the directory, extracting language names and their corresponding phrases. The function ensures that all phrases are correctly stored and accessible for localization purposes.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>directory</code> (<code>string</code>):   The directory path from which to load language files.</li> </ul> <p>Usage Example: <pre><code>-- Load all language files from the specified directory\nlia.lang.loadFromDir(\"lilia/gamemode/languages\")\n</code></pre></p>"},{"location":"framework/libraries/lia.languages/#lialangaddtable","title":"lia.lang.AddTable","text":"<p>Description: Adds a table of phrases to a specified language. This function merges the provided phrases into the existing language table, allowing for dynamic updates and additions to language support.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>name</code> (<code>string</code>):   The name of the language to add the phrases to.</p> </li> <li> <p><code>tbl</code> (<code>table</code>):   A table containing key-value pairs where the key is the phrase ID and the value is the translated string.</p> </li> </ul> <p>Usage Example: <pre><code>-- Add new phrases to the French language\nlia.lang.AddTable(\"french\", {\n    welcomeMessage = \"Bienvenue dans le jeu!\",\n    gameOver = \"Fin du jeu! Vous avez gagn\u00e9!\",\n    victory = \"%s a remport\u00e9 la victoire!\",\n})\n</code></pre></p>"},{"location":"framework/libraries/lia.log/","title":"lia.log","text":"<p>Logging helper functions.</p> <p>The <code>lia.log</code> library provides robust logging capabilities within the Lilia Framework. It allows developers to categorize, format, and manage log messages efficiently on the server side. By leveraging this system, developers can maintain organized logs for various events, enhancing debugging and administrative oversight.</p>"},{"location":"framework/libraries/lia.log/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.log/#lialogloadtables","title":"lia.log.loadTables","text":"<p>Description: Creates directories for storing logs. This internal server function ensures that the necessary directory structure exists for log storage.</p> <p>Realm: <code>Server</code></p> <p>Internal: This function is intended for internal use and should not be called directly.</p>"},{"location":"framework/libraries/lia.log/#lialogaddtype","title":"lia.log.addType","text":"<p>Description: Adds a new log type to the logging system. This function registers a log category with a specific formatting callback and optional color.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>logType</code> (<code>string</code>):   Log category identifier.</p> </li> <li> <p><code>func</code> (<code>function</code>):   Callback function to format the log string. Signature: <code>func(client, ...)</code></p> </li> <li> <p><code>category</code> (<code>string</code>):   Human-readable category name for the log.</p> </li> <li> <p><code>color</code> (<code>Color</code>, optional):   Color associated with the log category. Defaults to <code>Color(52, 152, 219)</code> if not provided.</p> </li> </ul> <p>Usage Example: <pre><code>-- Define a new log type \"playerJoin\"\nlia.log.addType(\"playerJoin\", function(client, playerName)\n    return playerName .. \" has joined the game.\"\nend, \"Player Join\", Color(46, 204, 113))\n</code></pre></p>"},{"location":"framework/libraries/lia.log/#lialoggetstring","title":"lia.log.getString","text":"<p>Description: Retrieves a formatted log string based on the specified log type and additional arguments. This internal server function processes the log formatting callback associated with the log type.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>client</code> (<code>Player</code>):   The player entity associated with the log.</p> </li> <li> <p><code>logType</code> (<code>string</code>):   The type of log to generate.</p> </li> <li> <p><code>...</code> (<code>any</code>):   Additional arguments to pass to the log generation function.</p> </li> </ul> <p>Returns: <code>string, string, Color|nil</code> Returns the formatted log string, its category, and color. If the log type is invalid, returns <code>nil</code>.</p> <p>Usage Example: <pre><code>local logString, category, color = lia.log.getString(client, \"playerJoin\", \"Alice\")\nprint(logString)  -- Output: \"Alice has joined the game.\"\n</code></pre></p>"},{"location":"framework/libraries/lia.log/#lialogadd","title":"lia.log.add","text":"<p>Description: Adds a log message to the logging system. It formats the log based on its type and appends it to the corresponding log file. Additionally, it triggers the <code>OnServerLog</code> hook for further processing.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>client</code> (<code>Player</code>):   The player entity who instigated the log.</p> </li> <li> <p><code>logType</code> (<code>string</code>):   The category of the log.</p> </li> <li> <p><code>...</code> (<code>any</code>):   Arguments to pass to the log formatting function.</p> </li> </ul> <p>Usage Example: <pre><code>-- Log a player joining the game\nlia.log.add(player, \"playerJoin\", player:GetName())\n</code></pre></p>"},{"location":"framework/libraries/lia.log/#lialogsend","title":"lia.log.send","text":"<p>Description: Sends a log message to a specified client. This function transmits the log string using the <code>liaLogStream</code> network message.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>client</code> (<code>Player</code>):   The client to whom the log message will be sent.</p> </li> <li> <p><code>logString</code> (<code>string</code>):   The log message to be sent.</p> </li> </ul> <p>Usage Example: <pre><code>-- Send a custom log message to a client\nlia.log.send(targetPlayer, \"You have received a special item!\")\n</code></pre></p>"},{"location":"framework/libraries/lia.math/","title":"lia.math","text":"<p>Various useful mathematical functions.</p> <p>The <code>lia.math</code> library provides a collection of utility functions for performing common mathematical operations within the Lilia Framework. These functions facilitate unit conversions, probability checks, value biasing and gaining, value approaching, range checking, angle clamping, and value remapping. By utilizing these utilities, developers can streamline mathematical computations and enhance the functionality of their schemas and plugins.</p>"},{"location":"framework/libraries/lia.math/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.math/#liamathunitstoinches","title":"lia.math.UnitsToInches","text":"<p>Description: Converts units to inches.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>units</code> (<code>number</code>):   The units to convert.</li> </ul> <p>Returns: <code>number</code> - The equivalent measurement in inches.</p> <p>Usage Example: <pre><code>local inches = lia.math.UnitsToInches(10)\nprint(\"10 units is equal to\", inches, \"inches.\")\n-- Output: 10 units is equal to 7.5 inches.\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathunitstocentimeters","title":"lia.math.UnitsToCentimeters","text":"<p>Description: Converts units to centimeters.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>units</code> (<code>number</code>):   The units to convert.</li> </ul> <p>Returns: <code>number</code> - The equivalent measurement in centimeters.</p> <p>Usage Example: <pre><code>local centimeters = lia.math.UnitsToCentimeters(10)\nprint(\"10 units is equal to\", centimeters, \"centimeters.\")\n-- Output: 10 units is equal to 19.05 centimeters.\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathunitstometers","title":"lia.math.UnitsToMeters","text":"<p>Description: Converts units to meters.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>units</code> (<code>number</code>):   The units to convert.</li> </ul> <p>Returns: <code>number</code> - The equivalent measurement in meters.</p> <p>Usage Example: <pre><code>local meters = lia.math.UnitsToMeters(10)\nprint(\"10 units is equal to\", meters, \"meters.\")\n-- Output: 10 units is equal to 0.1905 meters.\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathchance","title":"lia.math.chance","text":"<p>Description: Determines success based on a given probability.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>chance</code> (<code>number</code>):   The probability of success in percentage.</li> </ul> <p>Returns: <code>bool</code> - <code>True</code> if the chance is successful, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>if lia.math.chance(25) then\n    print(\"Success!\")\nelse\n    print(\"Failure!\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathbias","title":"lia.math.Bias","text":"<p>Description: Applies a bias to a value based on a specified amount.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>x</code> (<code>number</code>):   The value to bias.</p> </li> <li> <p><code>amount</code> (<code>number</code>):   The bias amount.</p> </li> </ul> <p>Returns: <code>number</code> - The biased value.</p> <p>Usage Example: <pre><code>local biasedValue = lia.math.Bias(2, 0.5)\nprint(\"Biased Value:\", biasedValue)\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathgain","title":"lia.math.Gain","text":"<p>Description: Applies a gain to a value based on a specified amount.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>x</code> (<code>number</code>):   The value to apply gain to.</p> </li> <li> <p><code>amount</code> (<code>number</code>):   The gain amount.</p> </li> </ul> <p>Returns: <code>number</code> - The value with applied gain.</p> <p>Usage Example: <pre><code>local gainedValue = lia.math.Gain(0.3, 0.7)\nprint(\"Gained Value:\", gainedValue)\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathapproachspeed","title":"lia.math.ApproachSpeed","text":"<p>Description: Approaches a value towards a target value at a specified speed.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>start</code> (<code>number</code>):   The starting value.</p> </li> <li> <p><code>dest</code> (<code>number</code>):   The target value.</p> </li> <li> <p><code>speed</code> (<code>number</code>):   The speed at which to approach the target.</p> </li> </ul> <p>Returns: <code>number</code> - The approached value.</p> <p>Usage Example: <pre><code>local newValue = lia.math.ApproachSpeed(10, 20, 2)\nprint(\"Approached Value:\", newValue)\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathapproachvectorspeed","title":"lia.math.ApproachVectorSpeed","text":"<p>Description: Approaches a vector towards a target vector at a specified speed.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>start</code> (<code>Vector</code>):   The starting vector.</p> </li> <li> <p><code>dest</code> (<code>Vector</code>):   The target vector.</p> </li> <li> <p><code>speed</code> (<code>number</code>):   The speed at which to approach the target.</p> </li> </ul> <p>Returns: <code>Vector</code> - The approached vector.</p> <p>Usage Example: <pre><code>local newVector = lia.math.ApproachVectorSpeed(Vector(0, 0, 0), Vector(10, 10, 10), 5)\nprint(\"Approached Vector:\", newVector)\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathapproachanglespeed","title":"lia.math.ApproachAngleSpeed","text":"<p>Description: Approaches an angle towards a target angle at a specified speed.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>start</code> (<code>Angle</code>):   The starting angle.</p> </li> <li> <p><code>dest</code> (<code>Angle</code>):   The target angle.</p> </li> <li> <p><code>speed</code> (<code>number</code>):   The speed at which to approach the target.</p> </li> </ul> <p>Returns: <code>Angle</code> - The approached angle.</p> <p>Usage Example: <pre><code>local newAngle = lia.math.ApproachAngleSpeed(Angle(0, 0, 0), Angle(90, 90, 90), 10)\nprint(\"Approached Angle:\", newAngle)\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathinrange","title":"lia.math.InRange","text":"<p>Description: Checks if a value is within a specified range.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>val</code> (<code>number</code>):   The value to check.</p> </li> <li> <p><code>min</code> (<code>number</code>):   The minimum value of the range.</p> </li> <li> <p><code>max</code> (<code>number</code>):   The maximum value of the range.</p> </li> </ul> <p>Returns: <code>bool</code> - <code>True</code> if the value is within the range, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>if lia.math.InRange(5, 1, 10) then\n    print(\"Value is within range.\")\nelse\n    print(\"Value is out of range.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathclampangle","title":"lia.math.ClampAngle","text":"<p>Description: Clamps an angle to a specified range.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>val</code> (<code>Angle</code>):   The angle to clamp.</p> </li> <li> <p><code>min</code> (<code>Angle</code>):   The minimum angle of the range.</p> </li> <li> <p><code>max</code> (<code>Angle</code>):   The maximum angle of the range.</p> </li> </ul> <p>Returns: <code>Angle</code> - The clamped angle.</p> <p>Usage Example: <pre><code>local clampedAngle = lia.math.ClampAngle(Angle(100, 200, 300), Angle(0, 0, 0), Angle(90, 180, 270))\nprint(\"Clamped Angle:\", clampedAngle)\n</code></pre></p>"},{"location":"framework/libraries/lia.math/#liamathclampedremap","title":"lia.math.ClampedRemap","text":"<p>Description: Remaps a value from one range to another and clamps it.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>val</code> (<code>number</code>):   The value to remap.</p> </li> <li> <p><code>frommin</code> (<code>number</code>):   The minimum value of the original range.</p> </li> <li> <p><code>frommax</code> (<code>number</code>):   The maximum value of the original range.</p> </li> <li> <p><code>tomin</code> (<code>number</code>):   The minimum value of the target range.</p> </li> <li> <p><code>tomax</code> (<code>number</code>):   The maximum value of the target range.</p> </li> </ul> <p>Returns: <code>number</code> - The remapped and clamped value.</p> <p>Usage Example: <pre><code>local remappedValue = lia.math.ClampedRemap(50, 0, 100, 0, 1)\nprint(\"Remapped Value:\", remappedValue)\n</code></pre></p>"},{"location":"framework/libraries/lia/","title":"lia","text":"<p>Top-level library containing all Lilia libraries.</p> <p>The <code>lia</code> library serves as the core container for all other libraries within the Lilia Framework. It provides essential functions for including and managing Lua files across different realms (server, client, and shared). This library ensures that all necessary components are correctly loaded and accessible, maintaining the integrity and functionality of the framework. By organizing the framework into modular libraries, <code>lia</code> facilitates easier maintenance, scalability, and customization of your game or application.</p> <p>NOTE: Ensure that all file paths and realms are correctly specified when using inclusion functions to prevent loading issues. Properly managing realms is crucial for maintaining server-client synchronization and optimizing performance.</p>"},{"location":"framework/libraries/lia/#liainclude","title":"lia.include","text":"<p>Description: Includes a Lua file into the specified realm (<code>server</code>, <code>client</code>, or <code>shared</code>). This function determines the appropriate realm based on the provided <code>state</code>, the file's prefix (<code>sv_</code>, <code>cl_</code>, <code>sh_</code>), or its directory structure. It ensures that server-side files are only executed on the server, client-side files on the client, and shared files on both.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>fileName</code> (<code>string</code>):   The path to the Lua file to be included. Ensure that the path is relative to the Lua directory.</p> </li> <li> <p><code>state</code> (<code>string</code>):   The realm in which the Lua file should be included. Acceptable values are <code>\"server\"</code>, <code>\"client\"</code>, or <code>\"shared\"</code>. The function also infers the realm based on file naming conventions (<code>sv_</code> for server, <code>cl_</code> for client, <code>sh_</code> for shared) and the directory structure.</p> </li> </ul> <p>Returns: If the Lua file is included on the server and the state is <code>\"server\"</code>, it returns the included file. Otherwise, there is no return value.</p> <p>Usage Example: <pre><code>-- Include a shared library\nlia.include(\"lilia/gamemode/core/libraries/util.lua\", \"shared\")\n\n-- Include a server-side script\nlia.include(\"lilia/gamemode/core/hooks/server.lua\", \"server\")\n\n-- Include a client-side script\nlia.include(\"lilia/gamemode/core/libraries/menu.lua\", \"client\")\n</code></pre></p> <p>Legacy Alias: <code>lia.util.include</code> can be used interchangeably with <code>lia.include</code>.</p>"},{"location":"framework/libraries/lia/#liaincludedir","title":"lia.includeDir","text":"<p>Description: Includes all Lua files from a specified directory into the designated realm. This function supports recursive inclusion, allowing for nested directories to be processed. It ensures that each Lua file is correctly loaded into the appropriate realm based on its location and naming conventions.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>directory</code> (<code>string</code>):   The path to the directory containing the Lua files to be included.</p> </li> <li> <p><code>fromLua</code> (<code>bool</code>):   Specifies if the Lua files are located directly within the <code>lua/</code> folder. Set to <code>true</code> if files are within <code>lua/</code>, otherwise <code>false</code>.</p> </li> <li> <p><code>recursive</code> (<code>bool</code>):   Determines whether subdirectories should be included recursively. Set to <code>true</code> to include all nested directories, or <code>false</code> to include only the top-level files.</p> </li> <li> <p><code>realm</code> (<code>string</code>):   The realm in which the Lua files should be included. Acceptable values are <code>\"server\"</code>, <code>\"client\"</code>, or <code>\"shared\"</code>.</p> </li> </ul> <p>Usage Example: <pre><code>-- Include all shared libraries from the core libraries directory recursively\nlia.includeDir(\"core/libraries\", false, true, \"shared\")\n\n-- Include all client-side libraries from the client directory without recursion\nlia.includeDir(\"core/libraries/client\", true, false, \"client\")\n</code></pre></p> <p>Legacy Alias: <code>lia.util.includeDir</code> can be used interchangeably with <code>lia.includeDir</code>.</p>"},{"location":"framework/libraries/lia/#liaincludeentities","title":"lia.includeEntities","text":"<p>Description: Dynamically loads Lua files for entities, weapons, tools, and effects into the appropriate realm of a Garry's Mod Lua project. This function iterates through a specified directory and its subdirectories, including Lua files for entities, weapons, tools, and effects into the server, client, or shared realms as needed. It automatically registers the entities, weapons, tools, and effects in the correct context (server, client, or shared).</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>path</code> (<code>string</code>):   The directory containing the Lua files to be included. Typically points to the <code>entities</code>, <code>weapons</code>, <code>tools</code>, or <code>effects</code> directories within the gamemode.</li> </ul> <p>Usage Example: <pre><code>-- Include all entity-related Lua files\nlia.includeEntities(\"lilia/gamemode/entities\")\n\n-- Include all weapon-related Lua files\nlia.includeEntities(\"lilia/gamemode/weapons\")\n\n-- Include all tool-related Lua files\nlia.includeEntities(\"lilia/gamemode/tools\")\n\n-- Include all effect-related Lua files\nlia.includeEntities(\"lilia/gamemode/effects\")\n</code></pre></p> <p>Legacy Alias: <code>lia.util.loadEntities</code> can be used interchangeably with <code>lia.includeEntities</code>.</p>"},{"location":"framework/libraries/lia.menu/","title":"lia.menu","text":"<p>Entity menu manipulation.</p> <p>The <code>lia.menu</code> library allows you to open a context menu with arbitrary options. When a player selects an option from the menu, the corresponding callback function is executed. This facilitates interactive menus for entities, enhancing user experience by providing accessible and dynamic options directly within the game interface.</p>"},{"location":"framework/libraries/lia.menu/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.menu/#liamenuadd","title":"lia.menu.add","text":"<p>Description: Adds a menu with the provided options at a specified position. The menu can be associated with a world position or an entity. An optional callback can be executed when the menu is removed.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>options</code> (<code>table</code>):   Table containing the menu options. Each key-value pair represents an option identifier and its corresponding action.</p> </li> <li> <p><code>position</code> (<code>Vector|Entity</code>):   Position of the menu. This can be a <code>Vector</code> representing a world position or an <code>Entity</code> to attach the menu to.</p> </li> <li> <p><code>onRemove</code> (<code>function</code>, optional):   Callback function to execute when the menu is removed.</p> </li> </ul> <p>Returns: <code>number</code> - The index of the added menu in the <code>lia.menu.list</code> table.</p> <p>Usage Example: <pre><code>-- Add a context menu with options \"Take\" and \"Drop\" at a specific position\nlia.menu.add({\n    [\"Take\"] = function()\n        -- Code to take the item\n    end,\n    [\"Drop\"] = function()\n        -- Code to drop the item\n    end\n}, Vector(100, 200, 300), function()\n    print(\"Menu has been removed.\")\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.menu/#liamenudrawall","title":"lia.menu.drawAll","text":"<p>Description: Draws all active menus currently on the screen. This function should be called every frame to render the menus based on their positions and states.</p> <p>Realm: <code>Client</code></p> <p>Usage Example: <pre><code>-- Hook the drawAll function to the HUDPaint event\nhook.Add(\"HUDPaint\", \"DrawAllMenus\", function()\n    lia.menu.drawAll()\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.menu/#liamenugetactivemenu","title":"lia.menu.getActiveMenu","text":"<p>Description: Retrieves the index and the chosen option of the active menu, if any. This function checks if the player's cursor is within any active menu and returns the relevant information.</p> <p>Realm: <code>Client</code></p> <p>Returns: <code>number|nil, string|nil</code> Returns the index of the active menu in the <code>lia.menu.list</code> table and the chosen option. If no menu is active, returns <code>nil, nil</code>.</p> <p>Usage Example: <pre><code>-- Check if a menu option was selected\nlocal menuIndex, chosenOption = lia.menu.getActiveMenu()\nif chosenOption then\n    print(\"Selected Option:\", chosenOption)\n    -- Execute the corresponding callback\n    lia.menu.onButtonPressed(menuIndex, function()\n        print(\"Option executed.\")\n    end)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.menu/#liamenuonbuttonpressed","title":"lia.menu.onButtonPressed","text":"<p>Description: Executes a callback function when a menu button is pressed and removes the menu from the active list.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>menu</code> (<code>number</code>):   The index of the menu to remove from the <code>lia.menu.list</code> table.</p> </li> <li> <p><code>callback</code> (<code>function</code>):   The callback function to execute upon button press.</p> </li> </ul> <p>Returns: <code>bool</code> - <code>True</code> if a callback was provided and executed, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>-- Execute a callback when a menu option is pressed\nlia.menu.onButtonPressed(menuIndex, function()\n    print(\"Menu option has been selected and executed.\")\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.module/","title":"lia.module","text":"<p>The <code>lia.module</code> library is responsible for loading, initializing, and managing modules within the Lilia Framework. It handles module dependencies, permissions, workshop content, and integrates various components such as languages, factions, classes, attributes, entities, and items. By utilizing this library, developers can efficiently organize and manage different modules, ensuring seamless integration and functionality across the framework.</p>"},{"location":"framework/libraries/lia.module/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.module/#liamoduleload","title":"lia.module.load","text":"<p>Description: Loads a module into the system. This function handles the inclusion of module files, manages dependencies, registers permissions, and initializes module-specific data.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>uniqueID</code> (<code>string</code>):   The unique identifier of the module.</p> </li> <li> <p><code>path</code> (<code>string</code>):   The file system path to the module.</p> </li> <li> <p><code>isSingleFile</code> (<code>bool</code>):   Specifies if the module is contained in a single file.</p> </li> <li> <p><code>variable</code> (<code>string</code>):   The variable name to assign the module to.</p> </li> <li> <p><code>firstLoad</code> (<code>bool</code>):   Indicates if this is the first load of the module.</p> </li> </ul> <p>Usage Example: <pre><code>-- Load a module with unique ID \"exampleModule\"\nlia.module.load(\"exampleModule\", \"path/to/exampleModule\", false, \"EXAMPLE_MODULE\", true)\n</code></pre></p>"},{"location":"framework/libraries/lia.module/#liamoduleonfinishload","title":"lia.module.OnFinishLoad","text":"<p>Description: Called after a module finishes loading to load its submodules. This internal function ensures that any submodules within a module are properly loaded and initialized.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>path</code> (<code>string</code>):   The file system path to the module.</p> </li> <li> <p><code>firstLoad</code> (<code>bool</code>):   Indicates if this is the first load of the module.</p> </li> </ul> <p>Usage Example: <pre><code>-- This function is typically called internally by lia.module.load\nlia.module.OnFinishLoad(\"path/to/module\", true)\n</code></pre></p>"},{"location":"framework/libraries/lia.module/#liamoduleinitialize","title":"lia.module.initialize","text":"<p>Description: Loads and initializes all modules. This function is typically called during the framework's startup to ensure that all core and schema-specific modules are loaded correctly.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>firstLoad</code> (<code>bool</code>):   Indicates if this is the first load of the modules.</li> </ul> <p>Usage Example: <pre><code>-- Initialize all modules on server start\nlia.module.initialize(true)\n</code></pre></p>"},{"location":"framework/libraries/lia.module/#liamoduleloadfromdir","title":"lia.module.loadFromDir","text":"<p>Description: Loads modules from a specified directory. It handles both single-file modules and multi-file modules, ensuring that all relevant files and subdirectories are included.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>directory</code> (<code>string</code>):   The path to the directory containing modules.</p> </li> <li> <p><code>group</code> (<code>string</code>):   The group of the modules (e.g., \"schema\" or \"module\").</p> </li> <li> <p><code>firstLoad</code> (<code>bool</code>):   Indicates if this is the first load of the modules.</p> </li> </ul> <p>Usage Example: <pre><code>-- Load all modules from the \"utilities\" directory\nlia.module.loadFromDir(\"lilia/modules/utilities\", \"module\", false)\n</code></pre></p>"},{"location":"framework/libraries/lia.module/#liamoduleget","title":"lia.module.get","text":"<p>Description: Retrieves a module by its identifier. This function allows access to the module's properties and functions based on its unique identifier.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>identifier</code> (<code>string</code>):   The identifier of the module.</li> </ul> <p>Returns: <code>table|nil</code> - The module object if found, otherwise <code>nil</code>.</p> <p>Usage Example: <pre><code>-- Retrieve the \"exampleModule\" module\nlocal exampleModule = lia.module.get(\"exampleModule\")\nif exampleModule then\n    print(\"Module Name:\", exampleModule.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.module/#variables","title":"Variables","text":""},{"location":"framework/libraries/lia.module/#liamoduleenabledlist","title":"lia.module.EnabledList","text":"<p>Description: A table that keeps track of enabled modules. Each key corresponds to a module's unique identifier, and the value indicates whether the module is enabled (<code>true</code>) or disabled (<code>false</code>).</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Check if \"exampleModule\" is enabled\nif lia.module.EnabledList[\"exampleModule\"] then\n    print(\"Example Module is enabled.\")\nelse\n    print(\"Example Module is disabled.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.module/#liamodulelist","title":"lia.module.list","text":"<p>Description: A table that stores all loaded modules. Each key is the module's unique identifier, and the value is the module's table containing its properties and functions.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Iterate through all loaded modules\nfor uniqueID, module in pairs(lia.module.list) do\n    print(\"Loaded Module:\", uniqueID, \"Name:\", module.name)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.net/","title":"lia.net","text":"<p>Networking helper functions.</p> <p>The <code>lia.net</code> library provides essential networking utilities within the Lilia Framework. It facilitates the management of global networked variables, ensuring synchronized data between the server and clients. Additionally, it integrates with various game hooks to maintain network integrity and handle events related to entities and characters.</p>"},{"location":"framework/libraries/lia.net/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.net/#lianetsetnetvar","title":"lia.net.setNetVar","text":"<p>Description: Sets the value of a networked global variable. This function updates the global variable and notifies clients of the change, ensuring that all connected clients have the latest value.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>key</code> (<code>string</code>):   The key of the networked global variable.</p> </li> <li> <p><code>value</code> (<code>any</code>):   The value to set for the global variable.</p> </li> <li> <p><code>receiver</code> (<code>Player</code>, optional):   The specific client to receive the network update. If omitted, all clients are notified.</p> </li> </ul> <p>Usage Example: <pre><code>-- Set a global variable \"gameState\" to \"active\" for all clients\nlia.net.setNetVar(\"gameState\", \"active\")\n\n-- Set a global variable \"playerScore\" to 100 for a specific client\nlia.net.setNetVar(\"playerScore\", 100, targetPlayer)\n</code></pre></p>"},{"location":"framework/libraries/lia.net/#lianetgetnetvar","title":"lia.net.getNetVar","text":"<p>Description: Retrieves the value of a networked global variable. If the variable does not exist, it returns the provided default value.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>key</code> (<code>string</code>):   The key of the networked global variable.</p> </li> <li> <p><code>default</code> (<code>any</code>):   The default value to return if the variable is not found.</p> </li> </ul> <p>Returns: <code>any</code> - The value of the networked global variable, or the default value if not found.</p> <p>Usage Example: <pre><code>-- Get the current game state, defaulting to \"inactive\" if not set\nlocal currentState = lia.net.getNetVar(\"gameState\", \"inactive\")\nprint(\"Current Game State:\", currentState)\n</code></pre></p>"},{"location":"framework/libraries/lia.net/#lianetcheckbadtype","title":"lia.net.checkBadType","text":"<p>Description: Checks if the provided object or any of its nested elements contain an unsupported type. This internal function ensures that only valid data types are used for networked variables, preventing potential runtime errors.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>name</code> (<code>string</code>):   The name of the networked variable being checked.</p> </li> <li> <p><code>object</code> (<code>any</code>):   The object to be checked for unsupported types.</p> </li> </ul> <p>Returns: <code>bool</code> - <code>True</code> if a bad type is found, <code>false</code> otherwise.</p> <p>Internal: This function is intended for internal use and should not be called directly.</p> <p>Usage Example: <pre><code>-- Internal usage within lia.net\nlocal hasBadType = lia.net.checkBadType(\"playerData\", someObject)\nif hasBadType then\n    print(\"Invalid data type detected for playerData.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.notice/","title":"lia.notices","text":"<p>Logging and Notification System</p> <p>The <code>lia.notices</code> library provides a comprehensive system for managing notifications within the Lilia Framework. It allows developers to create, organize, and display various types of notices to players, enhancing user experience through timely and categorized information delivery.</p>"},{"location":"framework/libraries/lia.notice/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.notice/#lianoticesnotifyall","title":"lia.notices.notifyAll","text":"<p>Description: Sends a notification message to all connected players. This function is useful for broadcasting important messages or announcements that should be visible to every player in the game.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li><code>msg</code> (<code>string</code>):   The message to send to all players.</li> </ul> <p>Usage Example: <pre><code>-- Broadcast a server-wide announcement\nlia.notices.notifyAll(\"The server will undergo maintenance in 10 minutes.\")\n</code></pre></p>"},{"location":"framework/libraries/lia.notice/#lianoticesnotify","title":"lia.notices.notify","text":"<p>Description: Displays a notification message to a specific player or broadcasts it to all players. On the server side, it sends the message via the network to the intended recipients. On the client side, it creates a visual notice panel on the player's screen.</p> <p>Realm: - <code>Server</code> - <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>message</code> (<code>string</code>):   The message to be notified.</p> </li> <li> <p><code>recipient</code> (<code>Player</code>, optional server side):   The specific player to receive the notification. If omitted, the message is sent to all players.</p> </li> </ul> <p>Usage Example: <pre><code>-- Notify a specific player\nlia.notices.notify(\"You have received a new item!\", targetPlayer)\n\n-- Broadcast a message to all players\nlia.notices.notify(\"A new event has started!\", nil)\n</code></pre></p> <p>Usage Example: <pre><code>-- Display a notification on the client's screen\nlia.notices.notify(\"Welcome to the server!\", true)\n</code></pre></p>"},{"location":"framework/libraries/lia.notice/#lianoticesnotifylocalized","title":"lia.notices.notifyLocalized","text":"<p>Description: Displays a localized notification message to a specific player or broadcasts it to all players. This function leverages the localization system to ensure messages are presented in the player's selected language.</p> <p>Realm: - <code>Server</code> - <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>message</code> (<code>string</code>):   The localized message identifier to be notified.</p> </li> <li> <p><code>recipient</code> (<code>Player</code>, optional server side):   The specific player to receive the notification. If omitted, the message is sent to all players.</p> </li> <li> <p><code>...</code> (<code>any</code>, optional):   Additional parameters for string formatting within the localized message.</p> </li> </ul> <p>Usage Example: <pre><code>-- Notify a player with a formatted localized message\nlia.notices.notifyLocalized(\"welcomeMessage\", targetPlayer, \"Alice\")\n\n-- Broadcast a localized victory message to all players\nlia.notices.notifyLocalized(\"victory\", nil, \"Bob\")\n</code></pre></p> <p>Usage Example: <pre><code>-- Display a localized notification on the client's screen\nlia.notices.notifyLocalized(\"achievementUnlocked\", true, \"First Blood\")\n</code></pre></p>"},{"location":"framework/libraries/lia.string/","title":"lia.string","text":""},{"location":"framework/libraries/lia.string/#various-useful-string-related-functions","title":"Various useful string-related functions.","text":"<p>The <code>lia.string</code> library provides a collection of utility functions for performing common string operations within the Lilia Framework. These functions facilitate tasks such as case conversion with special character handling, random string generation, string quoting, reversal, capitalization, number formatting, digit-to-string conversion, string cleaning, and introducing gibberish into strings. By utilizing these utilities, developers can streamline string manipulations and enhance the functionality of their schemas and plugins.</p>"},{"location":"framework/libraries/lia.string/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.string/#liastringlower","title":"lia.string.lower","text":"<p>Description: Converts all uppercase letters in a string to lowercase, including special characters. This function ensures that UTF-8 text characters are handled correctly during the conversion.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>str</code> (<code>string</code>):   The string to convert.</li> </ul> <p>Returns: <code>string</code> - The string with all letters converted to lowercase.</p> <p>Usage Example: <pre><code>local originalStr = \"HELLO WORLD!\"\nlocal lowerStr = lia.string.lower(originalStr)\nprint(lowerStr)\n-- Output: \"hello world!\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringupper","title":"lia.string.upper","text":"<p>Description: Converts all lowercase letters in a string to uppercase, including special characters. This function ensures that UTF-8 text characters are handled correctly during the conversion.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>str</code> (<code>string</code>):   The string to convert.</li> </ul> <p>Returns: <code>string</code> - The string with all letters converted to uppercase.</p> <p>Usage Example: <pre><code>local originalStr = \"hello world!\"\nlocal upperStr = lia.string.upper(originalStr)\nprint(upperStr)\n-- Output: \"HELLO WORLD!\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringgeneraterandom","title":"lia.string.generateRandom","text":"<p>Description: Generates a random string of a given length using uppercase letters, lowercase letters, and numbers. This function is useful for creating random identifiers, passwords, or tokens.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>length</code> (<code>number</code>, optional):   The length of the random string to generate. Defaults to <code>16</code> if not provided.</li> </ul> <p>Returns: <code>string</code> - The generated random string.</p> <p>Usage Example: <pre><code>local randomStr = lia.string.generateRandom(12)\nprint(randomStr)\n-- Output: e.g., \"A1b2C3d4E5f6\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringquote","title":"lia.string.quote","text":"<p>Description: Safely quotes a string by escaping backslashes and double quotes, then wrapping the entire string in double quotes. This function ensures that the string is properly escaped, preventing potential syntax errors or injection vulnerabilities.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>str</code> (<code>string</code>):   The string to quote.</li> </ul> <p>Returns: <code>string</code> - The quoted and escaped string.</p> <p>Usage Example: <pre><code>local unsafeStr = 'He said, \"Hello, World!\"'\nlocal safeStr = lia.string.quote(unsafeStr)\nprint(safeStr)\n-- Output: \"\\\"He said, \\\\\\\"Hello, World!\\\\\\\"\\\"\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringreverse","title":"lia.string.reverse","text":"<p>Description: Reverses the characters in a string, including special characters. This function ensures that UTF-8 text characters are handled correctly during the reversal process.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>str</code> (<code>string</code>):   The string to reverse.</li> </ul> <p>Returns: <code>string</code> - The reversed string.</p> <p>Usage Example: <pre><code>local originalStr = \"Hello, World!\"\nlocal reversedStr = lia.string.reverse(originalStr)\nprint(reversedStr)\n-- Output: \"!dlroW ,olleH\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringfirsttoupper","title":"lia.string.FirstToUpper","text":"<p>Description: Capitalizes the first letter of a string using <code>lia.string.upper</code>. This function ensures that the first character is converted to uppercase while leaving the rest of the string unchanged.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>str</code> (<code>string</code>):   The string to capitalize.</li> </ul> <p>Returns: <code>string</code> - The string with the first letter capitalized.</p> <p>Usage Example: <pre><code>local originalStr = \"hello world\"\nlocal capitalizedStr = lia.string.FirstToUpper(originalStr)\nprint(capitalizedStr)\n-- Output: \"Hello world\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringcommanumber","title":"lia.string.CommaNumber","text":"<p>Description: Formats a number with commas for thousands separation. This function enhances the readability of large numbers by inserting commas at appropriate intervals.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>amount</code> (<code>number</code>):   The number to format.</li> </ul> <p>Returns: <code>string</code> - The formatted number with commas.</p> <p>Usage Example: <pre><code>local number = 1234567\nlocal formattedNumber = lia.string.CommaNumber(number)\nprint(formattedNumber)\n-- Output: \"1,234,567\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringdigittostring","title":"lia.string.DigitToString","text":"<p>Description: Converts a single digit to its English word representation. If the input is not a valid digit (0-9), the function returns \"invalid\".</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>digit</code> (<code>number</code>):   The digit to convert.</li> </ul> <p>Returns: <code>string</code> - The word representation of the digit, or \"invalid\" if not a digit.</p> <p>Usage Example: <pre><code>local word = lia.string.DigitToString(5)\nprint(word)\n-- Output: \"five\"\n\nlocal invalidWord = lia.string.DigitToString(12)\nprint(invalidWord)\n-- Output: \"invalid\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringclean","title":"lia.string.Clean","text":"<p>Description: Removes non-printable ASCII characters from a string. This function ensures that the string contains only printable characters, enhancing data integrity and preventing display issues.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>str</code> (<code>string</code>):   The string to clean.</li> </ul> <p>Returns: <code>string</code> - The cleaned string.</p> <p>Usage Example: <pre><code>local dirtyStr = \"Hello\\x00World\\x1F!\"\nlocal cleanStr = lia.string.Clean(dirtyStr)\nprint(cleanStr)\n-- Output: \"HelloWorld!\"\n</code></pre></p>"},{"location":"framework/libraries/lia.string/#liastringgibberish","title":"lia.string.Gibberish","text":"<p>Description: Randomly introduces gibberish characters into a string based on a specified probability. This function can be used to obfuscate text or simulate corruption in strings.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>str</code> (<code>string</code>):   The string to modify.</p> </li> <li> <p><code>prob</code> (<code>number</code>):   The probability (1-100) of introducing gibberish.</p> </li> </ul> <p>Returns: <code>string</code> - The modified string with possible gibberish.</p> <p>Usage Example: <pre><code>local originalStr = \"Hello, World!\"\nlocal gibberishStr = lia.string.Gibberish(originalStr, 30)\nprint(gibberishStr)\n-- Output: \"He@l#o, Wo$rld!\"\n</code></pre></p>"},{"location":"framework/libraries/lia.table/","title":"lia.table","text":""},{"location":"framework/libraries/lia.table/#various-useful-table-related-functions","title":"Various Useful Table-Related Functions","text":"<p>The <code>lia.table</code> library provides a collection of utility functions for performing common table operations within the Lilia Framework. These functions facilitate tasks such as summing numerical values, creating lookup tables, generating unique value lists, deep copying tables, and filtering table contents. By utilizing these utilities, developers can streamline table manipulations and enhance the functionality of their schemas and plugins.</p>"},{"location":"framework/libraries/lia.table/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.table/#liatablesum","title":"lia.table.Sum","text":"<p>Description: Sums all numerical values in a table. This function recursively traverses nested tables to ensure that all numerical values, regardless of their depth, are included in the total sum.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>tbl</code> (<code>table</code>):   The table containing numerical values to sum.</li> </ul> <p>Returns: <code>number</code> - The sum of all numerical values.</p> <p>Usage Example: <pre><code>local numbers = {1, 2, {3, 4}, 5}\nlocal total = lia.table.Sum(numbers)\nprint(total)\n-- Output: 15\n</code></pre></p>"},{"location":"framework/libraries/lia.table/#liatablelookupify","title":"lia.table.Lookupify","text":"<p>Description: Creates a lookup table from a list of values. This function transforms a list into an associative table where each value from the input list becomes a key in the resulting table with a value of <code>true</code>. This is useful for quickly checking the existence of elements.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>tbl</code> (<code>table</code>):   The list of values to create a lookup table from.</li> </ul> <p>Returns: <code>table</code> - A lookup table where the keys are the values from the input list.</p> <p>Usage Example: <pre><code>local fruits = {\"apple\", \"banana\", \"cherry\"}\nlocal fruitLookup = lia.table.Lookupify(fruits)\nprint(fruitLookup[\"banana\"]) -- Output: true\nprint(fruitLookup[\"grape\"])  -- Output: nil\n</code></pre></p>"},{"location":"framework/libraries/lia.table/#liatablemakeassociative","title":"lia.table.MakeAssociative","text":"<p>Description: Converts a table into an associative table where the original values become keys with a value of <code>true</code>. This function is similar to <code>Lookupify</code> and is useful for creating sets or checking the existence of elements.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>tab</code> (<code>table</code>):   The table to convert.</li> </ul> <p>Returns: <code>table</code> - The associative table.</p> <p>Usage Example: <pre><code>local colors = {\"red\", \"green\", \"blue\"}\nlocal colorSet = lia.table.MakeAssociative(colors)\nprint(colorSet[\"green\"]) -- Output: true\nprint(colorSet[\"yellow\"])-- Output: nil\n</code></pre></p>"},{"location":"framework/libraries/lia.table/#liatableunique","title":"lia.table.Unique","text":"<p>Description: Returns a table of unique values from the input table. This function removes duplicate entries by leveraging the <code>MakeAssociative</code> function and extracting the keys, which represent the unique values.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>tab</code> (<code>table</code>):   The table to process.</li> </ul> <p>Returns: <code>table</code> - The table of unique values.</p> <p>Usage Example: <pre><code>local numbers = {1, 2, 2, 3, 4, 4, 5}\nlocal uniqueNumbers = lia.table.Unique(numbers)\nfor _, num in ipairs(uniqueNumbers) do\n    print(num)\nend\n-- Output:\n-- 1\n-- 2\n-- 3\n-- 4\n-- 5\n</code></pre></p>"},{"location":"framework/libraries/lia.table/#liatablefullcopy","title":"lia.table.FullCopy","text":"<p>Description: Creates a deep copy of a table. This function recursively copies all nested tables, as well as vectors and angles, ensuring that the original table remains unaltered when the copy is modified.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>tab</code> (<code>table</code>):   The table to copy.</li> </ul> <p>Returns: <code>table</code> - A deep copy of the table.</p> <p>Usage Example: <pre><code>local original = {\n    name = \"Alice\",\n    stats = {health = 100, mana = 50},\n    position = Vector(10, 20, 30)\n}\nlocal copy = lia.table.FullCopy(original)\ncopy.stats.health = 80\nprint(original.stats.health) -- Output: 100\nprint(copy.stats.health)     -- Output: 80\n</code></pre></p>"},{"location":"framework/libraries/lia.table/#liatablefilter","title":"lia.table.Filter","text":"<p>Description: Filters a table in-place based on a callback function. This function modifies the original table by removing elements for which the callback returns <code>false</code>, retaining only those that pass the test.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>tab</code> (<code>table</code>):   The table to filter in-place.</p> </li> <li> <p><code>func</code> (<code>function</code>):   The function to call for each element; if it returns <code>true</code>, the element is kept.</p> </li> </ul> <p>Returns: <code>table</code> - The modified (filtered) table.</p> <p>Usage Example: <pre><code>local numbers = {1, 2, 3, 4, 5, 6}\n-- Filter out even numbers\nlia.table.Filter(numbers, function(n)\n    return n % 2 ~= 0\nend)\nfor _, num in ipairs(numbers) do\n    print(num)\nend\n-- Output:\n-- 1\n-- 3\n-- 5\n</code></pre></p>"},{"location":"framework/libraries/lia.table/#liatablefiltercopy","title":"lia.table.FilterCopy","text":"<p>Description: Creates a copy of the table containing only elements that pass the callback function. This function does not modify the original table; instead, it returns a new table with the filtered elements.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>tab</code> (<code>table</code>):   The table to filter.</p> </li> <li> <p><code>func</code> (<code>function</code>):   The function to call for each element; if it returns <code>true</code>, the element is added to the result.</p> </li> </ul> <p>Returns: <code>table</code> - A new table containing the filtered elements.</p> <p>Usage Example: <pre><code>local numbers = {1, 2, 3, 4, 5, 6}\n-- Create a new table with only even numbers\nlocal evenNumbers = lia.table.FilterCopy(numbers, function(n)\n    return n % 2 == 0\nend)\nfor _, num in ipairs(evenNumbers) do\n    print(num)\nend\n-- Output:\n-- 2\n-- 4\n-- 6\n</code></pre></p>"},{"location":"framework/libraries/lia.table/#liatableunique_1","title":"lia.table.Unique","text":"<p>Description: Returns a table of unique values from the input table by converting it into an associative table and extracting the keys. This function ensures that all values in the resulting table are distinct.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>tab</code> (<code>table</code>):   The table to process.</li> </ul> <p>Returns: <code>table</code> - The table of unique values.</p> <p>Usage Example: <pre><code>local items = {\"sword\", \"shield\", \"sword\", \"potion\", \"shield\"}\nlocal uniqueItems = lia.table.Unique(items)\nfor _, item in ipairs(uniqueItems) do\n    print(item)\nend\n-- Output:\n-- sword\n-- shield\n-- potion\n</code></pre></p>"},{"location":"framework/libraries/lia.time/","title":"lia.time","text":"<p>The <code>lia.time</code> library provides a suite of utility functions for managing and formatting time-related data within the Lilia Framework. These functions facilitate tasks such as generating formatted date strings, calculating time differences, converting between different time formats, and parsing time strings. By utilizing these utilities, developers can efficiently handle time manipulations, ensuring consistent and accurate time representations across their schemas and plugins.</p>"},{"location":"framework/libraries/lia.time/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.time/#liatimegetformatteddate","title":"lia.time.GetFormattedDate","text":"<p>Description: Generates a formatted date string based on the current system time. This function allows customization of the date format by including or excluding specific components such as the weekday, day, month, year, and time.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>StartingMessage</code> (<code>string</code>, optional):   A message to prepend to the formatted date.</p> </li> <li> <p><code>includeWeekDay</code> (<code>bool</code>, optional):   Whether to include the day of the week in the formatted date.</p> </li> <li> <p><code>includeDay</code> (<code>bool</code>, optional):   Whether to include the day of the month in the formatted date.</p> </li> <li> <p><code>includeMonth</code> (<code>bool</code>, optional):   Whether to include the month in the formatted date.</p> </li> <li> <p><code>includeYear</code> (<code>bool</code>, optional):   Whether to include the year in the formatted date.</p> </li> <li> <p><code>includeTime</code> (<code>bool</code>, optional):   Whether to include the time in the formatted date.</p> </li> </ul> <p>Returns: <code>string</code> - The formatted date string.</p> <p>Usage Example: <pre><code>-- Generate a formatted date with all components\nlocal formattedDate = lia.time.GetFormattedDate(\"Current Date:\", true, true, true, true, true)\nprint(formattedDate)\n-- Output: \"Current Date: Tuesday, 15 March, 2025 14:30:45 PM\"\n\n-- Generate a formatted date without the weekday and time\nlocal simpleDate = lia.time.GetFormattedDate(nil, false, true, true, true, false)\nprint(simpleDate)\n-- Output: \" 15 March, 2025\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimegetformatteddateingame","title":"lia.time.GetFormattedDateInGame","text":"<p>Description: Generates a formatted date string based on the current system time for in-game usage. This function is similar to <code>GetFormattedDate</code> but allows for schema-specific year configurations.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>StartingMessage</code> (<code>string</code>, optional):   A message to prepend to the formatted date.</p> </li> <li> <p><code>includeWeekDay</code> (<code>bool</code>, optional):   Whether to include the day of the week in the formatted date.</p> </li> <li> <p><code>includeDay</code> (<code>bool</code>, optional):   Whether to include the day of the month in the formatted date.</p> </li> <li> <p><code>includeMonth</code> (<code>bool</code>, optional):   Whether to include the month in the formatted date.</p> </li> <li> <p><code>includeYear</code> (<code>bool</code>, optional):   Whether to include the year in the formatted date.</p> </li> <li> <p><code>includeTime</code> (<code>bool</code>, optional):   Whether to include the time in the formatted date.</p> </li> </ul> <p>Returns: <code>string</code> - The formatted date string tailored for in-game usage.</p> <p>Usage Example: <pre><code>-- Generate an in-game formatted date with custom schema year\nlocal inGameDate = lia.time.GetFormattedDateInGame(\"Game Date:\", true, true, true, true, true)\nprint(inGameDate)\n-- Output: \"Game Date: Wednesday, 15 March, 2025 14:30:45 PM\"\n\n-- Generate an in-game formatted date without the year\nlocal inGameSimpleDate = lia.time.GetFormattedDateInGame(nil, true, true, true, false, true)\nprint(inGameSimpleDate)\n-- Output: \" Tuesday, 15 March 14:30:45 PM\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimegetpreformatteddate","title":"lia.time.GetPreFormattedDate","text":"<p>Description: Generates a pre-formatted date string based on the provided time. This function allows customization of the date format by including or excluding specific components such as the weekday, day, month, year, and time.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>StartingMessage</code> (<code>string</code>, optional):   A message to prepend to the formatted date.</p> </li> <li> <p><code>timeToFormat</code> (<code>table</code>):   The time to format, typically obtained from <code>os.date(\"*t\")</code>.</p> </li> <li> <p><code>includeWeekDay</code> (<code>bool</code>, optional):   Whether to include the day of the week in the formatted date.</p> </li> <li> <p><code>includeDay</code> (<code>bool</code>, optional):   Whether to include the day of the month in the formatted date.</p> </li> <li> <p><code>includeMonth</code> (<code>bool</code>, optional):   Whether to include the month in the formatted date.</p> </li> <li> <p><code>includeYear</code> (<code>bool</code>, optional):   Whether to include the year in the formatted date.</p> </li> <li> <p><code>includeTime</code> (<code>bool</code>, optional):   Whether to include the time in the formatted date.</p> </li> </ul> <p>Returns: <code>string</code> - The formatted date string.</p> <p>Usage Example: <pre><code>-- Define a specific time to format\nlocal specificTime = {\n    year = 2025,\n    month = 12,\n    day = 25,\n    hour = 18,\n    min = 45,\n    sec = 30,\n    wday = 6 -- Saturday\n}\n\n-- Generate a pre-formatted date with all components\nlocal preFormattedDate = lia.time.GetPreFormattedDate(\"Event Date:\", specificTime, true, true, true, true, true)\nprint(preFormattedDate)\n-- Output: \" Event Date: Saturday, 25 December, 2025 06:45:30 PM\"\n\n-- Generate a pre-formatted date without the time\nlocal preFormattedSimpleDate = lia.time.GetPreFormattedDate(nil, specificTime, false, true, true, true, false)\nprint(preFormattedSimpleDate)\n-- Output: \" 25 December, 2025\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimegetpreformatteddateingame","title":"lia.time.GetPreFormattedDateInGame","text":"<p>Description: Generates a pre-formatted date string based on the provided time for in-game usage. This function is similar to <code>GetPreFormattedDate</code> but allows for schema-specific year configurations.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>StartingMessage</code> (<code>string</code>, optional):   A message to prepend to the formatted date.</p> </li> <li> <p><code>timeToFormat</code> (<code>table</code>):   The time to format, typically obtained from <code>os.date(\"*t\")</code>.</p> </li> <li> <p><code>includeWeekDay</code> (<code>bool</code>, optional):   Whether to include the day of the week in the formatted date.</p> </li> <li> <p><code>includeDay</code> (<code>bool</code>, optional):   Whether to include the day of the month in the formatted date.</p> </li> <li> <p><code>includeMonth</code> (<code>bool</code>, optional):   Whether to include the month in the formatted date.</p> </li> <li> <p><code>includeYear</code> (<code>bool</code>, optional):   Whether to include the year in the formatted date.</p> </li> <li> <p><code>includeTime</code> (<code>bool</code>, optional):   Whether to include the time in the formatted date.</p> </li> </ul> <p>Returns: <code>string</code> - The formatted date string tailored for in-game usage.</p> <p>Usage Example: <pre><code>-- Define a specific time to format\nlocal specificTime = {\n    year = 2025,\n    month = 7,\n    day = 4,\n    hour = 12,\n    min = 0,\n    sec = 0,\n    wday = 7 -- Sunday\n}\n\n-- Generate a pre-formatted in-game date with custom schema year\nlocal preFormattedInGameDate = lia.time.GetPreFormattedDateInGame(\"Holiday:\", specificTime, true, true, true, true, true)\nprint(preFormattedInGameDate)\n-- Output: \" Holiday: Sunday, 04 July, 2025 12:00:00 PM\"\n\n-- Generate a pre-formatted in-game date without the weekday\nlocal preFormattedInGameSimpleDate = lia.time.GetPreFormattedDateInGame(nil, specificTime, false, true, true, true, true)\nprint(preFormattedInGameSimpleDate)\n-- Output: \" 04 July, 2025 12:00:00 PM\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimetonumber","title":"lia.time.toNumber","text":"<p>Description: Converts a date string in the format \"YYYY-MM-DD HH:MM:SS\" into a table containing individual date and time components. This function parses the string and extracts numerical values for the year, month, day, hour, minute, and second.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>str</code> (<code>string</code>, optional):   The date string to convert. Defaults to the current date and time if not provided.</li> </ul> <p>Returns: <code>table</code> - A table containing the following keys: - <code>year</code> (<code>number</code>) - <code>month</code> (<code>number</code>) - <code>day</code> (<code>number</code>) - <code>hour</code> (<code>number</code>) - <code>min</code> (<code>number</code>) - <code>sec</code> (<code>number</code>)</p> <p>Usage Example: <pre><code>-- Convert a specific date string to a table\nlocal dateTable = lia.time.toNumber(\"2025-12-25 18:45:30\")\nprint(dateTable.year)  -- Output: 2025\nprint(dateTable.month) -- Output: 12\nprint(dateTable.day)   -- Output: 25\nprint(dateTable.hour)  -- Output: 18\nprint(dateTable.min)   -- Output: 45\nprint(dateTable.sec)   -- Output: 30\n\n-- Convert the current date and time to a table\nlocal currentDateTable = lia.time.toNumber()\nprint(currentDateTable.year)  -- Output: Current year\nprint(currentDateTable.month) -- Output: Current month\n-- and so on...\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimetimesince","title":"lia.time.TimeSince","text":"<p>Description: Returns the amount of time passed since the given time. The input can be a UNIX timestamp or a date string in the format \"HH:MM:SS - DD/MM/YYYY\". The function returns a human-readable string indicating the time elapsed in seconds, minutes, hours, or days.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string|number</code>):   A time string in the format \"HH:MM:SS - DD/MM/YYYY\" or a UNIX timestamp.</li> </ul> <p>Returns: <code>string</code> - A human-readable string indicating the time passed since the given time, such as \"10 seconds ago\", \"5 minutes ago\", \"3 hours ago\", or \"2 days ago\". Returns \"Invalid date\" or \"Invalid input\" if the input is not in the expected format.</p> <p>Usage Example: <pre><code>-- Calculate time since a specific date string\nlocal timePassed = lia.time.TimeSince(\"14:30:00 - 01/01/2025\")\nprint(timePassed)\n-- Output: \"X days ago\"\n\n-- Calculate time since a UNIX timestamp\nlocal pastTimestamp = os.time() - 5000 -- 5000 seconds ago\nlocal timeSinceTimestamp = lia.time.TimeSince(pastTimestamp)\nprint(timeSinceTimestamp)\n-- Output: \"1 hour ago\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimetimeuntil","title":"lia.time.TimeUntil","text":"<p>Description: Returns the amount of time remaining until the given time. The input must be a date string in the format \"HH:MM:SS - DD/MM/YYYY\". The function returns a human-readable string indicating the time remaining in years, months, days, hours, minutes, and seconds. If the specified time is in the past, it returns an appropriate message.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string</code>):   A time string in the format \"HH:MM:SS - DD/MM/YYYY\".</li> </ul> <p>Returns: <code>string</code> - A human-readable string indicating the time remaining until the given time, such as \"2 years, 3 months, 5 days, 4 hours, 30 minutes, 15 seconds\". Returns an error message if the input is invalid or the time is in the past.</p> <p>Usage Example: <pre><code>-- Calculate time until a specific date string\nlocal timeRemaining = lia.time.TimeUntil(\"18:45:30 - 25/12/2025\")\nprint(timeRemaining)\n-- Output: \"X years, Y months, Z days, A hours, B minutes, C seconds\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimecurrentlocaltime","title":"lia.time.CurrentLocalTime","text":"<p>Description: Returns the current local time in the format \"HH:MM:SS - DD/MM/YYYY\". This function provides a standardized string representation of the current system time, suitable for display purposes.</p> <p>Realm: <code>Shared</code></p> <p>Returns: <code>string</code> - The current local time string in the format \"HH:MM:SS - DD/MM/YYYY\".</p> <p>Usage Example: <pre><code>-- Get the current local time\nlocal localTime = lia.time.CurrentLocalTime()\nprint(localTime)\n-- Output: \"14:30:45 - 15/03/2025\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimesecondstodhms","title":"lia.time.SecondsToDHMS","text":"<p>Description: Converts a number of seconds into days, hours, minutes, and seconds. This function is useful for breaking down a total duration into its constituent time units.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>seconds</code> (<code>number</code>):   The total number of seconds to convert.</li> </ul> <p>Returns: - <code>days</code> (<code>number</code>) - <code>hours</code> (<code>number</code>) - <code>minutes</code> (<code>number</code>) - <code>secs</code> (<code>number</code>)</p> <p>Usage Example: <pre><code>-- Convert 100000 seconds to days, hours, minutes, and seconds\nlocal days, hours, minutes, seconds = lia.time.SecondsToDHMS(100000)\nprint(days, hours, minutes, seconds)\n-- Output: \"1 3 46 40\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimehmstoseconds","title":"lia.time.HMSToSeconds","text":"<p>Description: Converts hours, minutes, and seconds into a total number of seconds. This function is useful for aggregating time components into a single duration value.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>hour</code> (<code>number</code>):   The hour component.</p> </li> <li> <p><code>minute</code> (<code>number</code>):   The minute component.</p> </li> <li> <p><code>second</code> (<code>number</code>):   The second component.</p> </li> </ul> <p>Returns: <code>number</code> - The total number of seconds.</p> <p>Usage Example: <pre><code>-- Convert 2 hours, 30 minutes, and 45 seconds to total seconds\nlocal totalSeconds = lia.time.HMSToSeconds(2, 30, 45)\nprint(totalSeconds)\n-- Output: 9045\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimeformattimestamp","title":"lia.time.FormatTimestamp","text":"<p>Description: Formats a UNIX timestamp into a string with the format \"HH:MM:SS - DD/MM/YYYY\". This function provides a standardized way to represent UNIX timestamps as readable date and time strings.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>timestamp</code> (<code>number</code>):   A UNIX timestamp to format.</li> </ul> <p>Returns: <code>string</code> - The formatted time string.</p> <p>Usage Example: <pre><code>-- Format the current UNIX timestamp\nlocal currentTimestamp = os.time()\nlocal formattedTime = lia.time.FormatTimestamp(currentTimestamp)\nprint(formattedTime)\n-- Output: \"14:30:45 - 15/03/2025\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimeparsetime","title":"lia.time.ParseTime","text":"<p>Description: Parses a time string in the format \"HH:MM:SS - DD/MM/YYYY\" into its individual numeric components. This function extracts the year, month, day, hour, minute, and second from the input string.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string</code>):   The time string to parse, formatted as \"HH:MM:SS - DD/MM/YYYY\".</li> </ul> <p>Returns: - <code>year</code> (<code>number</code>) - <code>month</code> (<code>number</code>) - <code>day</code> (<code>number</code>) - <code>hour</code> (<code>number</code>) - <code>minute</code> (<code>number</code>) - <code>second</code> (<code>number</code>) - <code>nil</code> if parsing fails.</p> <p>Usage Example: <pre><code>-- Parse a specific time string\nlocal year, month, day, hour, minute, second = lia.time.ParseTime(\"14:30:45 - 15/03/2025\")\nprint(year, month, day, hour, minute, second)\n-- Output: \"2025 3 15 14 30 45\"\n\n-- Attempt to parse an invalid time string\nlocal result = lia.time.ParseTime(\"Invalid Time String\")\nprint(result)\n-- Output: \"nil\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimetimedifference","title":"lia.time.TimeDifference","text":"<p>Description: Calculates the difference in days between a specified date and the current date. The input must be a date string in the format \"HH:MM:SS - DD/MM/YYYY\". The function returns the number of days remaining until the specified date or <code>nil</code> if the input is invalid.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string</code>):   A time string in the format \"HH:MM:SS - DD/MM/YYYY\".</li> </ul> <p>Returns: <code>number|nil</code> - The difference in days between the given date and the current date, or <code>nil</code> if the input is invalid.</p> <p>Usage Example: <pre><code>-- Calculate the time difference until a specific date\nlocal daysLeft = lia.time.TimeDifference(\"18:45:30 - 25/12/2025\")\nprint(daysLeft)\n-- Output: \"X days\"\n\n-- Attempt to calculate time difference with an invalid input\nlocal invalidDifference = lia.time.TimeDifference(\"Invalid Date\")\nprint(invalidDifference)\n-- Output: \"nil\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimetimesince_1","title":"lia.time.TimeSince","text":"<p>Description: Returns the amount of time passed since the given time. The input can be a UNIX timestamp or a date string in the format \"HH:MM:SS - DD/MM/YYYY\". The function returns a human-readable string indicating the time elapsed in seconds, minutes, hours, or days.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string|number</code>):   A time string in the format \"HH:MM:SS - DD/MM/YYYY\" or a UNIX timestamp.</li> </ul> <p>Returns: <code>string</code> - A human-readable string indicating the time passed since the given time, such as \"10 seconds ago\", \"5 minutes ago\", \"3 hours ago\", or \"2 days ago\". Returns \"Invalid date\" or \"Invalid input\" if the input is not in the expected format.</p> <p>Usage Example: <pre><code>-- Calculate time since a specific date string\nlocal timePassed = lia.time.TimeSince(\"14:30:00 - 01/01/2025\")\nprint(timePassed)\n-- Output: \"X days ago\"\n\n-- Calculate time since a UNIX timestamp\nlocal pastTimestamp = os.time() - 5000 -- 5000 seconds ago\nlocal timeSinceTimestamp = lia.time.TimeSince(pastTimestamp)\nprint(timeSinceTimestamp)\n-- Output: \"1 hour ago\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimetimeuntil_1","title":"lia.time.TimeUntil","text":"<p>Description: Returns the amount of time remaining until the given time. The input must be a date string in the format \"HH:MM:SS - DD/MM/YYYY\". The function returns a human-readable string indicating the time remaining in years, months, days, hours, minutes, and seconds. If the specified time is in the past, it returns an appropriate message.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string</code>):   A time string in the format \"HH:MM:SS - DD/MM/YYYY\".</li> </ul> <p>Returns: <code>string</code> - A human-readable string indicating the time remaining until the given time, such as \"2 years, 3 months, 5 days, 4 hours, 30 minutes, 15 seconds\". Returns an error message if the input is invalid or the time is in the past.</p> <p>Usage Example: <pre><code>-- Calculate time until a specific date string\nlocal timeRemaining = lia.time.TimeUntil(\"18:45:30 - 25/12/2025\")\nprint(timeRemaining)\n-- Output: \"X years, Y months, Z days, A hours, B minutes, C seconds\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimecurrentlocaltime_1","title":"lia.time.CurrentLocalTime","text":"<p>Description: Returns the current local time in the format \"HH:MM:SS - DD/MM/YYYY\". This function provides a standardized string representation of the current system time, suitable for display purposes.</p> <p>Realm: <code>Shared</code></p> <p>Returns: <code>string</code> - The current local time string in the format \"HH:MM:SS - DD/MM/YYYY\".</p> <p>Usage Example: <pre><code>-- Get the current local time\nlocal localTime = lia.time.CurrentLocalTime()\nprint(localTime)\n-- Output: \"14:30:45 - 15/03/2025\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimesecondstodhms_1","title":"lia.time.SecondsToDHMS","text":"<p>Description: Converts a number of seconds into days, hours, minutes, and seconds. This function is useful for breaking down a total duration into its constituent time units.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>seconds</code> (<code>number</code>):   The total number of seconds to convert.</li> </ul> <p>Returns: - <code>days</code> (<code>number</code>) - <code>hours</code> (<code>number</code>) - <code>minutes</code> (<code>number</code>) - <code>secs</code> (<code>number</code>)</p> <p>Usage Example: <pre><code>-- Convert 100000 seconds to days, hours, minutes, and seconds\nlocal days, hours, minutes, seconds = lia.time.SecondsToDHMS(100000)\nprint(days, hours, minutes, seconds)\n-- Output: \"1 3 46 40\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimehmstoseconds_1","title":"lia.time.HMSToSeconds","text":"<p>Description: Converts hours, minutes, and seconds into a total number of seconds. This function is useful for aggregating time components into a single duration value.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>hour</code> (<code>number</code>):   The hour component.</p> </li> <li> <p><code>minute</code> (<code>number</code>):   The minute component.</p> </li> <li> <p><code>second</code> (<code>number</code>):   The second component.</p> </li> </ul> <p>Returns: <code>number</code> - The total number of seconds.</p> <p>Usage Example: <pre><code>-- Convert 2 hours, 30 minutes, and 45 seconds to total seconds\nlocal totalSeconds = lia.time.HMSToSeconds(2, 30, 45)\nprint(totalSeconds)\n-- Output: 9045\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimeformattimestamp_1","title":"lia.time.FormatTimestamp","text":"<p>Description: Formats a UNIX timestamp into a string with the format \"HH:MM:SS - DD/MM/YYYY\". This function provides a standardized way to represent UNIX timestamps as readable date and time strings.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>timestamp</code> (<code>number</code>):   A UNIX timestamp to format.</li> </ul> <p>Returns: <code>string</code> - The formatted time string.</p> <p>Usage Example: <pre><code>-- Format the current UNIX timestamp\nlocal currentTimestamp = os.time()\nlocal formattedTime = lia.time.FormatTimestamp(currentTimestamp)\nprint(formattedTime)\n-- Output: \"14:30:45 - 15/03/2025\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimeparsetime_1","title":"lia.time.ParseTime","text":"<p>Description: Parses a time string in the format \"HH:MM:SS - DD/MM/YYYY\" into its individual numeric components. This function extracts the year, month, day, hour, minute, and second from the input string.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string</code>):   The time string to parse, formatted as \"HH:MM:SS - DD/MM/YYYY\".</li> </ul> <p>Returns: - <code>year</code> (<code>number</code>) - <code>month</code> (<code>number</code>) - <code>day</code> (<code>number</code>) - <code>hour</code> (<code>number</code>) - <code>minute</code> (<code>number</code>) - <code>second</code> (<code>number</code>) - <code>nil</code> if parsing fails.</p> <p>Usage Example: <pre><code>-- Parse a specific time string\nlocal year, month, day, hour, minute, second = lia.time.ParseTime(\"14:30:45 - 15/03/2025\")\nprint(year, month, day, hour, minute, second)\n-- Output: \"2025 3 15 14 30 45\"\n\n-- Attempt to parse an invalid time string\nlocal result = lia.time.ParseTime(\"Invalid Time String\")\nprint(result)\n-- Output: \"nil\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimedaysbetween","title":"lia.time.DaysBetween","text":"<p>Description: Calculates the number of days between two dates, ignoring the time of day. The dates must be provided as strings in the format \"HH:MM:SS - DD/MM/YYYY\". This function returns the absolute number of days separating the two dates or an error message if the inputs are invalid.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>strTime1</code> (<code>string</code>):   The first time string in the format \"HH:MM:SS - DD/MM/YYYY\".</p> </li> <li> <p><code>strTime2</code> (<code>string</code>):   The second time string in the format \"HH:MM:SS - DD/MM/YYYY\".</p> </li> </ul> <p>Returns: <code>number|string</code> - The number of days between the two dates or \"Invalid dates\" if the inputs are not correctly formatted.</p> <p>Usage Example: <pre><code>-- Calculate days between two dates\nlocal daysBetween = lia.time.DaysBetween(\"00:00:00 - 01/01/2025\", \"00:00:00 - 31/12/2025\")\nprint(daysBetween)\n-- Output: \"364\"\n\n-- Attempt to calculate days between invalid dates\nlocal invalidDays = lia.time.DaysBetween(\"Invalid Date\", \"00:00:00 - 31/12/2025\")\nprint(invalidDays)\n-- Output: \"Invalid dates\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimeweekdayname","title":"lia.time.WeekdayName","text":"<p>Description: Returns the name of the weekday for the given date and time. The input must be a string in the format \"HH:MM:SS - DD/MM/YYYY\". This function leverages Lua's <code>os.date</code> to determine the weekday name.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string</code>):   A time string in the format \"HH:MM:SS - DD/MM/YYYY\".</li> </ul> <p>Returns: <code>string</code> - The name of the weekday (e.g., \"Monday\") or \"Invalid date\" if the input is not correctly formatted.</p> <p>Usage Example: <pre><code>-- Get the weekday name for a specific date\nlocal weekday = lia.time.WeekdayName(\"14:30:45 - 15/03/2025\")\nprint(weekday)\n-- Output: \"Saturday\"\n\n-- Attempt to get weekday name with an invalid date\nlocal invalidWeekday = lia.time.WeekdayName(\"Invalid Date\")\nprint(invalidWeekday)\n-- Output: \"Invalid date\"\n</code></pre></p>"},{"location":"framework/libraries/lia.time/#liatimetimedifference_1","title":"lia.time.TimeDifference","text":"<p>Description: Calculates the difference in days between a specified date and the current date. The input must be a date string in the format \"HH:MM:SS - DD/MM/YYYY\". The function returns the number of days remaining until the specified date or <code>nil</code> if the input is invalid.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>strTime</code> (<code>string</code>):   A time string in the format \"HH:MM:SS - DD/MM/YYYY\".</li> </ul> <p>Returns: <code>number|nil</code> - The difference in days between the given date and the current date, or <code>nil</code> if the input is invalid.</p> <p>Usage Example: <pre><code>-- Calculate the time difference until a specific date\nlocal daysLeft = lia.time.TimeDifference(\"18:45:30 - 25/12/2025\")\nprint(daysLeft)\n-- Output: \"X days\"\n\n-- Attempt to calculate time difference with an invalid input\nlocal invalidDifference = lia.time.TimeDifference(\"Invalid Date\")\nprint(invalidDifference)\n-- Output: \"nil\"\n</code></pre></p>"},{"location":"framework/libraries/lia.util/","title":"lia.util","text":"<p>The <code>lia.util</code> library offers a collection of versatile helper functions designed to simplify common tasks within the Lilia Framework. These utilities encompass a wide range of functionalities, including player searches, entity management, string manipulation, UI enhancements, and graphical rendering. By leveraging these helper functions, developers can streamline their workflow, enhance user interfaces, and implement complex features with ease.</p>"},{"location":"framework/libraries/lia.util/#functions","title":"Functions","text":""},{"location":"framework/libraries/lia.util/#liautilfindplayersinbox","title":"lia.util.FindPlayersInBox","text":"<p>Description: Finds all players within a box defined by minimum and maximum coordinates. This function is useful for detecting players in specific areas or triggering events based on player locations.</p> <p>Realm: <code>shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>mins</code> (<code>Vector</code>):   The minimum corner of the box.</p> </li> <li> <p><code>maxs</code> (<code>Vector</code>):   The maximum corner of the box.</p> </li> </ul> <p>Returns: <code>table</code> - A list of players within the specified box.</p> <p>Usage Example: <pre><code>local mins = Vector(-100, -100, 0)\nlocal maxs = Vector(100, 100, 200)\nlocal playersInBox = lia.util.FindPlayersInBox(mins, maxs)\n\nfor _, ply in ipairs(playersInBox) do\n    ply:ChatPrint(\"You are within the designated area!\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindplayersinsphere","title":"lia.util.FindPlayersInSphere","text":"<p>Description: Finds all players within a sphere defined by an origin point and radius. This function is ideal for proximity-based interactions, such as area-of-effect abilities or localized notifications.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>origin</code> (<code>Vector</code>):   The center point of the sphere.</p> </li> <li> <p><code>radius</code> (<code>number</code>):   The radius of the sphere.</p> </li> </ul> <p>Returns: <code>table</code> - A list of players within the specified sphere.</p> <p>Usage Example: <pre><code>local origin = Vector(0, 0, 0)\nlocal radius = 500\nlocal nearbyPlayers = lia.util.FindPlayersInSphere(origin, radius)\n\nfor _, ply in ipairs(nearbyPlayers) do\n    ply:ChatPrint(\"A sphere event is happening nearby!\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindplayer","title":"lia.util.findPlayer","text":"<p>Description: Attempts to find a player by matching their name or Steam ID. This function supports both exact matches and pattern-based searches, providing flexibility in player identification.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>identifier</code> (<code>string</code>):   The search query, which can be a player's name or Steam ID.</p> </li> <li> <p><code>allowPatterns</code> (<code>bool</code>, optional):   Whether to accept Lua patterns in the <code>identifier</code>. Defaults to <code>false</code>.</p> </li> </ul> <p>Returns: <code>Player|nil</code> - The player that matches the given search query, or <code>nil</code> if no match is found.</p> <p>Usage Example: <pre><code>-- Find a player by exact name\nlocal ply = lia.util.findPlayer(\"Alice\")\nif ply then\n    ply:ChatPrint(\"You have been found by name!\")\nend\n\n-- Find a player by Steam ID with pattern matching\nlocal plyPattern = lia.util.findPlayer(\"^STEAM_1:1:12345$\", true)\nif plyPattern then\n    plyPattern:ChatPrint(\"You have been found by Steam ID pattern!\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindplayeritems","title":"lia.util.findPlayerItems","text":"<p>Description: Finds all items owned by a specified player. This function is useful for inventory management, allowing developers to retrieve and manipulate items associated with a player.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>client</code> (<code>Player</code>):   The player whose items are being searched for.</li> </ul> <p>Returns: <code>table</code> - A table containing all items owned by the given player.</p> <p>Usage Example: <pre><code>local playerItems = lia.util.findPlayerItems(LocalPlayer())\n\nfor _, item in ipairs(playerItems) do\n    print(\"Item:\", item:GetClass())\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindplayeritemsbyclass","title":"lia.util.findPlayerItemsByClass","text":"<p>Description: Finds items of a specific class owned by a specified player. This function allows for targeted searches within a player's inventory, facilitating actions like item management or specific item-based events.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>client</code> (<code>Player</code>):   The player whose items are being searched for.</p> </li> <li> <p><code>class</code> (<code>string</code>):   The class of the items being searched for.</p> </li> </ul> <p>Returns: <code>table</code> - A table containing all items of the specified class owned by the given player.</p> <p>Usage Example: <pre><code>local swords = lia.util.findPlayerItemsByClass(player, \"weapon_sword\")\n\nfor _, sword in ipairs(swords) do\n    print(\"Sword found:\", sword:GetModel())\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindplayerentities","title":"lia.util.findPlayerEntities","text":"<p>Description: Finds all entities of a specific class owned by a specified player. If no class is specified, it finds all entities owned by the player. This function is beneficial for entity management, enabling developers to track and manipulate player-owned entities.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>client</code> (<code>Player</code>):   The player whose entities are being searched for.</p> </li> <li> <p><code>class</code> (<code>string</code>, optional):   The class of the entities being searched for. If not provided, all entities owned by the player are returned.</p> </li> </ul> <p>Returns: <code>table</code> - A table containing all entities of the specified class (or all entities if no class is specified) owned by the given player.</p> <p>Usage Example: <pre><code>-- Find all entities owned by the player\nlocal allEntities = lia.util.findPlayerEntities(player)\n\nfor _, ent in ipairs(allEntities) do\n    print(\"Entity:\", ent:GetClass())\nend\n\n-- Find all doors owned by the player\nlocal doors = lia.util.findPlayerEntities(player, \"prop_door\")\n\nfor _, door in ipairs(doors) do\n    print(\"Door found:\", door:GetPos())\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilstringmatches","title":"lia.util.stringMatches","text":"<p>Description: Checks if two strings are equivalent using a fuzzy matching approach. Both strings are converted to lowercase, and the function returns <code>true</code> if the strings are identical or if one string is a substring of the other.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>a</code> (<code>string</code>):   The first string to check.</p> </li> <li> <p><code>b</code> (<code>string</code>):   The second string to check.</p> </li> </ul> <p>Returns: <code>bool</code> - Whether or not the strings are equivalent based on fuzzy matching.</p> <p>Usage Example: <pre><code>local match1 = lia.util.stringMatches(\"HelloWorld\", \"helloworld\") -- true\nlocal match2 = lia.util.stringMatches(\"HelloWorld\", \"world\")      -- true\nlocal match3 = lia.util.stringMatches(\"HelloWorld\", \"Lua\")        -- false\n\nprint(match1, match2, match3) -- Output: true true false\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilgetadmins","title":"lia.util.getAdmins","text":"<p>Description: Retrieves all online players with administrative permissions. This function is useful for administering server controls, such as broadcasting messages to staff or managing administrative tasks.</p> <p>Realm: <code>Shared</code></p> <p>Returns: <code>table</code> - A table containing all online players with administrative permissions.</p> <p>Usage Example: <pre><code>local admins = lia.util.getAdmins()\n\nfor _, admin in ipairs(admins) do\n    admin:ChatPrint(\"Server maintenance will begin in 10 minutes.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindplayerbysteamid64","title":"lia.util.findPlayerBySteamID64","text":"<p>Description: Finds a player by their SteamID64. This function is particularly useful for identifying players based on their unique Steam identifiers.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>SteamID64</code> (<code>string</code>):   The SteamID64 of the player to find.</li> </ul> <p>Returns: <code>Player|nil</code> - The player object if found, <code>nil</code> otherwise.</p> <p>Usage Example: <pre><code>local steamID64 = \"76561198000000000\"\nlocal ply = lia.util.findPlayerBySteamID64(steamID64)\n\nif ply then\n    ply:ChatPrint(\"You have been identified by SteamID64!\")\nelse\n    print(\"Player not found.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindplayerbysteamid","title":"lia.util.findPlayerBySteamID","text":"<p>Description: Finds a player by their SteamID. This function assists in locating players using their traditional Steam identifiers.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li><code>SteamID</code> (<code>string</code>):   The SteamID of the player to find.</li> </ul> <p>Returns: <code>Player|nil</code> - The player object if found, <code>nil</code> otherwise.</p> <p>Usage Example: <pre><code>local steamID = \"STEAM_1:1:12345678\"\nlocal ply = lia.util.findPlayerBySteamID(steamID)\n\nif ply then\n    ply:ChatPrint(\"You have been identified by SteamID!\")\nelse\n    print(\"Player not found.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilcanfit","title":"lia.util.canFit","text":"<p>Description: Checks if a position can accommodate a player's collision hull. This function is essential for ensuring that entities or players can be placed without overlapping existing objects or terrain.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>pos</code> (<code>Vector</code>):   The position to check.</p> </li> <li> <p><code>mins</code> (<code>Vector</code>, optional):   The minimum size of the collision hull. Defaults to <code>Vector(16, 16, 0)</code> if not provided.</p> </li> <li> <p><code>maxs</code> (<code>Vector</code>, optional):   The maximum size of the collision hull. Defaults to the value of <code>mins</code> if not provided.</p> </li> <li> <p><code>filter</code> (<code>table</code>, optional):   Entities to exclude from the collision check.</p> </li> </ul> <p>Returns: <code>bool</code> - <code>true</code> if the position can fit the collision hull, <code>false</code> otherwise.</p> <p>Usage Example: <pre><code>local position = Vector(0, 0, 0)\nlocal canFit = lia.util.canFit(position)\n\nif canFit then\n    print(\"Position is clear for placement.\")\nelse\n    print(\"Cannot place entity here.\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilplayerinradius","title":"lia.util.playerInRadius","text":"<p>Description: Retrieves all players within a certain radius from a given position. This function is useful for proximity-based events, such as area-of-effect abilities or localized interactions.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>pos</code> (<code>Vector</code>):   The center position.</p> </li> <li> <p><code>dist</code> (<code>number</code>):   The maximum distance from the center.</p> </li> </ul> <p>Returns: <code>table</code> - A table containing players within the specified radius.</p> <p>Usage Example: <pre><code>local center = Vector(100, 100, 0)\nlocal radius = 300\nlocal nearbyPlayers = lia.util.playerInRadius(center, radius)\n\nfor _, ply in ipairs(nearbyPlayers) do\n    ply:ChatPrint(\"You are within the event radius!\")\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindemptyspace","title":"lia.util.findEmptySpace","text":"<p>Description: Finds empty spaces around an entity where another entity can be placed. This server-side function is useful for dynamically spawning entities in safe locations without overlapping existing objects.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>entity</code> (<code>Entity</code>):   The entity around which to search for empty spaces.</p> </li> <li> <p><code>filter</code> (<code>table</code>, optional):   Entities to exclude from the collision check.</p> </li> <li> <p><code>spacing</code> (<code>number</code>, optional):   Spacing between empty spaces. Defaults to <code>32</code> units.</p> </li> <li> <p><code>size</code> (<code>number</code>, optional):   Size of the search grid. Defaults to <code>3</code>.</p> </li> <li> <p><code>height</code> (<code>number</code>, optional):   Height of the search grid. Defaults to <code>36</code> units.</p> </li> <li> <p><code>tolerance</code> (<code>number</code>, optional):   Tolerance for collision checking. Defaults to <code>5</code> units.</p> </li> </ul> <p>Returns: <code>table</code> - A table containing positions of empty spaces.</p> <p>Usage Example: <pre><code>local entity = ents.FindByClass(\"prop_physics\")[1]\nlocal emptySpaces = lia.util.findEmptySpace(entity)\n\nfor _, pos in ipairs(emptySpaces) do\n    print(\"Empty space found at:\", pos)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilformatstringnamed","title":"lia.util.formatStringNamed","text":"<p>Description: Returns a string with named arguments in the format string replaced by the provided arguments. This function supports both table-based and ordered argument replacements, enhancing string formatting flexibility.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>format</code> (<code>string</code>):   The format string containing placeholders in <code>{}</code>.</p> </li> <li> <p><code>...</code> (<code>table|...</code>):   Arguments to replace the placeholders. If a table is provided, it uses key-value pairs for replacement. Otherwise, it replaces placeholders in order.</p> </li> </ul> <p>Returns: <code>string</code> - The formatted string with placeholders replaced by the provided arguments.</p> <p>Usage Example: <pre><code>-- Using a table for named arguments\nlocal formatted1 = lia.util.formatStringNamed(\"Hello, {name}! Welcome to {place}.\", {name = \"Bobby\", place = \"Lua Land\"})\nprint(formatted1)\n-- Output: \"Hello, Bobby! Welcome to Lua Land.\"\n\n-- Using ordered arguments\nlocal formatted2 = lia.util.formatStringNamed(\"Hello, {1}! You have {2} new messages.\", \"Alice\", 5)\nprint(formatted2)\n-- Output: \"Hello, Alice! You have 5 new messages.\"\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilgetmaterial","title":"lia.util.getMaterial","text":"<p>Description: Returns a cached copy of the given material or creates and caches one if it doesn't exist. This is a quick helper function to optimize material retrieval and reduce redundant material loading.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>materialPath</code> (<code>string</code>):   The path to the material.</p> </li> <li> <p><code>materialParameters</code> (<code>string</code>, optional):   Additional parameters for the material.</p> </li> </ul> <p>Returns: <code>Material|nil</code> - The cached material or <code>nil</code> if the material doesn't exist in the filesystem.</p> <p>Usage Example: <pre><code>local mat = lia.util.getMaterial(\"vgui/gradient-u\", \"noclamp smooth\")\nsurface.SetMaterial(mat)\nsurface.SetDrawColor(255, 255, 255)\nsurface.DrawTexturedRect(0, 0, 256, 256)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilcreatetableui-server-only","title":"lia.util.CreateTableUI (Server Only)","text":"<p>Description: Sends a request to the client to display a table UI. This function is useful for presenting structured data to players in a user-friendly table format, such as inventories, leaderboards, or data logs.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>client</code> (<code>Player</code>):   The player to whom the UI should be sent.</p> </li> <li> <p><code>title</code> (<code>string</code>):   The title of the table UI.</p> </li> <li> <p><code>columns</code> (<code>table</code>):   A table defining the columns in the table.</p> </li> <li> <p><code>data</code> (<code>table</code>):   A table containing rows of data.</p> </li> <li> <p><code>options</code> (<code>table</code>, optional):   Additional options for the table UI.</p> </li> <li> <p><code>characterID</code> (<code>number</code>, optional):   The character ID associated with the data.</p> </li> </ul> <p>Usage Example: <pre><code>local columns = {\n    {name = \"Item\", field = \"itemName\", width = 200},\n    {name = \"Quantity\", field = \"quantity\", width = 100},\n    {name = \"Price\", field = \"price\", width = 100}\n}\n\nlocal data = {\n    {itemName = \"Sword\", quantity = 1, price = \"$100\"},\n    {itemName = \"Shield\", quantity = 2, price = \"$150\"},\n    {itemName = \"Potion\", quantity = 5, price = \"$50\"}\n}\n\nlia.util.CreateTableUI(player, \"Inventory\", columns, data, {}, characterID)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindemptyspace-server-only","title":"lia.util.FindEmptySpace (Server Only)","text":"<p>Description: Finds empty spaces around an entity where another entity can be placed. This function ensures that new entities are spawned in valid locations without colliding with existing objects or terrain, maintaining the game's spatial integrity.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>entity</code> (<code>Entity</code>):   The entity around which to search for empty spaces.</p> </li> <li> <p><code>filter</code> (<code>table</code>, optional):   Entities to exclude from the collision check.</p> </li> <li> <p><code>spacing</code> (<code>number</code>, optional):   Spacing between empty spaces. Defaults to <code>32</code> units.</p> </li> <li> <p><code>size</code> (<code>number</code>, optional):   Size of the search grid. Defaults to <code>3</code>.</p> </li> <li> <p><code>height</code> (<code>number</code>, optional):   Height of the search grid. Defaults to <code>36</code> units.</p> </li> <li> <p><code>tolerance</code> (<code>number</code>, optional):   Tolerance for collision checking. Defaults to <code>5</code> units.</p> </li> </ul> <p>Returns: <code>table</code> - A table containing positions of empty spaces.</p> <p>Usage Example: <pre><code>local entity = ents.FindByClass(\"prop_physics\")[1]\nlocal emptyPositions = lia.util.findEmptySpace(entity)\n\nfor _, pos in ipairs(emptyPositions) do\n    print(\"Empty position found at:\", pos)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawblur","title":"lia.util.drawBlur","text":"<p>Description: Blurs the content underneath the given panel. If the player has blurring disabled, it falls back to drawing a simple darkened rectangle. This function enhances UI aesthetics by providing a visually appealing background effect.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>panel</code> (<code>Panel</code>):   The panel to apply the blur effect to.</p> </li> <li> <p><code>amount</code> (<code>number</code>, optional):   Intensity of the blur. Recommended to keep between <code>0</code> and <code>10</code> for performance reasons. Defaults to <code>5</code>.</p> </li> <li> <p><code>passes</code> (<code>number</code>, optional):   Quality of the blur. Defaults to <code>0.2</code>.</p> </li> </ul> <p>Usage Example: <pre><code>function PANEL:Paint(width, height)\n    lia.util.drawBlur(self)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawblurat","title":"lia.util.drawBlurAt","text":"<p>Description: Draws a blurred rectangle at the specified position and bounds. This function is intended for drawing blur effects in specific screen areas rather than entire panels.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>x</code> (<code>number</code>):   X-position of the rectangle.</p> </li> <li> <p><code>y</code> (<code>number</code>):   Y-position of the rectangle.</p> </li> <li> <p><code>w</code> (<code>number</code>):   Width of the rectangle.</p> </li> <li> <p><code>h</code> (<code>number</code>):   Height of the rectangle.</p> </li> <li> <p><code>amount</code> (<code>number</code>, optional):   Intensity of the blur. Recommended to keep between <code>0</code> and <code>10</code> for performance reasons. Defaults to <code>5</code>.</p> </li> <li> <p><code>passes</code> (<code>number</code>, optional):   Quality of the blur. Defaults to <code>0.2</code>.</p> </li> </ul> <p>Usage Example: <pre><code>hook.Add(\"HUDPaint\", \"MyHUDPaint\", function()\n    lia.util.drawBlurAt(100, 100, 200, 150)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilshadowtext","title":"lia.util.ShadowText","text":"<p>Description: Draws text with a shadow effect, enhancing readability against various backgrounds. This function is useful for creating visually appealing text elements in the UI.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>text</code> (<code>string</code>):   The text to draw.</p> </li> <li> <p><code>font</code> (<code>string</code>):   The font to use.</p> </li> <li> <p><code>x</code> (<code>number</code>):   The x-coordinate to draw the text at.</p> </li> <li> <p><code>y</code> (<code>number</code>):   The y-coordinate to draw the text at.</p> </li> <li> <p><code>colortext</code> (<code>Color</code>):   The color of the text.</p> </li> <li> <p><code>colorshadow</code> (<code>Color</code>):   The color of the shadow.</p> </li> <li> <p><code>dist</code> (<code>number</code>):   The distance of the shadow from the text.</p> </li> <li> <p><code>xalign</code> (<code>number</code>):   Horizontal alignment of the text (e.g., <code>TEXT_ALIGN_LEFT</code>, <code>TEXT_ALIGN_CENTER</code>, <code>TEXT_ALIGN_RIGHT</code>).</p> </li> <li> <p><code>yalign</code> (<code>number</code>):   Vertical alignment of the text (e.g., <code>TEXT_ALIGN_TOP</code>, <code>TEXT_ALIGN_CENTER</code>, <code>TEXT_ALIGN_BOTTOM</code>).</p> </li> </ul> <p>Usage Example: <pre><code>lia.util.ShadowText(\"Hello, World!\", \"Default\", 200, 200, Color(255, 255, 255), Color(0, 0, 0, 150), 2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawtextoutlined","title":"lia.util.DrawTextOutlined","text":"<p>Description: Draws text with an outline, making it stand out against complex backgrounds. This function enhances text visibility and aesthetic appeal in the UI.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>text</code> (<code>string</code>):   The text to draw.</p> </li> <li> <p><code>font</code> (<code>string</code>):   The font to use.</p> </li> <li> <p><code>x</code> (<code>number</code>):   The x-coordinate to draw the text at.</p> </li> <li> <p><code>y</code> (<code>number</code>):   The y-coordinate to draw the text at.</p> </li> <li> <p><code>colour</code> (<code>Color</code>):   The color of the text.</p> </li> <li> <p><code>xalign</code> (<code>number</code>):   Horizontal alignment of the text (e.g., <code>TEXT_ALIGN_LEFT</code>, <code>TEXT_ALIGN_CENTER</code>, <code>TEXT_ALIGN_RIGHT</code>).</p> </li> <li> <p><code>outlinewidth</code> (<code>number</code>):   The width of the outline.</p> </li> <li> <p><code>outlinecolour</code> (<code>Color</code>):   The color of the outline.</p> </li> </ul> <p>Returns: <code>number</code> - The result of the <code>draw.DrawText</code> function.</p> <p>Usage Example: <pre><code>lia.util.DrawTextOutlined(\"Outlined Text\", \"Default\", 300, 300, Color(255, 255, 255), TEXT_ALIGN_CENTER, 2, Color(0, 0, 0))\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawtip","title":"lia.util.DrawTip","text":"<p>Description: Draws a tip box with text, providing contextual information or guidance to players. This function is useful for creating tooltip-like UI elements.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>x</code> (<code>number</code>):   X-position of the top-left corner.</p> </li> <li> <p><code>y</code> (<code>number</code>):   Y-position of the top-left corner.</p> </li> <li> <p><code>w</code> (<code>number</code>):   Width of the tip box.</p> </li> <li> <p><code>h</code> (<code>number</code>):   Height of the tip box.</p> </li> <li> <p><code>text</code> (<code>string</code>):   The text to display inside the tip box.</p> </li> <li> <p><code>font</code> (<code>string</code>):   The font to use for the text.</p> </li> <li> <p><code>textCol</code> (<code>Color</code>):   The color of the text.</p> </li> <li> <p><code>outlineCol</code> (<code>Color</code>):   The color of the outline.</p> </li> </ul> <p>Usage Example: <pre><code>lia.util.DrawTip(50, 50, 200, 100, \"This is a helpful tip!\", \"Default\", Color(255, 255, 255), Color(0, 0, 0))\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawtext","title":"lia.util.drawText","text":"<p>Description: Draws text with a shadow, enhancing its visibility against varying backgrounds. This function simplifies the process of rendering text elements with shadow effects.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>text</code> (<code>string</code>):   Text to draw.</p> </li> <li> <p><code>x</code> (<code>number</code>):   X-position of the text.</p> </li> <li> <p><code>y</code> (<code>number</code>):   Y-position of the text.</p> </li> <li> <p><code>color</code> (<code>Color</code>):   Color of the text to draw.</p> </li> <li> <p><code>alignX</code> (<code>number</code>, optional):   Horizontal alignment of the text, using one of the <code>TEXT_ALIGN_*</code> constants. Defaults to <code>TEXT_ALIGN_LEFT</code>.</p> </li> <li> <p><code>alignY</code> (<code>number</code>, optional):   Vertical alignment of the text, using one of the <code>TEXT_ALIGN_*</code> constants. Defaults to <code>TEXT_ALIGN_LEFT</code>.</p> </li> <li> <p><code>font</code> (<code>string</code>, optional):   Font to use for the text. Defaults to <code>\"liaGenericFont\"</code>.</p> </li> <li> <p><code>alpha</code> (<code>number</code>, optional):   Alpha of the shadow. Defaults to <code>color.a * 0.575</code>.</p> </li> </ul> <p>Returns: <code>number</code> - The result of the <code>draw.TextShadow</code> function.</p> <p>Usage Example: <pre><code>lia.util.drawText(\"Shadowed Text\", 400, 400, Color(255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, \"Default\", 150)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawtexture","title":"lia.util.drawTexture","text":"<p>Description: Draws a textured rectangle with a specified material and color. This function simplifies the rendering of textured elements in the UI.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>material</code> (<code>string</code>):   Material to use for the texture.</p> </li> <li> <p><code>color</code> (<code>Color</code>, optional):   Color of the texture. Defaults to <code>Color(255, 255, 255)</code>.</p> </li> <li> <p><code>x</code> (<code>number</code>):   X-position of the top-left corner of the rectangle.</p> </li> <li> <p><code>y</code> (<code>number</code>):   Y-position of the top-left corner of the rectangle.</p> </li> <li> <p><code>w</code> (<code>number</code>):   Width of the rectangle.</p> </li> <li> <p><code>h</code> (<code>number</code>):   Height of the rectangle.</p> </li> </ul> <p>Usage Example: <pre><code>lia.util.drawTexture(\"vgui/gradient-u\", Color(255, 255, 255, 200), 500, 500, 100, 50)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilskinfunc","title":"lia.util.skinFunc","text":"<p>Description: Calls a named skin function with optional arguments on a panel. This function allows for dynamic skinning of UI elements, enabling customized appearances based on skin definitions.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>name</code> (<code>string</code>):   Name of the skin function to call.</p> </li> <li> <p><code>panel</code> (<code>Panel</code>, optional):   Panel to apply the skin function to. If not provided, the default skin is used.</p> </li> <li> <p><code>a</code> (<code>any</code>, optional):   Argument 1.</p> </li> <li> <p><code>b</code> (<code>any</code>, optional):   Argument 2.</p> </li> <li> <p><code>c</code> (<code>any</code>, optional):   Argument 3.</p> </li> <li> <p><code>d</code> (<code>any</code>, optional):   Argument 4.</p> </li> <li> <p><code>e</code> (<code>any</code>, optional):   Argument 5.</p> </li> <li> <p><code>f</code> (<code>any</code>, optional):   Argument 6.</p> </li> <li> <p><code>g</code> (<code>any</code>, optional):   Argument 7.</p> </li> </ul> <p>Returns: <code>any</code> - The result of the skin function call.</p> <p>Usage Example: <pre><code>local result = lia.util.skinFunc(\"Paint\", myPanel, 255, 255, 255, 255)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilwraptext","title":"lia.util.wrapText","text":"<p>Description: Wraps text so it does not exceed a certain width. This function intelligently breaks lines between words when possible or splits words if they are too long, ensuring that text fits within designated UI elements.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>text</code> (<code>string</code>):   Text to wrap.</p> </li> <li> <p><code>width</code> (<code>number</code>):   Maximum allowed width in pixels.</p> </li> <li> <p><code>font</code> (<code>string</code>, optional):   Font to use for the text. Defaults to <code>\"liaChatFont\"</code>.</p> </li> </ul> <p>Returns: - <code>table</code> - A table containing the wrapped lines of text.</p> <ul> <li><code>number</code> - The maximum width of the wrapped text.</li> </ul> <p>Usage Example: <pre><code>local wrappedLines, maxWidth = lia.util.wrapText(\"This is a very long piece of text that needs to be wrapped.\", 300)\n\nfor _, line in ipairs(wrappedLines) do\n    print(line)\nend\n-- Output:\n-- \"This is a very\"\n-- \"long piece of\"\n-- \"text that needs\"\n-- \"to be wrapped.\"\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawblur_1","title":"lia.util.drawBlur","text":"<p>Description: Blurs the content underneath the given panel. This function falls back to a simple darkened rectangle if the player has blurring disabled, ensuring consistent visual effects across different player settings.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>panel</code> (<code>Panel</code>):   The panel to draw the blur for.</p> </li> <li> <p><code>amount</code> (<code>number</code>, optional):   Intensity of the blur. Recommended to keep between <code>0</code> and <code>10</code> for performance reasons. Defaults to <code>5</code>.</p> </li> <li> <p><code>passes</code> (<code>number</code>, optional):   Quality of the blur. Recommended to keep as default (<code>0.2</code>).</p> </li> </ul> <p>Usage Example: <pre><code>function PANEL:Paint(width, height)\n    lia.util.drawBlur(self)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawblurat_1","title":"lia.util.drawBlurAt","text":"<p>Description: Draws a blurred rectangle with the specified position and bounds. This function is intended for use outside of panels and provides flexibility in where blur effects are applied on the screen.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>x</code> (<code>number</code>):   X-position of the rectangle.</p> </li> <li> <p><code>y</code> (<code>number</code>):   Y-position of the rectangle.</p> </li> <li> <p><code>w</code> (<code>number</code>):   Width of the rectangle.</p> </li> <li> <p><code>h</code> (<code>number</code>):   Height of the rectangle.</p> </li> <li> <p><code>amount</code> (<code>number</code>, optional):   Intensity of the blur. Recommended to keep between <code>0</code> and <code>10</code> for performance reasons. Defaults to <code>5</code>.</p> </li> <li> <p><code>passes</code> (<code>number</code>, optional):   Quality of the blur. Recommended to keep as default (<code>0.2</code>).</p> </li> </ul> <p>Usage Example: <pre><code>hook.Add(\"HUDPaint\", \"MyHUDPaint\", function()\n    lia.util.drawBlurAt(100, 100, 300, 200)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilnotifquery","title":"lia.util.notifQuery","text":"<p>Description: Displays a query notification panel with customizable options. This function is useful for prompting players with yes/no questions or binary choices, capturing their responses through key presses.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>question</code> (<code>string</code>):   The question or prompt to display.</p> </li> <li> <p><code>option1</code> (<code>string</code>):   The text for the first option.</p> </li> <li> <p><code>option2</code> (<code>string</code>):   The text for the second option.</p> </li> <li> <p><code>manualDismiss</code> (<code>bool</code>):   If <code>true</code>, the panel requires manual dismissal.</p> </li> <li> <p><code>notifType</code> (<code>number</code>):   The type of notification.</p> </li> <li> <p><code>callback</code> (<code>function</code>):   The function to call when an option is selected. It receives the option index and the notice panel as arguments.</p> </li> </ul> <p>Returns: <code>Panel</code> - The created notification panel.</p> <p>Usage Example: <pre><code>lia.util.notifQuery(\"Do you want to accept the quest?\", \"Yes\", \"No\", false, 7, function(option, panel)\n    if option == 1 then\n        print(\"Player accepted the quest.\")\n    else\n        print(\"Player declined the quest.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilformatstringnamed_1","title":"lia.util.formatStringNamed","text":"<p>Description: Returns a string with named arguments in the format string replaced by the provided arguments. This function supports both table-based and ordered argument replacements, enhancing string formatting flexibility.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>format</code> (<code>string</code>):   The format string containing placeholders in <code>{}</code>.</p> </li> <li> <p><code>...</code> (<code>table|...</code>):   Arguments to replace the placeholders. If a table is provided, it uses key-value pairs for replacement. Otherwise, it replaces placeholders in order.</p> </li> </ul> <p>Returns: <code>string</code> - The formatted string with placeholders replaced by the provided arguments.</p> <p>Usage Example: <pre><code>-- Using a table for named arguments\nlocal formatted1 = lia.util.formatStringNamed(\"Hello, {name}! Welcome to {place}.\", {name = \"Bobby\", place = \"Lua Land\"})\nprint(formatted1)\n-- Output: \"Hello, Bobby! Welcome to Lua Land.\"\n\n-- Using ordered arguments\nlocal formatted2 = lia.util.formatStringNamed(\"Hello, {1}! You have {2} new messages.\", \"Alice\", 5)\nprint(formatted2)\n-- Output: \"Hello, Alice! You have 5 new messages.\"\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilgetmaterial_1","title":"lia.util.getMaterial","text":"<p>Description: Returns a cached copy of the given material or creates and caches one if it doesn't exist. This is a quick helper function to optimize material retrieval and reduce redundant material loading.</p> <p>Realm: <code>Shared</code></p> <p>Parameters: </p> <ul> <li> <p><code>materialPath</code> (<code>string</code>):   The path to the material.</p> </li> <li> <p><code>materialParameters</code> (<code>string</code>, optional):   Additional parameters for the material.</p> </li> </ul> <p>Returns: <code>Material|nil</code> - The cached material or <code>nil</code> if the material doesn't exist in the filesystem.</p> <p>Usage Example: <pre><code>local mat = lia.util.getMaterial(\"vgui/gradient-u\", \"noclamp smooth\")\nsurface.SetMaterial(mat)\nsurface.SetDrawColor(255, 255, 255)\nsurface.DrawTexturedRect(0, 0, 256, 256)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawblur_2","title":"lia.util.drawBlur","text":"<p>Description: Blurs the content underneath the given panel. This function falls back to a simple darkened rectangle if the player has blurring disabled, ensuring consistent visual effects across different player settings.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>panel</code> (<code>Panel</code>):   The panel to draw the blur for.</p> </li> <li> <p><code>amount</code> (<code>number</code>, optional):   Intensity of the blur. Recommended to keep between <code>0</code> and <code>10</code> for performance reasons. Defaults to <code>5</code>.</p> </li> <li> <p><code>passes</code> (<code>number</code>, optional):   Quality of the blur. Defaults to <code>0.2</code>.</p> </li> </ul> <p>Usage Example: <pre><code>function PANEL:Paint(width, height)\n    lia.util.drawBlur(self)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawblurat_2","title":"lia.util.drawBlurAt","text":"<p>Description: Draws a blurred rectangle with the specified position and bounds. This function is intended for use outside of panels and provides flexibility in where blur effects are applied on the screen.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>x</code> (<code>number</code>):   X-position of the rectangle.</p> </li> <li> <p><code>y</code> (<code>number</code>):   Y-position of the rectangle.</p> </li> <li> <p><code>w</code> (<code>number</code>):   Width of the rectangle.</p> </li> <li> <p><code>h</code> (<code>number</code>):   Height of the rectangle.</p> </li> <li> <p><code>amount</code> (<code>number</code>, optional):   Intensity of the blur. Recommended to keep between <code>0</code> and <code>10</code> for performance reasons. Defaults to <code>5</code>.</p> </li> <li> <p><code>passes</code> (<code>number</code>, optional):   Quality of the blur. Defaults to <code>0.2</code>.</p> </li> </ul> <p>Usage Example: <pre><code>hook.Add(\"HUDPaint\", \"MyHUDPaint\", function()\n    lia.util.drawBlurAt(100, 100, 300, 200)\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawtexture_1","title":"lia.util.drawTexture","text":"<p>Description: Draws a textured rectangle with a specified material and color. This function simplifies the rendering of textured elements in the UI.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>material</code> (<code>string</code>):   Material to use for the texture.</p> </li> <li> <p><code>color</code> (<code>Color</code>, optional):   Color of the texture. Defaults to <code>Color(255, 255, 255)</code>.</p> </li> <li> <p><code>x</code> (<code>number</code>):   X-position of the top-left corner of the rectangle.</p> </li> <li> <p><code>y</code> (<code>number</code>):   Y-position of the top-left corner of the rectangle.</p> </li> <li> <p><code>w</code> (<code>number</code>):   Width of the rectangle.</p> </li> <li> <p><code>h</code> (<code>number</code>):   Height of the rectangle.</p> </li> </ul> <p>Usage Example: <pre><code>lia.util.drawTexture(\"vgui/gradient-u\", Color(255, 255, 255, 200), 500, 500, 100, 50)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilskinfunc_1","title":"lia.util.skinFunc","text":"<p>Description: Calls a named skin function with optional arguments on a panel. This function allows for dynamic skinning of UI elements, enabling customized appearances based on skin definitions.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>name</code> (<code>string</code>):   Name of the skin function to call.</p> </li> <li> <p><code>panel</code> (<code>Panel</code>, optional):   Panel to apply the skin function to. If not provided, the default skin is used.</p> </li> <li> <p><code>a</code> (<code>any</code>, optional):   Argument 1.</p> </li> <li> <p><code>b</code> (<code>any</code>, optional):   Argument 2.</p> </li> <li> <p><code>c</code> (<code>any</code>, optional):   Argument 3.</p> </li> <li> <p><code>d</code> (<code>any</code>, optional):   Argument 4.</p> </li> <li> <p><code>e</code> (<code>any</code>, optional):   Argument 5.</p> </li> <li> <p><code>f</code> (<code>any</code>, optional):   Argument 6.</p> </li> <li> <p><code>g</code> (<code>any</code>, optional):   Argument 7.</p> </li> </ul> <p>Returns: <code>any</code> - The result of the skin function call.</p> <p>Usage Example: <pre><code>local result = lia.util.skinFunc(\"Paint\", myPanel, 255, 255, 255, 255)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilwraptext_1","title":"lia.util.wrapText","text":"<p>Description: Wraps text so it does not exceed a certain width. This function intelligently breaks lines between words when possible or splits words if they are too long, ensuring that text fits within designated UI elements.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>text</code> (<code>string</code>):   Text to wrap.</p> </li> <li> <p><code>width</code> (<code>number</code>):   Maximum allowed width in pixels.</p> </li> <li> <p><code>font</code> (<code>string</code>, optional):   Font to use for the text. Defaults to <code>\"liaChatFont\"</code>.</p> </li> </ul> <p>Returns: - <code>table</code> - A table containing the wrapped lines of text.</p> <ul> <li><code>number</code> - The maximum width of the wrapped text.</li> </ul> <p>Usage Example: <pre><code>local wrappedLines, maxWidth = lia.util.wrapText(\"This is a very long piece of text that needs to be wrapped.\", 300)\n\nfor _, line in ipairs(wrappedLines) do\n    print(line)\nend\n-- Output:\n-- \"This is a very\"\n-- \"long piece of\"\n-- \"text that needs\"\n-- \"to be wrapped.\"\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautildrawblur_3","title":"lia.util.drawBlur","text":"<p>Description: Blurs the content underneath the given panel. This function falls back to a simple darkened rectangle if the player has blurring disabled, ensuring consistent visual effects across different player settings.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>panel</code> (<code>Panel</code>):   The panel to draw the blur for.</p> </li> <li> <p><code>amount</code> (<code>number</code>, optional):   Intensity of the blur. Recommended to keep between <code>0</code> and <code>10</code> for performance reasons. Defaults to <code>5</code>.</p> </li> <li> <p><code>passes</code> (<code>number</code>, optional):   Quality of the blur. Recommended to keep as default (<code>0.2</code>).</p> </li> </ul> <p>Usage Example: <pre><code>function PANEL:Paint(width, height)\n    lia.util.drawBlur(self)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilnotifquery_1","title":"lia.util.notifQuery","text":"<p>Description: Displays a query notification panel with customizable options. This function is useful for prompting players with yes/no questions or binary choices, capturing their responses through key presses.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>question</code> (<code>string</code>):   The question or prompt to display.</p> </li> <li> <p><code>option1</code> (<code>string</code>):   The text for the first option.</p> </li> <li> <p><code>option2</code> (<code>string</code>):   The text for the second option.</p> </li> <li> <p><code>manualDismiss</code> (<code>bool</code>):   If <code>true</code>, the panel requires manual dismissal.</p> </li> <li> <p><code>notifType</code> (<code>number</code>):   The type of notification.</p> </li> <li> <p><code>callback</code> (<code>function</code>):   The function to call when an option is selected. It receives the option index and the notice panel as arguments.</p> </li> </ul> <p>Returns: <code>Panel</code> - The created notification panel.</p> <p>Usage Example: <pre><code>lia.util.notifQuery(\"Do you want to accept the quest?\", \"Yes\", \"No\", false, 7, function(option, panel)\n    if option == 1 then\n        print(\"Player accepted the quest.\")\n    else\n        print(\"Player declined the quest.\")\n    end\nend)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilcreatetableui","title":"lia.util.CreateTableUI","text":"<p>Description: Creates and displays a table UI on the client-side. This function allows for the presentation of structured data in a user-friendly table format, facilitating activities like inventory displays, leaderboards, or data logs.</p> <p>Realm: <code>Client</code></p> <p>Parameters: </p> <ul> <li> <p><code>title</code> (<code>string</code>):   The title of the table UI.</p> </li> <li> <p><code>columns</code> (<code>table</code>):   A table defining the columns in the table. Each column should have a <code>name</code>, <code>field</code>, and optionally a <code>width</code>.</p> </li> <li> <p><code>data</code> (<code>table</code>):   A table containing rows of data. Each row should correspond to the defined columns.</p> </li> <li> <p><code>options</code> (<code>table</code>, optional):   Additional options for the table UI, such as context menu actions.</p> </li> <li> <p><code>charID</code> (<code>number</code>, optional):   The character ID associated with the data.</p> </li> </ul> <p>Usage Example: <pre><code>local columns = {\n    {name = \"Item\", field = \"itemName\", width = 200},\n    {name = \"Quantity\", field = \"quantity\", width = 100},\n    {name = \"Price\", field = \"price\", width = 100}\n}\n\nlocal data = {\n    {itemName = \"Sword\", quantity = 1, price = \"$100\"},\n    {itemName = \"Shield\", quantity = 2, price = \"$150\"},\n    {itemName = \"Potion\", quantity = 5, price = \"$50\"}\n}\n\nlocal options = {\n    {name = \"Use Item\", net = \"UseItem\", ExtraFields = {confirm = \"Are you sure you want to use this item?\"}},\n    {name = \"Drop Item\", net = \"DropItem\"}\n}\n\nlia.util.CreateTableUI(\"Inventory\", columns, data, options, characterID)\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#liautilfindemptyspace-server-only_1","title":"lia.util.findEmptySpace (Server Only)","text":"<p>Description: Finds empty spaces around an entity where another entity can be placed. This function ensures that new entities are spawned in valid locations without overlapping existing objects or terrain, maintaining the game's spatial integrity.</p> <p>Realm: <code>Server</code></p> <p>Parameters: </p> <ul> <li> <p><code>entity</code> (<code>Entity</code>):   The entity around which to search for empty spaces.</p> </li> <li> <p><code>filter</code> (<code>table</code>, optional):   Entities to exclude from the collision check.</p> </li> <li> <p><code>spacing</code> (<code>number</code>, optional):   Spacing between empty spaces. Defaults to <code>32</code> units.</p> </li> <li> <p><code>size</code> (<code>number</code>, optional):   Size of the search grid. Defaults to <code>3</code>.</p> </li> <li> <p><code>height</code> (<code>number</code>):   Height of the search grid. Defaults to <code>36</code> units.</p> </li> <li> <p><code>tolerance</code> (<code>number</code>):   Tolerance for collision checking. Defaults to <code>5</code> units.</p> </li> </ul> <p>Returns: <code>table</code> - A table containing positions of empty spaces.</p> <p>Usage Example: <pre><code>local entity = ents.FindByClass(\"prop_physics\")[1]\nlocal emptyPositions = lia.util.findEmptySpace(entity)\n\nfor _, pos in ipairs(emptyPositions) do\n    print(\"Empty position found at:\", pos)\nend\n</code></pre></p>"},{"location":"framework/libraries/lia.util/#variables","title":"Variables","text":""},{"location":"framework/libraries/lia.util/#liautil_1","title":"lia.util","text":"<p>Description: A table that stores all registered utility functions. These functions extend the capabilities of both client and server realms, providing additional functionalities for developers to enhance their schemas and plugins.</p> <p>Realm: <code>Shared</code></p> <p>Type: <code>table</code></p> <p>Usage Example: <pre><code>-- Access and use the FindPlayersInBox function\nlocal mins = Vector(-100, -100, 0)\nlocal maxs = Vector(100, 100, 200)\nlocal playersInBox = lia.util.FindPlayersInBox(mins, maxs)\n\nfor _, ply in ipairs(playersInBox) do\n    ply:ChatPrint(\"You are within the designated area!\")\nend\n</code></pre></p>"},{"location":"framework/meta/character_meta/","title":"Character meta","text":"<p>Characters are a fundamental object type in Lilia. They are distinct from players, where players are the representation of a person's existence in the server that owns a character, and their character is their currently selected persona. All the characters that a player owns will be loaded into memory once they connect to the server. Characters are saved during a regular interval (<code>lia.config.CharacterDataSaveInterval</code>), and during specific events (e.g., when the owning player switches away from one character to another).</p> <p>They contain all information that is not persistent with the player; names, descriptions, model, currency, etc. For the most part, you'll want to keep all information stored on the character since it will probably be different or change if the player switches to another character. An easy way to do this is to use <code>lia.char.registerVar</code> to easily create accessor functions for variables that automatically save to the character object.</p>"},{"location":"framework/meta/character_meta/#tostring","title":"tostring","text":"<p>Description</p> <p>Provides a human-readable string representation of the character.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String: A string in the format <code>\"character[ID]\"</code>, where <code>ID</code> is the character's unique identifier.</li> </ul> <p>Example</p> <pre><code>print(lia.char.loaded[1])\n-- Output: \"character[1]\"\n</code></pre>"},{"location":"framework/meta/character_meta/#eq","title":"eq","text":"<p>Description</p> <p>Compares this character with another character for equality based on their unique IDs.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>other (<code>Character</code>): The other character to compare against.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if both characters have the same ID; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local char1 = lia.char.loaded[1]\nlocal char2 = lia.char.loaded[2]\nprint(char1 == char2)\n-- Output: false\n</code></pre>"},{"location":"framework/meta/character_meta/#getid","title":"getID","text":"<p>Description</p> <p>Retrieves the unique database ID of this character.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The unique identifier of the character.</li> </ul> <p>Example</p> <pre><code>local charID = character:getID()\nprint(charID)\n-- Output: 1\n</code></pre>"},{"location":"framework/meta/character_meta/#getplayer","title":"getPlayer","text":"<p>Description</p> <p>Obtains the player object that currently owns this character.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Player|nil: The player who owns this character, or <code>nil</code> if no valid player is found.</li> </ul> <p>Example</p> <pre><code>local owner = character:getPlayer()\nif owner then\n    print(\"Character is owned by:\", owner:Nick())\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#hasmoney","title":"hasMoney","text":"<p>Description</p> <p>Checks whether the character possesses at least a specified amount of in-game currency.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>amount (<code>float</code>): The minimum amount of currency to check for. Must be a non-negative number.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character's current money is equal to or exceeds the specified amount; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local hasEnoughMoney = character:hasMoney(100)\nif hasEnoughMoney then\n    print(\"Character has sufficient funds.\")\nelse\n    print(\"Character lacks sufficient funds.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#getflags","title":"getFlags","text":"<p>Description</p> <p>Retrieves all flags associated with this character.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String: A concatenated string of all flags the character possesses. Each character in the string represents an individual flag.</li> </ul> <p>Example</p> <pre><code>local flags = character:getFlags()\nfor i = 1, #flags do\n    local flag = flags:sub(i, i)\n    print(\"Flag:\", flag)\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#hasflags","title":"hasFlags","text":"<p>Description</p> <p>Determines if the character has one or more specified flags.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>flags (<code>String</code>): A string containing one or more flags to check.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character has at least one of the specified flags; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>if character:hasFlags(\"admin\") then\n    print(\"Character has admin privileges.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#getitemweapon","title":"getItemWeapon","text":"<p>Description</p> <p>Retrieves the currently equipped weapon of the character along with its corresponding inventory item.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Entity|false: The equipped weapon entity if a weapon is equipped; otherwise, <code>false</code>.</li> <li>Item|false: The corresponding item from the character's inventory if found; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local weapon, item = character:getItemWeapon()\nif weapon then\n    print(\"Equipped weapon:\", weapon:GetClass())\nelse\n    print(\"No weapon equipped.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#setflags","title":"setFlags","text":"<p>Description</p> <p>Sets the complete set of flags accessible by this character, replacing any existing flags.</p> <p>Note: This method overwrites all existing flags and does not append to them.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>flags (<code>String</code>): A string containing one or more flags to assign to the character.</li> </ul> <p>Example</p> <pre><code>character:setFlags(\"petr\")\n-- This sets the character's flags to 'p', 'e', 't', 'r'\n</code></pre>"},{"location":"framework/meta/character_meta/#giveflags","title":"giveFlags","text":"<p>Description</p> <p>Adds one or more flags to the character's existing set of accessible flags without removing existing ones.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>flags (<code>String</code>): A string containing one or more flags to add.</li> </ul> <p>Example</p> <pre><code>character:giveFlags(\"pet\")\n-- Adds 'p', 'e', and 't' flags to the character\n</code></pre>"},{"location":"framework/meta/character_meta/#takeflags","title":"takeFlags","text":"<p>Description</p> <p>Removes one or more flags from the character's set of accessible flags.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>flags (<code>String</code>): A string containing one or more flags to remove.</li> </ul> <p>Example</p> <pre><code>-- For a character with \"pet\" flags\ncharacter:takeFlags(\"p\")\n-- The character now only has 'e' and 't' flags\n</code></pre>"},{"location":"framework/meta/character_meta/#save","title":"save","text":"<p>Description</p> <p>Persists the character's current state and data to the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>callback (<code>function</code>, optional): An optional callback function to execute after the save operation completes successfully.</li> </ul> <p>Example</p> <pre><code>character:save(function()\n    print(\"Character saved successfully!\")\nend)\n</code></pre>"},{"location":"framework/meta/character_meta/#sync","title":"sync","text":"<p>Description</p> <p>Synchronizes the character's data with clients, making them aware of the character's current state.</p> <p>This method handles different synchronization scenarios: - If <code>receiver</code> is <code>nil</code>, the character's data is synced to all connected players. - If <code>receiver</code> is the owner of the character, full character data is sent. - If <code>receiver</code> is not the owner, only limited data is sent to prevent unauthorized access.</p> <p>Realm</p> <p><code>Server</code></p> <p>Internal: </p> <p>This function is intended for internal use and should not be called directly.</p> <p>Parameters</p> <ul> <li>receiver (<code>Player|nil</code>): The specific player to send the character data to. If <code>nil</code>, data is sent to all players.</li> </ul> <p>Example</p> <pre><code>character:sync()\n-- Syncs character data to all players\n</code></pre>"},{"location":"framework/meta/character_meta/#setup","title":"setup","text":"<p>Description</p> <p>Configures the character's appearance and synchronizes this information with the owning player. This includes setting the player's model, faction, body groups, and skin. Optionally, it can prevent networking to other clients.</p> <p>Realm</p> <p><code>Server</code></p> <p>Internal: </p> <p>This function is intended for internal use and should not be called directly.</p> <p>Parameters</p> <ul> <li>noNetworking (<code>Bool</code>, optional): If set to <code>true</code>, the character's information will not be synchronized with other players.</li> </ul> <p>Example</p> <pre><code>character:setup()\n-- Sets up the character and syncs data with the owning player\n</code></pre>"},{"location":"framework/meta/character_meta/#kick","title":"kick","text":"<p>Description</p> <p>Forces the player to exit their current character and redirects them to the character selection menu. This is typically used when a character is banned or deleted.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>character:kick()\n</code></pre>"},{"location":"framework/meta/character_meta/#ban","title":"ban","text":"<p>Description</p> <p>Bans the character, preventing it from being used for a specified duration or permanently if no duration is provided. This action also forces the player out of the character.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>time (<code>float</code>, optional): The duration of the ban in seconds. If omitted or <code>nil</code>, the ban is permanent.</li> </ul> <p>Example</p> <pre><code>character:ban(3600) -- Bans the character for 1 hour\ncharacter:ban() -- Permanently bans the character\n</code></pre>"},{"location":"framework/meta/character_meta/#delete","title":"delete","text":"<p>Description</p> <p>Removes the character from the database and memory, effectively deleting it permanently.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>character:delete()\n</code></pre>"},{"location":"framework/meta/character_meta/#destroy","title":"destroy","text":"<p>Description</p> <p>Destroys the character instance, removing it from memory and ensuring it is no longer tracked by the server. This does not delete the character from the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>character:destroy()\n</code></pre>"},{"location":"framework/meta/character_meta/#givemoney","title":"giveMoney","text":"<p>Description</p> <p>Adds or subtracts money from the character's wallet. This function adds money to the wallet and optionally handles overflow by dropping excess money on the ground.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>amount (<code>float</code>): The amount of money to add or subtract.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Always returns <code>true</code> to indicate the operation was processed.</li> </ul> <p>Example</p> <pre><code>character:giveMoney(500) -- Adds 500 to the character's wallet\n</code></pre>"},{"location":"framework/meta/character_meta/#takemoney","title":"takeMoney","text":"<p>Description</p> <p>Specifically removes money from the character's wallet. This function ensures that only positive values are used to subtract from the wallet.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>amount (<code>float</code>): The amount of money to remove. Must be a positive number.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Always returns <code>true</code> to indicate the operation was processed.</li> </ul> <p>Example</p> <pre><code>character:takeMoney(100) -- Removes 100 from the character's wallet\n</code></pre>"},{"location":"framework/meta/character_meta/#doesrecognize","title":"doesRecognize","text":"<p>Description</p> <p>Determines if this character recognizes another character based on their unique ID.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>id (<code>number</code> | <code>Character</code>): The unique ID of the character to check recognition for. This can be either a numeric ID or a <code>Character</code> object.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character recognizes the specified character; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local otherCharacter = lia.char.loaded[2]\nif character:doesRecognize(otherCharacter) then\n    print(\"Character recognizes the other character.\")\nelse\n    print(\"Character does not recognize the other character.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#doesfakerecognize","title":"doesFakeRecognize","text":"<p>Description</p> <p>Determines if this character recognizes another character by a fake name based on their unique ID.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>id (<code>number</code> | <code>Character</code>): The unique ID of the character to check fake recognition for. This can be either a numeric ID or a <code>Character</code> object.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character recognizes the specified character by a fake name; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local otherCharacter = lia.char.loaded[3]\nif character:doesFakeRecognize(otherCharacter) then\n    print(\"Character recognizes the other character by a fake name.\")\nelse\n    print(\"Character does not recognize the other character by a fake name.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#recognize","title":"recognize","text":"<p>Description</p> <p>Allows the character to recognize another character, optionally under a specified fake name.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>character (<code>Character</code> | <code>number</code>): The character to be recognized, either as a <code>Character</code> object or by their unique ID number.</li> <li>name (<code>string</code>, optional): The fake name under which the character is recognized. If <code>nil</code>, the character is recognized by their actual ID.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the recognition was successful.</li> </ul> <p>Example</p> <pre><code>local targetCharacter = lia.char.loaded[4]\ncharacter:recognize(targetCharacter, \"Shadow\")\n-- This sets the character to recognize targetCharacter by the fake name \"Shadow\"\n</code></pre>"},{"location":"framework/meta/character_meta/#hasclasswhitelist","title":"hasClassWhitelist","text":"<p>Description</p> <p>Checks if the character has whitelisted access to a specific class.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>class (<code>number</code>): The class ID to check for whitelisting.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character has whitelist access to the specified class; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local classID = 5\nif character:hasClassWhitelist(classID) then\n    print(\"Character has whitelist access to class:\", classID)\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#isfaction","title":"isFaction","text":"<p>Description</p> <p>Determines if the character belongs to a specified faction.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>faction (<code>string</code>): The name of the faction to check against.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character belongs to the specified faction; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>if character:isFaction(\"Police\") then\n    print(\"Character is a member of the Police faction.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#isclass","title":"isClass","text":"<p>Description</p> <p>Determines if the character belongs to a specified class.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>class (<code>string</code>): The name of the class to check against.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character belongs to the specified class; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>if character:isClass(\"Medic\") then\n    print(\"Character is a Medic.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#whitelistallclasses","title":"WhitelistAllClasses","text":"<p>Description</p> <p>Grants the character whitelist access to all available classes.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>character:WhitelistAllClasses()\n-- Character now has whitelist access to every class\n</code></pre>"},{"location":"framework/meta/character_meta/#whitelistallfactions","title":"WhitelistAllFactions","text":"<p>Description</p> <p>Grants the character whitelist access to all available factions.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>character:WhitelistAllFactions()\n-- Character now has whitelist access to every faction\n</code></pre>"},{"location":"framework/meta/character_meta/#whitelisteverything","title":"WhitelistEverything","text":"<p>Description</p> <p>Grants the character whitelist access to all classes and factions.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>character:WhitelistEverything()\n-- Character now has whitelist access to every class and faction\n</code></pre>"},{"location":"framework/meta/character_meta/#classwhitelist","title":"classWhitelist","text":"<p>Description</p> <p>Adds a specific class to the character's whitelist, granting access to that class.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>class (<code>number</code>): The class ID to whitelist for the character.</li> </ul> <p>Example</p> <pre><code>local classID = 7\ncharacter:classWhitelist(classID)\n-- Character now has whitelist access to class 7\n</code></pre>"},{"location":"framework/meta/character_meta/#classunwhitelist","title":"classUnWhitelist","text":"<p>Description</p> <p>Removes a specific class from the character's whitelist, revoking access to that class.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>class (<code>number</code>): The class ID to remove from the character's whitelist.</li> </ul> <p>Example</p> <pre><code>local classID = 7\ncharacter:classUnWhitelist(classID)\n-- Character no longer has whitelist access to class 7\n</code></pre>"},{"location":"framework/meta/character_meta/#joinclass","title":"joinClass","text":"<p>Description</p> <p>Assigns the character to a specified class. Optionally forces the assignment even if conditions are not met.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>class (<code>string</code>): The name of the class to join.</li> <li>isForced (<code>boolean</code>, optional): If set to <code>true</code>, the character is forced to join the class regardless of any restrictions. Defaults to <code>false</code>.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the character successfully joined the class; otherwise, <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local success = character:joinClass(\"Sniper\", true)\nif success then\n    print(\"Character successfully joined the Sniper class.\")\nelse\n    print(\"Character failed to join the Sniper class.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#kickclass","title":"kickClass","text":"<p>Description</p> <p>Removes the character from their current class and assigns them to the default class of their faction.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>character:kickClass()\n-- Character is now assigned to their faction's default class\n</code></pre>"},{"location":"framework/meta/character_meta/#getmaxstamina","title":"getMaxStamina","text":"<p>Description</p> <p>Retrieves the maximum stamina value for the character. This value can be modified by hooks or defaults to a module-defined value.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The maximum stamina value for the character.</li> </ul> <p>Example</p> <pre><code>local maxStamina = character:getMaxStamina()\nprint(\"Character's maximum stamina:\", maxStamina)\n</code></pre>"},{"location":"framework/meta/character_meta/#getstamina","title":"getStamina","text":"<p>Description</p> <p>Retrieves the current stamina value of the character. This value can be a local variable or default to a module-defined value.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The current stamina value of the character.</li> </ul> <p>Example</p> <pre><code>local currentStamina = character:getStamina()\nprint(\"Character's current stamina:\", currentStamina)\n</code></pre>"},{"location":"framework/meta/character_meta/#getattrib","title":"getAttrib","text":"<p>Description</p> <p>Retrieves the value of a specific attribute for the character, including any applied boosts.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>key (<code>string</code>): The key of the attribute to retrieve.</li> <li>default (<code>number</code>, optional): The default value to return if the attribute is not found. Defaults to <code>0</code>.</li> </ul> <p>Returns</p> <ul> <li>Number: The value of the specified attribute, including applied boosts.</li> </ul> <p>Example</p> <pre><code>local strength = character:getAttrib(\"strength\", 10)\nprint(\"Character's strength:\", strength)\n</code></pre>"},{"location":"framework/meta/character_meta/#getboost","title":"getBoost","text":"<p>Description</p> <p>Retrieves the boost value for a specific attribute of the character.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>attribID (<code>number</code>): The ID of the attribute to retrieve the boost for.</li> </ul> <p>Returns</p> <ul> <li>Number | nil: The boost value for the specified attribute, or <code>nil</code> if no boost is found.</li> </ul> <p>Example</p> <pre><code>local strengthBoost = character:getBoost(\"strength\")\nif strengthBoost then\n    print(\"Character has a strength boost of:\", strengthBoost)\nelse\n    print(\"Character has no strength boost.\")\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#getboosts","title":"getBoosts","text":"<p>Description</p> <p>Retrieves all boosts applied to the character's attributes.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table: A table containing all boosts applied to the character's attributes.</li> </ul> <p>Example</p> <pre><code>local allBoosts = character:getBoosts()\nfor attribID, boosts in pairs(allBoosts) do\n    for boostID, amount in pairs(boosts) do\n        print(\"Attribute:\", attribID, \"Boost ID:\", boostID, \"Amount:\", amount)\n    end\nend\n</code></pre>"},{"location":"framework/meta/character_meta/#updateattrib","title":"updateAttrib","text":"<p>Description</p> <p>Updates the value of a character's attribute by adding a specified amount to it. Ensures that the attribute does not exceed its maximum allowed value.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>key (<code>string</code>): The key of the attribute to update.</li> <li>value (<code>number</code>): The amount to add to the attribute.</li> </ul> <p>Example</p> <pre><code>character:updateAttrib(\"agility\", 5)\n-- Increases the character's agility by 5\n</code></pre>"},{"location":"framework/meta/character_meta/#setattrib","title":"setAttrib","text":"<p>Description</p> <p>Sets the value of a character's attribute to a specified value.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>key (<code>string</code>): The key of the attribute to set.</li> <li>value (<code>number</code>): The value to set for the attribute.</li> </ul> <p>Example</p> <pre><code>character:setAttrib(\"intelligence\", 15)\n-- Sets the character's intelligence attribute to 15\n</code></pre>"},{"location":"framework/meta/character_meta/#addboost","title":"addBoost","text":"<p>Description</p> <p>Adds a boost to a specific attribute of the character.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>boostID (<code>string</code>): The ID of the boost to add.</li> <li>attribID (<code>string</code>): The ID of the attribute to which the boost should be applied.</li> <li>boostAmount (<code>number</code>): The amount of the boost to add to the attribute.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the boost was successfully added.</li> </ul> <p>Example</p> <pre><code>character:addBoost(\"buff_001\", \"strength\", 10)\n-- Adds a boost of +10 to the character's strength attribute\n</code></pre>"},{"location":"framework/meta/character_meta/#removeboost","title":"removeBoost","text":"<p>Description</p> <p>Removes a boost from a specific attribute of the character.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>boostID (<code>string</code>): The ID of the boost to remove.</li> <li>attribID (<code>string</code>): The ID of the attribute from which the boost should be removed.</li> </ul> <p>Example</p> <pre><code>character:removeBoost(\"buff_001\", \"strength\")\n-- Removes the boost \"buff_001\" from the character's strength attribute\n</code></pre>"},{"location":"framework/meta/entity_meta/","title":"Entity meta","text":"<p>Physical objects in the game world.</p> <p>Entities are physical representations of objects in the game world. Lilia extends the functionality of entities to interface between Lilia's own classes and to reduce boilerplate code.</p> <p>See the Garry's Mod Wiki for all other methods that the <code>Entity</code> class has.</p>"},{"location":"framework/meta/entity_meta/#isprop","title":"isProp","text":"<p>Description</p> <p>Checks if the entity is a physics prop.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is a physics prop, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:isProp() then\n    print(\"Entity is a physics prop.\")\nelse\n    print(\"Entity is not a physics prop.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#isitem","title":"isItem","text":"<p>Description</p> <p>Checks if the entity is an item entity.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is an item entity, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:isItem() then\n    print(\"Entity is an item.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#ismoney","title":"isMoney","text":"<p>Description</p> <p>Checks if the entity is a money entity.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is a money entity, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:isMoney() then\n    print(\"Entity is money.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#issimfphyscar","title":"isSimfphysCar","text":"<p>Description</p> <p>Checks if the entity is a simfphys car.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is a simfphys car, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:isSimfphysCar() then\n    print(\"Entity is a simfphys car.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#getentitemdroppos","title":"getEntItemDropPos","text":"<p>Description</p> <p>Retrieves the drop position for an item associated with the entity.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Vector: The drop position for the item.</li> </ul> <p>Example</p> <pre><code>local dropPos = entity:getEntItemDropPos()\nprint(\"Item drop position:\", dropPos)\n</code></pre>"},{"location":"framework/meta/entity_meta/#isnearentity","title":"isNearEntity","text":"<p>Description</p> <p>Checks if there is an entity near the current entity within a specified radius.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>radius (<code>float</code>): The radius within which to check for nearby entities.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if there is an entity nearby, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:isNearEntity(150) then\n    print(\"There is an entity nearby.\")\nelse\n    print(\"No entities within the specified radius.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#getcreator","title":"GetCreator","text":"<p>Description</p> <p>Retrieves the creator of the entity.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Player|nil: The player who created the entity, or <code>nil</code> if no valid creator is found.</li> </ul> <p>Example</p> <pre><code>local creator = entity:GetCreator()\nif creator then\n    print(\"Entity was created by:\", creator:Nick())\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#setcreator","title":"SetCreator","text":"<p>Description</p> <p>Assigns a creator to the entity.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>client (<code>Player</code>): The player to assign as the creator of the entity.</li> </ul> <p>Example</p> <pre><code>entity:SetCreator(player)\n</code></pre>"},{"location":"framework/meta/entity_meta/#sendnetvar","title":"sendNetVar","text":"<p>Description</p> <p>Sends a networked variable.</p> <p>Realm</p> <p><code>Server</code>~</p> <p>Internal: </p> <p>This function is intended for internal use and should not be called directly.</p> <p>Parameters</p> <ul> <li>key (<code>String</code>): Identifier of the networked variable.</li> <li>receiver (<code>Player|nil</code>): The players to send the networked variable to.</li> </ul> <p>Example</p> <pre><code>entity:sendNetVar(\"health\", player)\n</code></pre>"},{"location":"framework/meta/entity_meta/#clearnetvars","title":"clearNetVars","text":"<p>Description</p> <p>Clears all of the networked variables.</p> <p>Realm</p> <p><code>Server</code></p> <p>Internal: </p> <p>This function is intended for internal use and should not be called directly.</p> <p>Parameters</p> <ul> <li>receiver (<code>Player|nil</code>): The players to clear the networked variables for.</li> </ul> <p>Example</p> <pre><code>entity:clearNetVars(player)\n</code></pre>"},{"location":"framework/meta/entity_meta/#setnetvar","title":"setNetVar","text":"<p>Description</p> <p>Sets the value of a networked variable.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>key (<code>String</code>): Identifier of the networked variable.</li> <li>value (<code>any</code>): New value to assign to the networked variable.</li> <li>receiver (<code>Player|nil</code>): The players to send the networked variable to.</li> </ul> <p>Example</p> <pre><code>entity:setNetVar(\"example\", \"Hello World!\", player)\n</code></pre>"},{"location":"framework/meta/entity_meta/#getnetvar","title":"getNetVar","text":"<p>Description</p> <p>Retrieves a networked variable. If it is not set, it'll return the default that you've specified.</p> <p>Realm</p> <p><code>Server</code> <code>Client</code></p> <p>Parameters</p> <ul> <li>key (<code>String</code>): Identifier of the networked variable.</li> <li>default (<code>any</code>): The default value to return if the networked variable does not exist.</li> </ul> <p>Returns</p> <ul> <li>any: The value associated with the key, or the default that was given if it doesn't exist.</li> </ul> <p>Example</p> <pre><code>local example = entity:getNetVar(\"example\", \"Default Value\")\nprint(example) -- Output: \"Hello World!\" or \"Default Value\"\n</code></pre>"},{"location":"framework/meta/entity_meta/#checkdooraccess","title":"checkDoorAccess","text":"<p>Description</p> <p>Checks if a player has access to a door.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>client (<code>Player</code>): The player whose access is being checked.</li> <li>access (<code>number</code>, optional): The access level required (defaults to <code>DOOR_GUEST</code>).</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player has the required access, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:checkDoorAccess(player, DOOR_ADMIN) then\n    print(\"Player has access to the door.\")\nelse\n    print(\"Player does not have access to the door.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#isliliapersistent","title":"IsLiliaPersistent","text":"<p>Description</p> <p>Checks if the entity is persistent.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is persistent, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:IsLiliaPersistent() then\n    print(\"Entity is persistent.\")\nelse\n    print(\"Entity is not persistent.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#keysown","title":"keysOwn","text":"<p>Description</p> <p>Sets the owner of the entity. Assigns ownership of the entity to the specified player. It is intended for compatibility with DarkRP's vehicle ownership system.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>client (<code>Player</code>): The player who will become the owner of the entity.</li> </ul> <p>Example</p> <pre><code>entity:keysOwn(player)\n</code></pre>"},{"location":"framework/meta/entity_meta/#keyslock","title":"keysLock","text":"<p>Description</p> <p>Locks the entity. Locks the entity if it is a vehicle. It is intended for compatibility with DarkRP's vehicle locking system.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>entity:keysLock()\n</code></pre>"},{"location":"framework/meta/entity_meta/#keysunlock","title":"keysUnLock","text":"<p>Description</p> <p>Unlocks the entity. Unlocks the entity if it is a vehicle. It is intended for compatibility with DarkRP's vehicle unlocking system.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>entity:keysUnLock()\n</code></pre>"},{"location":"framework/meta/entity_meta/#getdoorowner","title":"getDoorOwner","text":"<p>Description</p> <p>Retrieves the owner of the entity. Returns the player who owns the entity if it is a vehicle. It is intended for compatibility with DarkRP's vehicle ownership system.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Player|nil: The player who owns the entity, or <code>nil</code> if no owner is set.</li> </ul> <p>Example</p> <pre><code>local owner = entity:getDoorOwner()\nif owner then\n    print(\"Door is owned by:\", owner:Nick())\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#islocked","title":"isLocked","text":"<p>Description</p> <p>Checks if the door is locked.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the door is locked, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:isLocked() then\n    print(\"The door is locked.\")\nelse\n    print(\"The door is unlocked.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#isdoorlocked","title":"isDoorLocked","text":"<p>Description</p> <p>Checks if the entity is locked (pertaining to doors).</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is locked, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:isDoorLocked() then\n    print(\"Door is locked.\")\nelse\n    print(\"Door is unlocked.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#removedooraccessdata","title":"removeDoorAccessData","text":"<p>Description</p> <p>Removes all door access data. Clears all access data associated with the door and updates the clients.</p> <p>Realm</p> <p><code>Server</code></p> <p>Internal: </p> <p>This function is intended for internal use and should not be called directly.</p> <p>Example</p> <pre><code>entity:removeDoorAccessData()\n</code></pre>"},{"location":"framework/meta/entity_meta/#setlocked","title":"setLocked","text":"<p>Description</p> <p>Sets the locked state of the door. Sets whether the door is locked or not.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>state (<code>Boolean</code>): The new locked state of the door (<code>true</code> for locked, <code>false</code> for unlocked).</li> </ul> <p>Example</p> <pre><code>entity:setLocked(true)\n</code></pre>"},{"location":"framework/meta/entity_meta/#isdoor","title":"isDoor","text":"<p>Description</p> <p>Checks if the entity is a door.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is a door, <code>false</code> otherwise.</li> </ul> <p>Example (Server)</p> <pre><code>if entity:isDoor() then\n    print(\"Entity is a door.\")\nend\n</code></pre> <p>Example (Client)</p> <pre><code>if entity:isDoor() then\n    print(\"Entity is a door.\")\nend\n</code></pre>"},{"location":"framework/meta/entity_meta/#getdoorpartner","title":"getDoorPartner","text":"<p>Description</p> <p>Retrieves the partner door entity associated with this entity.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Entity|nil: The partner door entity, if any.</li> </ul> <p>Example (Server)</p> <pre><code>local partner = entity:getDoorPartner()\nif partner then\n    print(\"Partner door found:\", partner:GetName())\nend\n</code></pre> <p>Example (Client)</p> <pre><code>local partner = entity:getDoorPartner()\nif partner then\n    print(\"Partner door found:\", partner:GetName())\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/","title":"Inventory meta","text":"<p>Holds items within a grid layout.</p> <p>Inventories are objects that contain <code>Item</code>s in a grid layout. Every <code>Character</code> will have exactly one inventory attached to it, which is the only inventory that is allowed to hold bags\u2014any item that has its own inventory (i.e., a suitcase). Inventories can be owned by a character, or they can be individually interacted with as standalone objects. For example, the container plugin attaches inventories to props, allowing for items to be stored outside of any character inventories and remain \"in the world\".</p>"},{"location":"framework/meta/inventory_meta/#getdata","title":"getData","text":"<p>Description</p> <p>Retrieves data associated with a specified key from the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>key (<code>String</code>): The key for the data.</li> <li>default (<code>any</code>, optional): The default value to return if the key does not exist.</li> </ul> <p>Returns</p> <ul> <li>any: The value associated with the key, or the default value if the key does not exist.</li> </ul> <p>Example</p> <pre><code>local health = inventory:getData(\"health\", 100)\nprint(\"Health:\", health)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#extend","title":"extend","text":"<p>Description</p> <p>Extends the inventory to create a subclass with a specified class name.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>className (<code>String</code>): The name of the subclass.</li> </ul> <p>Returns</p> <ul> <li>Table: A subclass of the <code>Inventory</code> class.</li> </ul> <p>Example</p> <pre><code>local GridInventory = Inventory:extend(\"GridInv\")\n</code></pre>"},{"location":"framework/meta/inventory_meta/#configure","title":"configure","text":"<p>Description</p> <p>Configures the inventory.</p> <p>This function is meant to be overridden in subclasses to define specific configurations.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>function GridInventory:configure()\n    -- Custom configuration\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#adddataproxy","title":"addDataProxy","text":"<p>Description</p> <p>Adds a data proxy to the inventory for a specified key.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>key (<code>any</code>): The key for the data proxy.</li> <li>onChange (<code>function</code>): The function to call when the data associated with the key changes.</li> </ul> <p>Example</p> <pre><code>inventory:addDataProxy(\"health\", function(old, new)\n    print(\"Health changed from\", old, \"to\", new)\nend)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getitemsbyuniqueid","title":"getItemsByUniqueID","text":"<p>Description</p> <p>Retrieves items with a specified unique ID from the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>uniqueID (<code>String</code>): The unique ID of the items to retrieve.</li> <li>onlyMain (<code>Bool</code>): Whether to retrieve only main items.</li> </ul> <p>Returns</p> <ul> <li>Table: An array containing the items with the specified unique ID.</li> </ul> <p>Example</p> <pre><code>local weapons = inventory:getItemsByUniqueID(\"weapon_rifle\")\nfor _, weapon in ipairs(weapons) do\n    print(\"Weapon ID:\", weapon:getID())\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#register","title":"register","text":"<p>Description</p> <p>Registers the inventory with a specified type ID.</p> <p>Note: This method sets the inventory's type and configures it accordingly.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>typeID (<code>String</code>): The type ID to register the inventory with.</li> </ul> <p>Example</p> <pre><code>inventory:register(\"grid\")\n-- This sets the inventory's type to 'grid'\n</code></pre>"},{"location":"framework/meta/inventory_meta/#new","title":"new","text":"<p>Description</p> <p>Creates a new instance of the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table: A new instance of the <code>Inventory</code> class.</li> </ul> <p>Example</p> <pre><code>local newInventory = Inventory:new()\n</code></pre>"},{"location":"framework/meta/inventory_meta/#tostring","title":"tostring","text":"<p>Description</p> <p>Returns a string representation of the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String: A string representation of the inventory, including its class name and ID.</li> </ul> <p>Example</p> <pre><code>print(tostring(inventory))\n-- Output: \"GridInv[123]\"\n</code></pre>"},{"location":"framework/meta/inventory_meta/#gettype","title":"getType","text":"<p>Description</p> <p>Retrieves the type of the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table: The type information of the inventory.</li> </ul> <p>Example</p> <pre><code>local typeInfo = inventory:getType()\nprint(\"Inventory Type:\", typeInfo.typeID)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#ondatachanged","title":"onDataChanged","text":"<p>Description</p> <p>Callback function called when data associated with a key changes.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>key (<code>any</code>): The key whose data has changed.</li> <li>oldValue (<code>any</code>): The old value of the data.</li> <li>newValue (<code>any</code>): The new value of the data.</li> </ul> <p>Example</p> <pre><code>function Inventory:onDataChanged(key, oldValue, newValue)\n    print(key, \"changed from\", oldValue, \"to\", newValue)\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getitems","title":"getItems","text":"<p>Description</p> <p>Retrieves all items in the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table: An array containing all items in the inventory.</li> </ul> <p>Example</p> <pre><code>local items = inventory:getItems()\nfor _, item in ipairs(items) do\n    print(\"Item ID:\", item:getID())\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getitemsoftype","title":"getItemsOfType","text":"<p>Description</p> <p>Retrieves items of a specific type from the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>itemType (<code>String</code>): The type of items to retrieve.</li> </ul> <p>Returns</p> <ul> <li>Table: An array containing items of the specified type.</li> </ul> <p>Example</p> <pre><code>local healthPacks = inventory:getItemsOfType(\"health_pack\")\nfor _, pack in ipairs(healthPacks) do\n    print(\"Health Pack ID:\", pack:getID())\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getfirstitemoftype","title":"getFirstItemOfType","text":"<p>Description</p> <p>Retrieves the first item of a specific type from the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>itemType (<code>String</code>): The type of item to retrieve.</li> </ul> <p>Returns</p> <ul> <li>Table|nil: The first item of the specified type, or <code>nil</code> if not found.</li> </ul> <p>Example</p> <pre><code>local firstHealthPack = inventory:getFirstItemOfType(\"health_pack\")\nif firstHealthPack then\n    print(\"First Health Pack ID:\", firstHealthPack:getID())\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#hasitem","title":"hasItem","text":"<p>Description</p> <p>Checks if the inventory contains an item of a specific type.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>itemType (<code>String</code>): The type of item to check for.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Returns <code>true</code> if the inventory contains an item of the specified type, otherwise <code>false</code>.</li> </ul> <p>Example</p> <pre><code>if inventory:hasItem(\"health_pack\") then\n    print(\"Inventory contains a health pack.\")\nelse\n    print(\"No health packs in inventory.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getitemcount","title":"getItemCount","text":"<p>Description</p> <p>Retrieves the total count of items in the inventory, optionally filtered by item type.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>itemType (<code>String</code>, optional): The type of item to count. If <code>nil</code>, counts all items.</li> </ul> <p>Returns</p> <ul> <li>Integer: The total count of items in the inventory, optionally filtered by item type.</li> </ul> <p>Example</p> <pre><code>local totalItems = inventory:getItemCount()\nprint(\"Total Items:\", totalItems)\nlocal healthPackCount = inventory:getItemCount(\"health_pack\")\nprint(\"Health Packs:\", healthPackCount)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getid","title":"getID","text":"<p>Description</p> <p>Retrieves the ID of the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The ID of the inventory.</li> </ul> <p>Example</p> <pre><code>local invID = inventory:getID()\nprint(\"Inventory ID:\", invID)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#eq","title":"eq","text":"<p>Description</p> <p>Checks if two inventories are equal based on their IDs.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>other (<code>Inventory</code>): The other inventory to compare with.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Returns <code>true</code> if the inventories have the same ID, otherwise <code>false</code>.</li> </ul> <p>Example</p> <pre><code>if inventory1 == inventory2 then\n    print(\"Both inventories are the same.\")\nelse\n    print(\"Inventories are different.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#additem","title":"addItem","text":"<p>Description</p> <p>Adds an item to the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>item (<code>Item</code>): The item to add to the inventory.</li> <li>noReplicate (<code>Bool</code>): Set to <code>true</code> to prevent <code>OnItemAdded</code> from being called on the added item.</li> </ul> <p>Returns</p> <ul> <li>Inventory: Returns the inventory itself.</li> </ul> <p>Example</p> <pre><code>local weapon = lia.item.new(\"weapon_rifle\")\ninventory:addItem(weapon)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#add","title":"add","text":"<p>Description</p> <p>Alias for the <code>addItem</code> function.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>item (<code>Item</code>): The item to add to the inventory.</li> </ul> <p>Returns</p> <ul> <li>Inventory: Returns the inventory itself.</li> </ul> <p>Example</p> <pre><code>inventory:add(weapon)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#syncitemadded","title":"syncItemAdded","text":"<p>Description</p> <p>Synchronizes the addition of an item with clients.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>item (<code>Item</code>): The item being added.</li> </ul> <p>Example</p> <pre><code>inventory:syncItemAdded(weapon)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#initializestorage","title":"initializeStorage","text":"<p>Description</p> <p>Initializes the storage for the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>initialData (<code>Table</code>): Initial data for the inventory.</li> </ul> <p>Returns</p> <ul> <li>Deferred: A deferred promise.</li> </ul> <p>Example</p> <pre><code>local promise = inventory:initializeStorage({char = 1, item1 = \"value1\"})\npromise:next(function(invID)\n    print(\"Inventory initialized with ID:\", invID)\nend)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#restorefromstorage","title":"restoreFromStorage","text":"<p>Description</p> <p>Restores the inventory from storage.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>inventory:restoreFromStorage()\n</code></pre>"},{"location":"framework/meta/inventory_meta/#removeitem","title":"removeItem","text":"<p>Description</p> <p>Removes an item from the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>itemID (<code>int</code>): The ID of the item to remove.</li> <li>preserveItem (<code>Bool</code>): Whether to preserve the item's data in the database.</li> </ul> <p>Returns</p> <ul> <li>Deferred: A deferred promise.</li> </ul> <p>Example</p> <pre><code>inventory:removeItem(12345, true):next(function()\n    print(\"Item removed while preserving data.\")\nend)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#remove","title":"remove","text":"<p>Description</p> <p>Alias for the <code>removeItem</code> function.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>itemID (<code>int</code>): The ID of the item to remove.</li> </ul> <p>Returns</p> <ul> <li>Deferred: A deferred promise.</li> </ul> <p>Example</p> <pre><code>inventory:remove(12345):next(function()\n    print(\"Item removed.\")\nend)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#setdata","title":"setData","text":"<p>Description</p> <p>Sets data associated with a key in the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>key (<code>any</code>): The key to associate the data with.</li> <li>value (<code>any</code>): The value to set for the key.</li> </ul> <p>Returns</p> <ul> <li>Inventory: Returns the inventory itself.</li> </ul> <p>Example</p> <pre><code>inventory:setData(\"owner\", player)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#canaccess","title":"canAccess","text":"<p>Description</p> <p>Checks if a certain action is permitted for the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>action (<code>String</code>): The action to check for access.</li> <li>context (<code>Table</code>): Additional context for the access check.</li> </ul> <p>Returns</p> <ul> <li>Boolean|nil: Returns <code>true</code> if the action is permitted, <code>false</code> if denied, or <code>nil</code> if not applicable.</li> <li>String (optional): A reason for the access result.</li> </ul> <p>Example</p> <pre><code>local canAccess, reason = inventory:canAccess(\"remove_item\", {client = player})\nif canAccess then\n    print(\"Access granted.\")\nelse\n    print(\"Access denied:\", reason)\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#addaccessrule","title":"addAccessRule","text":"<p>Description</p> <p>Adds an access rule to the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>rule (<code>function</code>): The access rule function.</li> <li>priority (<code>int</code>, optional): The priority of the access rule.</li> </ul> <p>Returns</p> <ul> <li>Inventory: Returns the inventory itself.</li> </ul> <p>Example</p> <pre><code>inventory:addAccessRule(function(inv, action, context)\n    if action == \"remove_item\" and context.client:IsAdmin() then\n        return true\n    end\nend, 10)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#removeaccessrule","title":"removeAccessRule","text":"<p>Description</p> <p>Removes an access rule from the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>rule (<code>function</code>): The access rule function to remove.</li> </ul> <p>Returns</p> <ul> <li>Inventory: Returns the inventory itself.</li> </ul> <p>Example</p> <pre><code>inventory:removeAccessRule(existingRuleFunction)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getrecipients","title":"getRecipients","text":"<p>Description</p> <p>Retrieves the recipients for synchronization.</p> <p>Realm</p> <p><code>Server</code></p> <p>Returns</p> <ul> <li>Table: An array containing the recipients for synchronization.</li> </ul> <p>Example</p> <pre><code>local recipients = inventory:getRecipients()\nfor _, client in ipairs(recipients) do\n    print(\"Syncing with client:\", client:Nick())\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#oninstanced","title":"onInstanced","text":"<p>Description</p> <p>Initializes an instance of the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>inventory:onInstanced()\n</code></pre>"},{"location":"framework/meta/inventory_meta/#onloaded","title":"onLoaded","text":"<p>Description</p> <p>Callback function called when the inventory is loaded.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>function Inventory:onLoaded()\n    print(\"Inventory loaded.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#loaditems","title":"loadItems","text":"<p>Description</p> <p>Loads items from the database into the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Returns</p> <ul> <li>Deferred: A deferred promise.</li> </ul> <p>Example</p> <pre><code>inventory:loadItems():next(function(items)\n    print(\"Items loaded:\", #items)\nend)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#onitemsloaded","title":"onItemsLoaded","text":"<p>Description</p> <p>Callback function called when items are loaded into the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>function Inventory:onItemsLoaded(items)\n    print(\"Loaded\", #items, \"items into the inventory.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#instance","title":"instance","text":"<p>Description</p> <p>Instantiates a new inventory instance.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>initialData (<code>Table</code>): Initial data for the inventory instance.</li> </ul> <p>Returns</p> <ul> <li>Table: The newly instantiated inventory instance.</li> </ul> <p>Example</p> <pre><code>local instance = inventory:instance({char = 1, item1 = \"value1\"})\n</code></pre>"},{"location":"framework/meta/inventory_meta/#syncdata","title":"syncData","text":"<p>Description</p> <p>Synchronizes data changes with clients.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>key (<code>any</code>): The key whose data has changed.</li> <li>recipients (<code>Table</code>): The recipients to synchronize with.</li> </ul> <p>Example</p> <pre><code>inventory:syncData(\"health\", {client = player})\n</code></pre>"},{"location":"framework/meta/inventory_meta/#sync","title":"sync","text":"<p>Description</p> <p>Synchronizes the inventory with clients.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>recipients (<code>Table</code>, optional): The recipients to synchronize with.</li> </ul> <p>Example</p> <pre><code>inventory:sync()\n</code></pre>"},{"location":"framework/meta/inventory_meta/#delete","title":"delete","text":"<p>Description</p> <p>Deletes the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>inventory:delete()\n</code></pre>"},{"location":"framework/meta/inventory_meta/#destroy","title":"destroy","text":"<p>Description</p> <p>Destroys the inventory and its associated items.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>inventory:destroy()\n</code></pre>"},{"location":"framework/meta/inventory_meta/#show","title":"show","text":"<p>Description</p> <p>Displays the inventory UI to the specified parent element.</p> <p>Realm</p> <p><code>Client</code></p> <p>Parameters</p> <ul> <li>parent (<code>any</code>, optional): The parent element to which the inventory UI will be displayed.</li> </ul> <p>Returns</p> <ul> <li>any: The result of the <code>lia.inventory.show</code> function.</li> </ul> <p>Example</p> <pre><code>inventory:show(panel)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getwidth","title":"getWidth","text":"<p>Description</p> <p>Retrieves the width of the inventory grid.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The width of the inventory grid.</li> </ul> <p>Example</p> <pre><code>local width = inventory:getWidth()\nprint(\"Inventory Width:\", width)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getheight","title":"getHeight","text":"<p>Description</p> <p>Retrieves the height of the inventory grid.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The height of the inventory grid.</li> </ul> <p>Example</p> <pre><code>local height = inventory:getHeight()\nprint(\"Inventory Height:\", height)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#getsize","title":"getSize","text":"<p>Description</p> <p>Retrieves the size (width and height) of the inventory grid.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The width of the inventory grid.</li> <li>Integer: The height of the inventory grid.</li> </ul> <p>Example</p> <pre><code>local width, height = inventory:getSize()\nprint(\"Inventory Size:\", width, \"x\", height)\n</code></pre>"},{"location":"framework/meta/inventory_meta/#canitemfitininventory","title":"canItemFitInInventory","text":"<p>Description</p> <p>Checks if an item can fit in the inventory at a given position.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>item (<code>Item</code>): The item to check.</li> <li>x (<code>Integer</code>): The X position in the inventory grid.</li> <li>y (<code>Integer</code>): The Y position in the inventory grid.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the item can fit in the inventory.</li> </ul> <p>Example</p> <pre><code>local canFit = inventory:canItemFitInInventory(item, 2, 3)\nif canFit then\n    print(\"Item can fit at position (2,3).\")\nelse\n    print(\"Item cannot fit at position (2,3).\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#canadd","title":"canAdd","text":"<p>Description</p> <p>Checks if an item can fit within the inventory based on its size.</p> <p>Verifies whether the item's width and height are within the bounds of the inventory dimensions.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>item (<code>String|Item</code>): The item to check. This can be a string representing the item type or the item object itself.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the item fits within the inventory dimensions, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>local canFit = inventory:canAdd(\"health_pack\")\nif canFit then\n    print(\"Health pack can be added to the inventory.\")\nelse\n    print(\"Health pack is too large for the inventory.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#doesitemoverlapwithother","title":"doesItemOverlapWithOther","text":"<p>Description</p> <p>Checks if an item overlaps with another item in the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>testItem (<code>Item</code>): The item to test for overlap.</li> <li>x (<code>Integer</code>): The X position of the test item in the inventory grid.</li> <li>y (<code>Integer</code>): The Y position of the test item in the inventory grid.</li> <li>item (<code>Item</code>): The item to check against.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the test item overlaps with the given item.</li> </ul> <p>Example</p> <pre><code>local overlaps = inventory:doesItemOverlapWithOther(testItem, 5, 5, existingItem)\nif overlaps then\n    print(\"Items overlap.\")\nelse\n    print(\"No overlap detected.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#doesfitinventory","title":"doesFitInventory","text":"<p>Description</p> <p>Checks if an item can fit in the inventory, including within bags.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>item (<code>Item</code>): The item to check.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the item can fit in the inventory.</li> </ul> <p>Example</p> <pre><code>local canFit = inventory:doesFitInventory(item)\nif canFit then\n    print(\"Item can fit in the inventory or its bags.\")\nelse\n    print(\"No space available for the item.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#doesitemfitatpos","title":"doesItemFitAtPos","text":"<p>Description</p> <p>Checks if an item fits at a specific position in the inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>testItem (<code>Item</code>): The item to check.</li> <li>x (<code>Integer</code>): The X position in the inventory grid.</li> <li>y (<code>Integer</code>): The Y position in the inventory grid.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the item fits at the given position.</li> <li>Item (optional): The item it overlaps with, if any.</li> </ul> <p>Example</p> <pre><code>local fits, overlappingItem = inventory:doesItemFitAtPos(testItem, 3, 4)\nif fits then\n    print(\"Item fits at position (3,4).\")\nelse\n    print(\"Item overlaps with:\", overlappingItem:getID())\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#findfreeposition","title":"findFreePosition","text":"<p>Description</p> <p>Finds a free position in the inventory where an item can fit.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>item (<code>Item</code>): The item to find a position for.</li> </ul> <p>Returns</p> <ul> <li>Integer|nil: The X position in the inventory grid, or <code>nil</code> if no position is found.</li> <li>Integer|nil: The Y position in the inventory grid, or <code>nil</code> if no position is found.</li> </ul> <p>Example</p> <pre><code>local x, y = inventory:findFreePosition(item)\nif x and y then\n    print(\"Free position found at:\", x, y)\nelse\n    print(\"No free position available for the item.\")\nend\n</code></pre>"},{"location":"framework/meta/inventory_meta/#setsize","title":"setSize","text":"<p>Description</p> <p>Sets the size of the inventory grid.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>w (<code>Integer</code>): The width of the grid.</li> <li>h (<code>Integer</code>): The height of the grid.</li> </ul> <p>Example</p> <pre><code>inventory:setSize(10, 8)\nprint(\"Inventory size set to 10x8.\")\n</code></pre>"},{"location":"framework/meta/inventory_meta/#wipeitems","title":"wipeItems","text":"<p>Description</p> <p>Removes all items from the inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>inventory:wipeItems()\nprint(\"All items have been removed from the inventory.\")\n</code></pre>"},{"location":"framework/meta/inventory_meta/#setowner","title":"setOwner","text":"<p>Description</p> <p>Sets the owner of the inventory.</p> <p>If the owner is a player, it sets the inventory's owner to the player's character ID.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>owner (<code>Player|Integer</code>): The new owner of the inventory (Player object or character ID number).</li> <li>fullUpdate (<code>Bool</code>, optional): Whether to sync the inventory to the client.</li> </ul> <p>Example</p> <pre><code>inventory:setOwner(player, true)\nprint(\"Inventory owner set to player.\")\n</code></pre>"},{"location":"framework/meta/inventory_meta/#requesttransfer","title":"requestTransfer","text":"<p>Description</p> <p>Requests a transfer of an item to another inventory.</p> <p>Realm</p> <p><code>Client</code></p> <p>Parameters</p> <ul> <li>itemID (<code>Integer</code>): The ID of the item to transfer.</li> <li>destinationID (<code>Integer</code>): The ID of the destination inventory.</li> <li>x (<code>Integer</code>): The X position in the destination grid.</li> <li>y (<code>Integer</code>): The Y position in the destination grid.</li> </ul> <p>Example</p> <pre><code>inventory:requestTransfer(456, destinationInventoryID, 2, 3)\nprint(\"Transfer request sent for item 456.\")\n</code></pre>"},{"location":"framework/meta/item_meta/","title":"Item meta","text":"<p>Interactable entities that can be held in inventories.</p> <p>Items are objects that are contained inside of an <code>Inventory</code>, or as standalone entities if they are dropped in the world. They usually have functionality that provides more gameplay aspects to the schema.</p> <p>For an item to have an actual presence, they need to be instanced (usually by spawning them). Items describe the properties, while instances are a clone of these properties that can have their own unique data (e.g., an ID card will have the same name but different numerical IDs). You can think of items as the class, while instances are objects of the <code>Item</code> class.</p>"},{"location":"framework/meta/item_meta/#eq","title":"eq","text":"<p>Description</p> <p>Compares this item with another item for equality based on their unique IDs.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>other (<code>Item</code>): The other item to compare against.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if both items have the same database ID, otherwise <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local item1 = lia.item.instances[1]\nlocal item2 = lia.item.instances[2]\n\nif item1 == item2 then\n    print(\"Items are equal.\")\nelse\n    print(\"Items are not equal.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#tostring","title":"tostring","text":"<p>Description</p> <p>Generates a human-readable string representation of the item.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String: A string in the format <code>\"item[uniqueID][ID]\"</code>.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nprint(tostring(item))\n-- Output: \"item[exampleUniqueID][1]\"\n</code></pre>"},{"location":"framework/meta/item_meta/#getquantity","title":"getQuantity","text":"<p>Description</p> <p>Retrieves the quantity of this item. For items with <code>id == 0</code>, it returns the <code>maxQuantity</code>.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The current quantity of the item.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal qty = item:getQuantity()\nprint(\"Item quantity:\", qty)\n</code></pre>"},{"location":"framework/meta/item_meta/#getid","title":"getID","text":"<p>Description</p> <p>Gets this item's database ID, which is guaranteed to be unique.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The unique database ID of the item.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nprint(\"Item ID:\", item:getID())\n</code></pre>"},{"location":"framework/meta/item_meta/#getmodel","title":"getModel","text":"<p>Description</p> <p>Returns the model path for this item.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String: The model path of the item.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nprint(\"Item model:\", item:getModel())\n</code></pre>"},{"location":"framework/meta/item_meta/#getskin","title":"getSkin","text":"<p>Description</p> <p>Retrieves the skin index used by this item (if any).</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The skin index of the item.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nprint(\"Item skin:\", item:getSkin())\n</code></pre>"},{"location":"framework/meta/item_meta/#getprice","title":"getPrice","text":"<p>Description</p> <p>Returns the price of the item. If a <code>calcPrice</code> method exists on the item, it is used to compute a dynamic price.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Float: The price of the item.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal price = item:getPrice()\nprint(\"Item price:\", price)\n</code></pre>"},{"location":"framework/meta/item_meta/#call","title":"call","text":"<p>Description</p> <p>Invokes one of the item's methods dynamically. Sets <code>self.player</code> and <code>self.entity</code> temporarily while the method is called.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>method (<code>String</code>): The name of the method to invoke on the item.  </li> <li>client (<code>Player</code>, optional): The player related to this call, if any.  </li> <li>entity (<code>Entity</code>, optional): The entity related to this call, if any.  </li> <li>...: Additional parameters passed to the invoked method.</li> </ol> <p>Returns</p> <ul> <li>any: The return values of the invoked method, if any.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:call(\"use\", player, entity, \"someArgument\")\n</code></pre>"},{"location":"framework/meta/item_meta/#getowner","title":"getOwner","text":"<p>Description</p> <p>Retrieves the player who currently owns this item, if any. Ownership is determined by whichever inventory contains this item, or by a direct check for the item ID within the player's inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Player|nil: The owner of this item, or <code>nil</code> if no owner is found.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal owner = item:getOwner()\nif owner then\n    print(\"Item is owned by:\", owner:Nick())\nelse\n    print(\"No valid owner found.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#getdata","title":"getData","text":"<p>Description</p> <p>Retrieves a stored data value from the item's internal <code>data</code> table (or from the item's entity network vars if it exists in the world).</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>key (<code>String</code>): The key under which the value is stored.  </li> <li>default (<code>any</code>, optional): The fallback value if no data is found.</li> </ol> <p>Returns</p> <ul> <li>any: The stored value for the specified key, or <code>default</code> if none exists.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal health = item:getData(\"health\", 100)\nprint(\"Item Health:\", health)\n</code></pre>"},{"location":"framework/meta/item_meta/#getalldata","title":"getAllData","text":"<p>Description</p> <p>Combines and returns all stored data from this item, including data from its entity if it exists in the world.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>table: A table containing all data related to the item.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal fullData = item:getAllData()\nPrintTable(fullData)\n</code></pre>"},{"location":"framework/meta/item_meta/#hook","title":"hook","text":"<p>Description</p> <p>Assigns a function to be executed when a particular event (hook) occurs on this item.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>name (<code>String</code>): The name of the event (e.g., <code>\"onUse\"</code>).  </li> <li>func (<code>function</code>): The function to be called when the event occurs.</li> </ol> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:hook(\"onUse\", function(it)\n    print(\"Item was used.\")\nend)\n</code></pre>"},{"location":"framework/meta/item_meta/#posthook","title":"postHook","text":"<p>Description</p> <p>Assigns a function to be executed after a particular hook runs.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>name (<code>String</code>): The name of the event (e.g., <code>\"onUse\"</code>).  </li> <li>func (<code>function</code>): The function to be called after the original hook is executed.</li> </ol> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:postHook(\"onUse\", function(it, result)\n    print(\"Item post-use logic executed.\")\nend)\n</code></pre>"},{"location":"framework/meta/item_meta/#onregistered","title":"onRegistered","text":"<p>Description</p> <p>Called when the item is registered. Useful for post-registration tasks.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>function ITEM:onRegistered()\n    print(\"Item has been registered.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#print","title":"print","text":"<p>Description</p> <p>Utility function to print basic item info (and optionally details like owner and inventory position).</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>detail (<code>boolean</code>, optional): Whether or not to include extra information (owner, grid position).</li> </ol> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:print()        -- Prints basic info\nitem:print(true)    -- Prints extended info\n</code></pre>"},{"location":"framework/meta/item_meta/#printdata","title":"printData","text":"<p>Description</p> <p>Utility function that prints all stored data related to this item. Useful for debugging.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:printData()\n</code></pre>"},{"location":"framework/meta/item_meta/#getname","title":"getName","text":"<p>Description</p> <p>Retrieves the name of the item. On the server, it returns <code>ITEM.name</code> directly; on the client, it may be localized.</p> <p>Realm</p> <p><code>Server</code> (or <code>Client</code>, or <code>Shared</code> depending on usage)</p> <p>Returns</p> <ul> <li>String: The name of the item (or localized name on the client).</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nprint(\"Item name:\", item:getName())\n</code></pre>"},{"location":"framework/meta/item_meta/#getdesc","title":"getDesc","text":"<p>Description</p> <p>Retrieves the description of the item. On the server, returns <code>ITEM.desc</code> directly; on the client, may be localized.</p> <p>Realm</p> <p><code>Server</code> (or <code>Client</code> or <code>Shared</code>)</p> <p>Returns</p> <ul> <li>String: The item's description (potentially localized on the client).</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nprint(\"Item description:\", item:getDesc())\n</code></pre>"},{"location":"framework/meta/item_meta/#removefrominventory","title":"removeFromInventory","text":"<p>Description</p> <p>Removes this item from its current inventory. Optionally, the removal can preserve the item in the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>preserveItem (<code>boolean</code>, optional): If <code>true</code>, the item is not fully deleted from the database.</li> </ol> <p>Returns</p> <ul> <li>Deferred: A deferred object that resolves once the item is removed from the inventory.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:removeFromInventory(true):next(function()\n    print(\"Item removed while preserving data.\")\nend)\n</code></pre>"},{"location":"framework/meta/item_meta/#delete","title":"delete","text":"<p>Description</p> <p>Deletes the item from the database (and memory). After calling this, the item no longer exists persistently.</p> <p>Realm</p> <p><code>Server</code></p> <p>Returns</p> <ul> <li>Deferred: A deferred object that resolves when the item is successfully removed from the database.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:delete():next(function()\n    print(\"Item deleted from database.\")\nend)\n</code></pre>"},{"location":"framework/meta/item_meta/#remove","title":"remove","text":"<p>Description</p> <p>Removes the item from the game world, its inventory, and then proceeds to delete it from the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Returns</p> <ul> <li>Deferred: A deferred object that resolves when removal is complete and the item is deleted.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:remove():next(function()\n    print(\"Item fully removed from the world and database.\")\nend)\n</code></pre>"},{"location":"framework/meta/item_meta/#destroy","title":"destroy","text":"<p>Description</p> <p>Destroys the item instance in memory and notifies connected clients to remove the item. This does not remove the record from the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:destroy()\n-- The item is gone from memory and clients are instructed to remove it.\n</code></pre>"},{"location":"framework/meta/item_meta/#ondisposed","title":"onDisposed","text":"<p>Description</p> <p>Called when the item is disposed (i.e., destroyed and removed from memory).</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>function ITEM:onDisposed()\n    print(\"Item has been disposed of.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#getentity","title":"getEntity","text":"<p>Description</p> <p>Finds the corresponding world entity (<code>ents.FindByClass(\"lia_item\")</code>) for this item, if it exists.</p> <p>Realm</p> <p><code>Server</code></p> <p>Returns</p> <ul> <li>Entity|nil: The item entity if found, otherwise <code>nil</code>.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal entity = item:getEntity()\nif IsValid(entity) then\n    print(\"Found item entity in the world.\")\nelse\n    print(\"Item entity not found.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#spawn","title":"spawn","text":"<p>Description</p> <p>Spawns this item into the game world as a physical entity. If an entity already exists for the item, it is removed before spawning a new one.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>position (<code>Vector</code> or <code>Player</code>): The position to spawn the item, or a <code>Player</code> from which the spawn position will be derived.  </li> <li>angles (<code>Angle</code>, optional): The angles at which the entity should spawn.</li> </ol> <p>Returns</p> <ul> <li>Entity: The newly created item entity.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal spawnPos = Vector(0, 0, 0)\nlocal spawnedEntity = item:spawn(spawnPos, Angle(0, 0, 0))\n</code></pre>"},{"location":"framework/meta/item_meta/#transfer","title":"transfer","text":"<p>Description</p> <p>Moves this item to another inventory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>newInventory (<code>Inventory</code>): The target inventory to transfer to.  </li> <li>bBypass (<code>boolean</code>, optional): If <code>true</code>, bypasses access checks.</li> </ol> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if transfer began successfully, otherwise <code>false</code>.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal targetInv = lia.inventory.instances[2]\nlocal success = item:transfer(targetInv)\nif success then\n    print(\"Item transferred successfully.\")\nelse\n    print(\"Item transfer failed.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#oninstanced","title":"onInstanced","text":"<p>Description</p> <p>Called when the item is created/instanced. Useful for performing operations right after the item is first spawned in memory.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>function ITEM:onInstanced()\n    print(\"Item instance created.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#onsync","title":"onSync","text":"<p>Description</p> <p>Called when the item data is synced to a specific recipient or broadcast to all players.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>recipient (<code>Player</code>, optional): The player receiving the item data. Could be <code>nil</code> if broadcasted to all.</li> </ul> <p>Example</p> <pre><code>function ITEM:onSync(recipient)\n    if recipient then\n        print(\"Item synced to:\", recipient:Nick())\n    else\n        print(\"Item synced to all players.\")\n    end\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#onremoved","title":"onRemoved","text":"<p>Description</p> <p>Called when the item is removed from the database (e.g., after a full delete).</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>function ITEM:onRemoved()\n    print(\"Item removed from database.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#onrestored","title":"onRestored","text":"<p>Description</p> <p>Called when the item is restored (for instance, from a saved database state).</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>function ITEM:onRestored()\n    print(\"Item was restored from the database.\")\nend\n</code></pre>"},{"location":"framework/meta/item_meta/#sync","title":"sync","text":"<p>Description</p> <p>Synchronizes this item's data with one or more players. If <code>recipient</code> is <code>nil</code>, the data is broadcast to all players.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>recipient (<code>Player</code>, optional): The player to synchronize with. If <code>nil</code>, broadcasts to all.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\n-- Sync to a specific player\nitem:sync(somePlayer)\n-- Or sync to everyone\nitem:sync()\n</code></pre>"},{"location":"framework/meta/item_meta/#setdata","title":"setData","text":"<p>Description</p> <p>Sets or updates a key-value pair within the item's data table, optionally updates the network data, and writes to the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>key (<code>String</code>): The key to store the value under.  </li> <li>value (<code>any</code>): The value to set. If <code>nil</code>, the key is removed.  </li> <li>receivers (<code>table|Player</code>, optional): Who should receive the data update. Defaults to the item owner if not provided.  </li> <li>noSave (<code>boolean</code>, optional): If <code>true</code>, does not save to the database.  </li> <li>noCheckEntity (<code>boolean</code>, optional): If <code>true</code>, skips updating any existing entity netvars.</li> </ol> <p>Example</p> <pre><code>local item = lia.item.instances[1]\n-- Set \"health\" to 100 and broadcast to the owner\nitem:setData(\"health\", 100)\n\n-- Set \"armor\" to 50 and only send updates to a specific player\nitem:setData(\"armor\", 50, {somePlayer})\n</code></pre>"},{"location":"framework/meta/item_meta/#addquantity","title":"addQuantity","text":"<p>Description</p> <p>Adds a specified amount to this item's current quantity.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>quantity (<code>int</code>): The amount to add.  </li> <li>receivers (<code>table|Player</code>, optional): Recipients for quantity change updates.  </li> <li>noCheckEntity (<code>boolean</code>, optional): If <code>true</code>, skip updating the entity netvar.</li> </ol> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:addQuantity(5, {player1, player2})\n</code></pre>"},{"location":"framework/meta/item_meta/#setquantity","title":"setQuantity","text":"<p>Description</p> <p>Directly sets the quantity for this item to a specified value.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>quantity (<code>int</code>): The new quantity.  </li> <li>receivers (<code>table|Player</code>, optional): Recipients for quantity change updates.  </li> <li>noCheckEntity (<code>boolean</code>, optional): If <code>true</code>, skip updating the entity netvar.</li> </ol> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nitem:setQuantity(10, {player1, player2})\n</code></pre>"},{"location":"framework/meta/item_meta/#interact","title":"interact","text":"<p>Description</p> <p>Handles an interaction action (e.g. <code>\"use\"</code>, <code>\"drop\"</code>, etc.) performed by a player on this item. Checks for relevant hooks, conditions, and then removes the item if interaction is successful and not returning a promise.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>action (<code>String</code>): The name of the interaction action (e.g., <code>\"use\"</code>).  </li> <li>client (<code>Player</code>): The player interacting with the item.  </li> <li>entity (<code>Entity</code>, optional): The entity linked to this interaction.  </li> <li>data (<code>Table</code>, optional): Any additional data associated with the interaction.</li> </ol> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the interaction was successfully processed, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>local item = lia.item.instances[1]\nlocal success = item:interact(\"use\", player, item:getEntity())\nif success then\n    print(\"Item use interaction completed successfully.\")\nelse\n    print(\"Item use interaction failed.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/","title":"Player meta","text":"<p>Physical representation of connected players.</p> <p>Players are a type of Entity. They are a physical representation of a <code>Character</code> - and can possess at most one <code>Character</code> object at a time that you can interface with.</p> <p>See the Garry's Mod Wiki for all other methods that the <code>Player</code> class has.</p>"},{"location":"framework/meta/player_meta/#getchar","title":"getChar","text":"<p>Description</p> <p>Retrieves this player's currently possessed <code>Character</code> object if it exists.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Character|nil: The currently loaded character or <code>nil</code> if no character is loaded.</li> </ul> <p>Example</p> <pre><code>local char = player:getChar()\nif char then\n    print(\"Character Name:\", char:getName())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#name","title":"Name","text":"<p>Description</p> <p>Returns this player's current name. If the player has a character loaded, it returns the character's name; otherwise, it returns the player's Steam name.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String: The name of the player's currently loaded character or the player's Steam name if no character is loaded.</li> </ul> <p>Example</p> <pre><code>print(\"Player Name:\", player:Name())\n</code></pre>"},{"location":"framework/meta/player_meta/#hasprivilege","title":"hasPrivilege","text":"<p>Description</p> <p>Checks if the player has a specified CAMI privilege.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>privilegeName (<code>String</code>): The name of the privilege to check.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player has the privilege, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:hasPrivilege(\"admin\") then\n    print(\"Player is an admin.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getcurrentvehicle","title":"getCurrentVehicle","text":"<p>Description</p> <p>Gets the current vehicle the player is in, if any.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Entity|nil: The current vehicle entity or <code>nil</code> if the player is not in a vehicle.</li> </ul> <p>Example</p> <pre><code>local vehicle = player:getCurrentVehicle()\nif vehicle then\n    print(\"Player is in a vehicle:\", vehicle:GetClass())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#hasvalidvehicle","title":"hasValidVehicle","text":"<p>Description</p> <p>Checks if the player is in a valid vehicle.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is in a valid vehicle, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:hasValidVehicle() then\n    print(\"Player is in a valid vehicle.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isnoclipping","title":"isNoClipping","text":"<p>Description</p> <p>Checks if the player is currently in noclip mode.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is in noclip mode, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isNoClipping() then\n    print(\"Player is in noclip mode.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#hasragdoll","title":"hasRagdoll","text":"<p>Description</p> <p>Checks if the player has a valid ragdoll entity.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player has a valid ragdoll entity, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:hasRagdoll() then\n    print(\"Player has a ragdoll.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getragdoll","title":"getRagdoll","text":"<p>Description</p> <p>Returns the player's ragdoll entity if it exists and is valid.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Entity|nil: The player's ragdoll entity or <code>nil</code> if none exists.</li> </ul> <p>Example</p> <pre><code>local ragdoll = player:getRagdoll()\nif ragdoll then\n    print(\"Ragdoll found:\", ragdoll:GetClass())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isstuck","title":"isStuck","text":"<p>Description</p> <p>Determines whether the player is stuck using a trace.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is stuck, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isStuck() then\n    print(\"Player is stuck.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isnearplayer","title":"isNearPlayer","text":"<p>Description</p> <p>Checks if the player is near another entity within a specified radius.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>radius (<code>int</code>): The radius within which to check for proximity.</li> <li>entity (<code>Entity</code>): The entity to check proximity to.</li> </ol> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is near the specified entity within the given radius, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isNearPlayer(100, targetPlayer) then\n    print(\"Player is near the target.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#entitiesnearplayer","title":"entitiesNearPlayer","text":"<p>Description</p> <p>Retrieves entities near the player within a specified radius. Can filter to only include players.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>radius (<code>int</code>): The radius within which to search for entities.</li> <li>playerOnly (<code>Bool</code>): If <code>true</code>, only return player entities.</li> </ol> <p>Returns</p> <ul> <li>Table: A table containing the entities near the player.</li> </ul> <p>Example</p> <pre><code>local nearbyPlayers = player:entitiesNearPlayer(200, true)\nfor _, p in ipairs(nearbyPlayers) do\n    print(\"Nearby Player:\", p:Nick())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getitemweapon","title":"getItemWeapon","text":"<p>Description</p> <p>Retrieves the active weapon item of the player along with its corresponding inventory item.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Entity|nil: The active weapon entity or <code>nil</code> if not found.</li> <li>Item|nil: The corresponding inventory item or <code>nil</code> if not found.</li> </ul> <p>Example</p> <pre><code>local weapon, item = player:getItemWeapon()\nif weapon then\n    print(\"Active Weapon:\", weapon:GetClass())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isrunning","title":"isRunning","text":"<p>Description</p> <p>Checks if the player is running based on their velocity compared to their walk speed.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is running, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isRunning() then\n    print(\"Player is running.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isfemale","title":"isFemale","text":"<p>Description</p> <p>Determines if the player's character model is female based on model naming conventions.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player's character is female, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isFemale() then\n    print(\"Player character is female.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getitemdroppos","title":"getItemDropPos","text":"<p>Description</p> <p>Calculates the position to drop an item from the player's inventory based on their current view.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Vector: The position where the item should be dropped.</li> </ul> <p>Example</p> <pre><code>local dropPos = player:getItemDropPos()\nitem:spawn(dropPos, Angle(0, 0, 0))\n</code></pre>"},{"location":"framework/meta/player_meta/#getitems","title":"getItems","text":"<p>Description</p> <p>Retrieves the items from the player's character inventory.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table|nil: A table containing the items in the player's character inventory or <code>nil</code> if not found.</li> </ul> <p>Example</p> <pre><code>local items = player:getItems()\nif items then\n    for _, item in ipairs(items) do\n        print(\"Item:\", item.uniqueID)\n    end\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#gettracedentity","title":"getTracedEntity","text":"<p>Description</p> <p>Retrieves the entity traced by the player's aim within a short distance.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Entity|nil: The entity traced by the player's aim or <code>nil</code> if none is found.</li> </ul> <p>Example</p> <pre><code>local target = player:getTracedEntity()\nif target then\n    print(\"Traced Entity:\", target:GetClass())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#gettrace","title":"getTrace","text":"<p>Description</p> <p>Performs a hull trace from the player's view and returns the trace result.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table: A table containing the trace result.</li> </ul> <p>Example</p> <pre><code>local trace = player:getTrace()\nif trace.Hit then\n    print(\"Trace hit:\", trace.Entity:GetClass())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#geteyeent","title":"getEyeEnt","text":"<p>Description</p> <p>Retrieves the entity within the player's line of sight up to a specified distance.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>distance (<code>int</code>, optional): The maximum distance to consider. Defaults to <code>150</code>.</li> </ul> <p>Returns</p> <ul> <li>Entity|nil: The entity within the player's line of sight or <code>nil</code> if none is found.</li> </ul> <p>Example</p> <pre><code>local eyeEnt = player:getEyeEnt(200)\nif eyeEnt then\n    print(\"Entity in sight:\", eyeEnt:GetClass())\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#loadliliadata","title":"loadLiliaData","text":"<p>Description</p> <p>Loads Lilia data for the player from the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>callback (<code>function</code>): A function to call after the data is loaded, receiving the loaded data as an argument.</li> </ul> <p>Example</p> <pre><code>player:loadLiliaData(function(data)\n    print(\"Data loaded:\", data)\nend)\n</code></pre>"},{"location":"framework/meta/player_meta/#saveliliadata","title":"saveLiliaData","text":"<p>Description</p> <p>Saves the player's Lilia data to the database.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>player:saveLiliaData()\n</code></pre>"},{"location":"framework/meta/player_meta/#setliliadata","title":"setLiliaData","text":"<p>Description</p> <p>Sets a key-value pair in the player's Lilia data. Optionally suppresses networking of the data update.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>key (<code>String</code>): The key for the data.</li> <li>value (<code>any</code>, optional): The value to set for the specified key. Defaults to <code>nil</code> if not provided.</li> <li>noNetworking (<code>boolean</code>, optional): If <code>true</code>, the data update will not be sent to clients. Defaults to <code>false</code>.</li> </ol> <p>Example</p> <pre><code>-- Example 1: Setting a key-value pair with networking\nplayer:setLiliaData(\"score\", 1500)\n\n-- Example 2: Setting a key-value pair without networking\nplayer:setLiliaData(\"health\", 100, true)\n</code></pre>"},{"location":"framework/meta/player_meta/#chatnotify","title":"chatNotify","text":"<p>Description</p> <p>Notifies the player with a message in the chatbox.</p> <p>Realm</p> <p><code>Server</code> and Client</p> <p>Parameters</p> <ul> <li>message (<code>String</code>): The message to notify the player.</li> </ul> <p>Example</p> <pre><code>player:chatNotify(\"Welcome to the server!\")\n</code></pre>"},{"location":"framework/meta/player_meta/#chatnotifylocalized","title":"chatNotifyLocalized","text":"<p>Description</p> <p>Notifies the player with a localized message in the chatbox.</p> <p>Realm</p> <p><code>Server</code> and Client</p> <p>Parameters</p> <ul> <li>message (<code>String</code>): The key of the localized message to notify the player.</li> <li>... (<code>any</code>): Additional arguments to format the localized message.</li> </ul> <p>Example</p> <pre><code>player:chatNotifyLocalized(\"welcome_message\", player:Nick())\n</code></pre>"},{"location":"framework/meta/player_meta/#chaterror","title":"chatError","text":"<p>Description</p> <p>Notifies the player with an error message in the chatbox.</p> <p>Realm</p> <p><code>Server</code> and Client</p> <p>Parameters</p> <ul> <li>message (<code>String</code>): The error message to notify the player.</li> </ul> <p>Example</p> <pre><code>player:chatError(\"An error occurred!\")\n</code></pre>"},{"location":"framework/meta/player_meta/#chaterrorlocalized","title":"chatErrorLocalized","text":"<p>Description</p> <p>Notifies the player with a localized error message in the chatbox.</p> <p>Realm</p> <p><code>Server</code> and Client</p> <p>Parameters</p> <ul> <li>message (<code>String</code>): The key of the localized error message to notify the player.</li> <li>... (<code>any</code>): Additional arguments to format the localized message.</li> </ul> <p>Example</p> <pre><code>player:chatErrorLocalized(\"error_message\", player:Nick())\n</code></pre>"},{"location":"framework/meta/player_meta/#getliliadata","title":"getLiliaData","text":"<p>Description</p> <p>Retrieves a value from the player's Lilia data.</p> <p>Realm</p> <p><code>Server</code> and Client</p> <p>Parameters</p> <ol> <li>key (<code>String</code>): The key for the data.</li> <li>default (<code>any</code>, optional): The default value to return if the key does not exist.</li> </ol> <p>Returns</p> <ul> <li>any: The value corresponding to the key, or the default value if the key does not exist.</li> </ul> <p>Example</p> <pre><code>local level = player:getLiliaData(\"level\", 1)\nprint(\"Player Level:\", level)\n</code></pre>"},{"location":"framework/meta/player_meta/#getallliliadata","title":"getAllLiliaData","text":"<p>Description</p> <p>Retrieves the full Lilia data table for the player.</p> <p>Realm</p> <p><code>Server</code> and Client</p> <p>Returns</p> <ul> <li>table: The entire Lilia data table for the player.</li> </ul> <p>Example</p> <pre><code>local fullData = player:getAllLiliaData()\n-- Print all data for debugging\nPrintTable(fullData)\n</code></pre>"},{"location":"framework/meta/player_meta/#setragdoll","title":"setRagdoll","text":"<p>Description</p> <p>Sets the player's ragdoll entity.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>entity (<code>Entity</code>): The entity to set as the player's ragdoll.</li> </ul> <p>Example</p> <pre><code>local ragdoll = player:createServerRagdoll()\nplayer:setRagdoll(ragdoll)\n</code></pre>"},{"location":"framework/meta/player_meta/#setaction","title":"setAction","text":"<p>Description</p> <p>Sets an action bar for the player with optional duration and callback.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>text (<code>String</code>): The text to display on the action bar.</li> <li>time (<code>int</code>, optional): The duration for the action bar to display in seconds. Set to <code>0</code> or <code>nil</code> to remove the action bar immediately.</li> <li>callback (<code>function</code>, optional): Function to execute when the action bar timer expires.</li> <li>startTime (<code>int</code>, optional): The start time of the action bar, defaults to the current time.</li> <li>finishTime (<code>int</code>, optional): The finish time of the action bar, defaults to <code>startTime + time</code>.</li> </ol> <p>Example</p> <pre><code>player:setAction(\"Processing...\", 10, function(p) print(\"Action completed for\", p:Nick()) end)\n</code></pre>"},{"location":"framework/meta/player_meta/#stopaction","title":"stopAction","text":"<p>Description</p> <p>Stops the action bar currently being displayed for the player.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>player:stopAction()\n</code></pre>"},{"location":"framework/meta/player_meta/#playsound","title":"playSound","text":"<p>Description</p> <p>Plays a sound for the player.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>sound (<code>String</code>): The sound to play.</li> <li>volume (<code>int</code>, optional): The volume of the sound. Defaults to <code>75</code>.</li> <li>pitch (<code>int</code>, optional): The pitch of the sound. Defaults to <code>100</code>.</li> <li>shouldEmit (<code>Bool</code>): Whether to emit the sound server-side (<code>true</code>) or send it to the client (<code>false</code>).</li> </ol> <p>Example</p> <pre><code>player:playSound(\"ambient/alarms/warningbell1.wav\", 100, 100, false)\n</code></pre>"},{"location":"framework/meta/player_meta/#openui","title":"openUI","text":"<p>Description</p> <p>Opens a VGUI panel for the player.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>panel (<code>String</code>): The name of the VGUI panel to open.</li> </ul> <p>Example</p> <pre><code>player:openUI(\"InventoryPanel\")\n</code></pre>"},{"location":"framework/meta/player_meta/#openpage","title":"openPage","text":"<p>Description</p> <p>Opens a web page for the player.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>url (<code>String</code>): The URL of the web page to open.</li> </ul> <p>Example</p> <pre><code>player:openPage(\"https://example.com\")\n</code></pre>"},{"location":"framework/meta/player_meta/#requestdropdown","title":"requestDropdown","text":"<p>Description</p> <p>Requests a dropdown selection from the player.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>title (<code>String</code>): The title of the request.</li> <li>subTitle (<code>String</code>): The subtitle of the request.</li> <li>options (<code>Table</code>): The table of options to choose from.</li> <li>callback (<code>function</code>): The function to call upon receiving the selected option.</li> </ol> <p>Example</p> <pre><code>player:requestDropdown(\"Choose Option\", \"Select one of the following:\", {\"Option1\", \"Option2\"}, function(selected)\n    print(\"Player selected:\", selected)\nend)\n</code></pre>"},{"location":"framework/meta/player_meta/#requestoptions","title":"requestOptions","text":"<p>Description</p> <p>Requests multiple options selection from the player.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>title (<code>String</code>): The title of the request.</li> <li>subTitle (<code>String</code>): The subtitle of the request.</li> <li>options (<code>Table</code>): The table of options to choose from.</li> <li>limit (<code>int</code>): The maximum number of selectable options.</li> <li>callback (<code>function</code>): The function to call upon receiving the selected options.</li> </ol> <p>Example</p> <pre><code>player:requestOptions(\"Select Items\", \"Choose up to 3 items:\", {\"Item1\", \"Item2\", \"Item3\"}, 3, function(selected)\n    print(\"Player selected:\", table.concat(selected, \", \"))\nend)\n</code></pre>"},{"location":"framework/meta/player_meta/#requeststring","title":"requestString","text":"<p>Description</p> <p>Requests a string input from the player. Supports both callback and promise-based usage.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>title (<code>String</code>): The title of the string input dialog.</li> <li>subTitle (<code>String</code>): The subtitle or description of the string input dialog.</li> <li>callback (<code>function</code>, optional): The function to call with the entered string.</li> <li>default (<code>String</code>, optional): The default value for the string input.</li> </ol> <p>Returns</p> <ul> <li>Promise|nil: A promise object resolving with the entered string, or <code>nil</code> if a callback is provided.</li> </ul> <p>Example</p> <pre><code>-- Using callback\nplayer:requestString(\"Enter Name\", \"Please enter your name:\", function(name)\n    print(\"Player entered:\", name)\nend)\n\n-- Using promise\nlocal promise = player:requestString(\"Enter Name\", \"Please enter your name:\", \"DefaultName\")\nif promise then\n    promise:next(function(name)\n        print(\"Player entered:\", name)\n    end)\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#binaryquestion","title":"binaryQuestion","text":"<p>Description</p> <p>Requests a binary choice from the player.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>question (<code>String</code>): The question to present to the player.</li> <li>option1 (<code>String</code>): The text for the first option.</li> <li>option2 (<code>String</code>): The text for the second option.</li> <li>manualDismiss (<code>Bool</code>): Whether the notice should be manually dismissed.</li> <li>callback (<code>function</code>): The function to call with the choice (<code>0</code> or <code>1</code>) when the player selects an option.</li> </ol> <p>Example</p> <pre><code>player:binaryQuestion(\"Confirm Action\", \"Yes\", \"No\", false, function(choice)\n    if choice == 0 then\n        print(\"Player chose Yes.\")\n    else\n        print(\"Player chose No.\")\n    end\nend)\n</code></pre>"},{"location":"framework/meta/player_meta/#getplaytime","title":"getPlayTime","text":"<p>Description</p> <p>Retrieves the player's total playtime.</p> <p>Realm</p> <p><code>Server</code> and Client</p> <p>Returns</p> <ul> <li>Float: The total playtime of the player in seconds.</li> </ul> <p>Example</p> <pre><code>local playTime = player:getPlayTime()\nprint(\"Playtime:\", playTime, \"seconds\")\n</code></pre>"},{"location":"framework/meta/player_meta/#createserverragdoll","title":"createServerRagdoll","text":"<p>Description</p> <p>Creates a ragdoll entity for the player on the server.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>dontSetPlayer (<code>Bool</code>): Determines whether to associate the player with the ragdoll.</li> </ul> <p>Returns</p> <ul> <li>Entity: The created ragdoll entity.</li> </ul> <p>Example</p> <pre><code>local ragdoll = player:createServerRagdoll()\n</code></pre>"},{"location":"framework/meta/player_meta/#dostaredaction","title":"doStaredAction","text":"<p>Description</p> <p>Performs a stared action towards an entity for a certain duration. Executes callbacks upon completion or cancellation.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>entity (<code>Entity</code>): The entity towards which the player performs the stared action.</li> <li>callback (<code>function</code>): The function to call when the stared action is completed.</li> <li>time (<code>int</code>, optional): The duration of the stared action in seconds. Defaults to <code>5</code>.</li> <li>onCancel (<code>function</code>): The function to call if the stared action is canceled.</li> <li>distance (<code>int</code>, optional): The maximum distance for the stared action. Defaults to <code>96</code>.</li> </ol> <p>Example</p> <pre><code>player:doStaredAction(targetEntity, function()\n    print(\"Stared action completed.\")\nend, 10, function()\n    print(\"Stared action canceled.\")\nend, 150)\n</code></pre>"},{"location":"framework/meta/player_meta/#notify","title":"notify","text":"<p>Description</p> <p>Notifies the player with a message using the Lilia notice system.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>message (<code>String</code>): The message to notify the player.</li> </ul> <p>Example</p> <pre><code>player:notify(\"You have received a new item!\")\n</code></pre>"},{"location":"framework/meta/player_meta/#notifylocalized","title":"notifyLocalized","text":"<p>Description</p> <p>Notifies the player with a localized message using the Lilia notice system.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>message (<code>String</code>): The key of the localized message to notify the player.</li> <li>... (<code>any</code>): Additional arguments to format the localized message.</li> </ul> <p>Example</p> <pre><code>player:notifyLocalized(\"welcome_message\", player:Nick())\n</code></pre>"},{"location":"framework/meta/player_meta/#createragdoll","title":"createRagdoll","text":"<p>Description</p> <p>Creates a ragdoll entity for the player. Can optionally freeze the ragdoll initially.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>freeze (<code>Bool</code>): Whether to freeze the ragdoll initially.</li> </ul> <p>Returns</p> <ul> <li>Entity: The created ragdoll entity.</li> </ul> <p>Example</p> <pre><code>local ragdoll = player:createRagdoll(true)\n</code></pre>"},{"location":"framework/meta/player_meta/#setragdolled","title":"setRagdolled","text":"<p>Description</p> <p>Sets the player to a ragdolled state or removes the ragdoll.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>state (<code>Bool</code>): Whether to set the player to a ragdolled state (<code>true</code>) or remove the ragdoll (<code>false</code>).</li> <li>time (<code>int</code>, optional): The duration for which the player remains ragdolled.</li> <li>getUpGrace (<code>int</code>, optional): The grace period for the player to get up before the ragdoll is removed.</li> <li>getUpMessage (<code>String</code>, optional): The message displayed when the player is getting up. Defaults to <code>\"@wakingUp\"</code>.</li> </ol> <p>Example</p> <pre><code>player:setRagdolled(true, 10, 5, \"@gettingUp\")\n</code></pre>"},{"location":"framework/meta/player_meta/#syncvars","title":"syncVars","text":"<p>Description</p> <p>Synchronizes networked variables with the player.</p> <p>Realm</p> <p><code>Server</code></p> <p>Example</p> <pre><code>player:syncVars()\n</code></pre>"},{"location":"framework/meta/player_meta/#setlocalvar","title":"setLocalVar","text":"<p>Description</p> <p>Sets a local variable for the player and synchronizes it over the network.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>key (<code>String</code>): The key of the variable.</li> <li>value (<code>any</code>): The value of the variable.</li> </ol> <p>Example</p> <pre><code>player:setLocalVar(\"health\", 100)\n</code></pre>"},{"location":"framework/meta/player_meta/#isfaction","title":"isFaction","text":"<p>Description</p> <p>Checks if the player belongs to the specified faction.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>faction (<code>String</code>): The faction to check against.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player belongs to the specified faction, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isFaction(\"Police\") then\n    print(\"Player is in the Police faction.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isclass","title":"isClass","text":"<p>Description</p> <p>Checks if the player belongs to the specified class.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>class (<code>String</code>): The class to check against.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player belongs to the specified class, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isClass(\"Medic\") then\n    print(\"Player is a Medic.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getdarkrpvar","title":"getDarkRPVar","text":"<p>Description</p> <p>Retrieves the player's DarkRP money. This is used as compatibility for DarkRP Vars.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>var (<code>String</code>): The DarkRP variable to fetch (only <code>\"money\"</code> is allowed).</li> </ul> <p>Returns</p> <ul> <li>Integer|nil: The player's money if the variable is valid, or <code>nil</code> if not.</li> </ul> <p>Example</p> <pre><code>local money = player:getDarkRPVar(\"money\")\nif money then\n    print(\"Player Money:\", money)\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getmoney","title":"getMoney","text":"<p>Description</p> <p>Retrieves the amount of money owned by the player's character.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Integer: The amount of money owned by the player's character.</li> </ul> <p>Example</p> <pre><code>local money = player:getMoney()\nprint(\"Player Money:\", money)\n</code></pre>"},{"location":"framework/meta/player_meta/#canafford","title":"canAfford","text":"<p>Description</p> <p>Checks if the player's character can afford a specified amount of money. This function uses Lilia methods to determine if the player can afford the specified amount. It is designed to be compatible with the DarkRP <code>canAfford</code> method.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>amount (<code>int</code>): The amount of money to check.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the player's character can afford the specified amount of money.</li> </ul> <p>Example</p> <pre><code>if player:canAfford(500) then\n    print(\"Player can afford the item.\")\nelse\n    print(\"Player cannot afford the item.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#addmoney","title":"addMoney","text":"<p>Description</p> <p>Adds money to the player's character. This function uses Lilia methods to add the specified amount of money to the player. It handles wallet limits and spawns excess money as an item in the world if necessary.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>amount (<code>int</code>): The amount of money to add.</li> </ul> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the operation was successful, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>player:addMoney(1000)\n</code></pre>"},{"location":"framework/meta/player_meta/#takemoney","title":"takeMoney","text":"<p>Description</p> <p>Takes money from the player's character.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>amount (<code>int</code>): The amount of money to take.</li> </ul> <p>Example</p> <pre><code>player:takeMoney(200)\n</code></pre>"},{"location":"framework/meta/player_meta/#hasskilllevel","title":"hasSkillLevel","text":"<p>Description</p> <p>Checks if the player has a skill level equal to or greater than the specified level.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ol> <li>skill (<code>String</code>): The skill to check.</li> <li>level (<code>int</code>): The required skill level.</li> </ol> <p>Returns</p> <ul> <li>Boolean: Whether the player's skill level meets or exceeds the specified level.</li> </ul> <p>Example</p> <pre><code>if player:hasSkillLevel(\"Archery\", 3) then\n    print(\"Player has Archery level 3 or higher.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#meetsrequiredskills","title":"meetsRequiredSkills","text":"<p>Description</p> <p>Checks if the player meets the required skill levels.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>requiredSkillLevels (<code>Table</code>): A table containing the required skill levels.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the player meets all the required skill levels.</li> </ul> <p>Example</p> <pre><code>local requiredSkills = {Archery = 2, Stealth = 3}\nif player:meetsRequiredSkills(requiredSkills) then\n    print(\"Player meets all required skills.\")\nelse\n    print(\"Player does not meet the required skills.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#restorestamina","title":"restoreStamina","text":"<p>Description</p> <p>Restores stamina for the player. This function restores a certain amount of stamina to the player, clamping the value between 0 and the character's maximum stamina. If stamina is restored above a certain threshold, it will trigger the removal of a breathless state.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>amount (<code>int</code>): The amount of stamina to restore.</li> </ul> <p>Example</p> <pre><code>player:restoreStamina(10)\n</code></pre>"},{"location":"framework/meta/player_meta/#consumestamina","title":"consumeStamina","text":"<p>Description</p> <p>Consumes stamina from the player. This function decreases the player's stamina by a specified amount, clamping the value between 0 and the character's maximum stamina. If stamina is depleted, it may trigger a breathless state.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ul> <li>amount (<code>int</code>): The amount of stamina to consume.</li> </ul> <p>Example</p> <pre><code>player:consumeStamina(5)\n</code></pre>"},{"location":"framework/meta/player_meta/#caneditvendor","title":"CanEditVendor","text":"<p>Description</p> <p>Determines if the player can edit a vendor. This function checks whether the player has the necessary privilege to edit vendors.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player has the privilege to edit vendors, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:CanEditVendor() then\n    print(\"Player can edit vendors.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#canoverrideview","title":"CanOverrideView","text":"<p>Description</p> <p>Checks various conditions to determine if the player can switch to a third-person view.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player can override the view to third-person, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:CanOverrideView() then\n    print(\"Player can switch to third-person view.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isinthirdperson","title":"IsInThirdPerson","text":"<p>Description</p> <p>Checks if the player is currently using third-person view. This function verifies if third-person mode is active for the player.</p> <p>Realm</p> <p><code>Client</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is in third-person view, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:IsInThirdPerson() then\n    print(\"Player is in third-person view.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isuser","title":"isUser","text":"<p>Description</p> <p>Checks if the player belongs to the \"user\" user group.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is in the \"user\" group, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isUser() then\n    print(\"Player is a regular user.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isstaff","title":"isStaff","text":"<p>Description</p> <p>Checks if the player is a staff member.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is a staff member, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isStaff() then\n    print(\"Player is a staff member.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isvip","title":"isVIP","text":"<p>Description</p> <p>Checks if the player is a VIP.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the player is a VIP, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isVIP() then\n    print(\"Player is a VIP.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#isstaffonduty","title":"isStaffOnDuty","text":"<p>Description</p> <p>Checks if the staff member is currently on duty (FACTION_STAFF).</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the staff member is currently on duty, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if player:isStaffOnDuty() then\n    print(\"Staff member is on duty.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#haswhitelist","title":"hasWhitelist","text":"<p>Description</p> <p>Checks if the player has whitelisted access to a faction.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>faction (<code>int</code>): The faction to check for whitelisting.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the player has whitelisted access to the specified faction.</li> </ul> <p>Example</p> <pre><code>if player:hasWhitelist(TEAM_POLICE) then\n    print(\"Player has access to the Police faction.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getclass","title":"getClass","text":"<p>Description</p> <p>Retrieves the class of the player's character.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String|nil: The class of the player's character, or <code>nil</code> if not found.</li> </ul> <p>Example</p> <pre><code>local class = player:getClass()\nif class then\n    print(\"Player Class:\", class)\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#hasclasswhitelist","title":"hasClassWhitelist","text":"<p>Description</p> <p>Checks if the player has whitelisted access to a class.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>class (<code>int</code>): The class to check for whitelisting.</li> </ul> <p>Returns</p> <ul> <li>Boolean: Whether the player has whitelisted access to the specified class.</li> </ul> <p>Example</p> <pre><code>if player:hasClassWhitelist(\"Medic\") then\n    print(\"Player has access to the Medic class.\")\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#getclassdata","title":"getClassData","text":"<p>Description</p> <p>Retrieves the data of the player's character class.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table|nil: A table containing the data of the player's character class, or <code>nil</code> if not found.</li> </ul> <p>Example</p> <pre><code>local classData = player:getClassData()\nif classData then\n    print(\"Player Class Data:\", classData.name)\nend\n</code></pre>"},{"location":"framework/meta/player_meta/#whitelistallclasses","title":"WhitelistAllClasses","text":"<p>Description</p> <p>Whitelists all classes for the player.</p> <p>Realm</p> <ul> <li>Server</li> </ul> <p>Example</p> <pre><code>player:WhitelistAllClasses()\n</code></pre>"},{"location":"framework/meta/player_meta/#whitelistallfactions","title":"WhitelistAllFactions","text":"<p>Description</p> <p>Whitelists all factions for the player.</p> <p>Realm</p> <ul> <li>Server</li> </ul> <p>Example</p> <pre><code>player:WhitelistAllFactions()\n</code></pre>"},{"location":"framework/meta/player_meta/#whitelisteverything","title":"WhitelistEverything","text":"<p>Description</p> <p>Whitelists everything (all classes and factions) for the player.</p> <p>Realm</p> <ul> <li>Server</li> </ul> <p>Example</p> <pre><code>player:WhitelistEverything()\n</code></pre>"},{"location":"framework/meta/player_meta/#classwhitelist","title":"classWhitelist","text":"<p>Description</p> <p>Whitelists the player for a specific class.</p> <p>Realm</p> <ul> <li>Server</li> </ul> <p>Parameters</p> <ul> <li>class (<code>int</code>): The class to whitelist the player for.</li> </ul> <p>Example</p> <pre><code>player:classWhitelist(\"Medic\")\n</code></pre>"},{"location":"framework/meta/player_meta/#classunwhitelist","title":"classUnWhitelist","text":"<p>Description</p> <p>Removes the whitelist status for a specific class from the player.</p> <p>Realm</p> <ul> <li>Server</li> </ul> <p>Parameters</p> <ul> <li>class (<code>int</code>): The class to remove the whitelist status for.</li> </ul> <p>Example</p> <pre><code>player:classUnWhitelist(\"Medic\")\n</code></pre>"},{"location":"framework/meta/player_meta/#setwhitelisted","title":"setWhitelisted","text":"<p>Description</p> <p>Sets whether the player is whitelisted for a faction.</p> <p>Realm</p> <p><code>Server</code></p> <p>Parameters</p> <ol> <li>faction (<code>int</code>): The faction ID.</li> <li>whitelisted (<code>bool</code>): Whether the player should be whitelisted for the faction.</li> </ol> <p>Returns</p> <ul> <li>Boolean: Whether the operation was successful.</li> </ul> <p>Example</p> <pre><code>player:setWhitelisted(TEAM_POLICE, true)\n</code></pre>"},{"location":"framework/meta/player_meta/#isliliapersistent","title":"IsLiliaPersistent","text":"<p>Description</p> <p>Checks if the entity is persistent. This function checks whether the entity is flagged as persistent.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the entity is persistent, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if entity:IsLiliaPersistent() then\n    print(\"Entity is persistent.\")\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/","title":"Tool meta","text":"<p>A custom tool class based on the Base GMOD Toolgun, designed for integration with Lilia's framework.</p> <p>The <code>ToolGunMeta</code> class extends the functionality of the base GMOD Toolgun, enabling seamless integration with Lilia's files and configuration. This custom tool class provides a flexible framework for creating and managing interactive tools within Garry's Mod, specifically tailored to work with Lilia's environment and system.</p> <p>The <code>ToolGunMeta</code> class is designed to work in conjunction with Lilia's file system and configuration setup. It allows for the implementation of toolguns that can be dynamically loaded and configured based on Lilia's files, offering a robust solution for extending tool functionalities in a modular way.</p> <p>The <code>ToolGunMeta</code> class provides a foundation for creating custom tools that integrate smoothly with Lilia's system. Developers can extend and modify the class to fit specific needs, leveraging Lilia's configuration files to dictate tool behavior and appearance. This approach ensures that tools can be easily adapted and updated in line with Lilia's framework, providing a consistent and maintainable tool environment.</p> <p>By integrating with Lilia's files, the <code>ToolGunMeta</code> class enables developers to build sophisticated tools that are fully compatible with Lilia's system, enhancing the overall gameplay experience and tool management within Garry's Mod.</p>"},{"location":"framework/meta/tool_meta/#create","title":"Create","text":"<p>Description</p> <p>Creates a new tool object with default properties. Initializes the metatable and sets up various default values such as <code>Mode</code>, <code>SWEP</code>, <code>Owner</code>, <code>ClientConVar</code>, <code>ServerConVar</code>, <code>Objects</code>, <code>Stage</code>, <code>Message</code>, <code>LastMessage</code>, and <code>AllowedCVar</code>.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table: A new tool object with default properties.</li> </ul> <p>Example</p> <pre><code>local tool = ToolGunMeta:Create()\ntool.Mode = \"builder\"\n</code></pre>"},{"location":"framework/meta/tool_meta/#createconvars","title":"CreateConVars","text":"<p>Description</p> <p>Creates client and server console variables (ConVars) for the tool based on its mode. Client ConVars are created on the client-side, while server ConVars are created on the server-side.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>tool:CreateConVars()\n</code></pre>"},{"location":"framework/meta/tool_meta/#getserverinfo","title":"GetServerInfo","text":"<p>Description</p> <p>Retrieves server-side information for a given property by accessing the server ConVar associated with the tool's mode.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>property (<code>String</code>): The name of the property to retrieve.</li> </ul> <p>Returns</p> <ul> <li>ConVar: The server ConVar object.</li> </ul> <p>Example</p> <pre><code>local allowUse = tool:GetServerInfo(\"allow_use\"):GetBool()\n</code></pre>"},{"location":"framework/meta/tool_meta/#buildconvarlist","title":"BuildConVarList","text":"<p>Description</p> <p>Builds a list of client-side ConVars by appending the tool's mode prefix to each ConVar name.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Table: A table containing the mode-prefixed ConVars.</li> </ul> <p>Example</p> <pre><code>local convars = tool:BuildConVarList()\nfor k, v in pairs(convars) do\n    print(k, v)\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#getclientinfo","title":"GetClientInfo","text":"<p>Description</p> <p>Retrieves client-side information for a given property by accessing the client ConVar associated with the tool's mode.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>property (<code>String</code>): The name of the property to retrieve.</li> </ul> <p>Returns</p> <ul> <li>String: The value of the client ConVar.</li> </ul> <p>Example</p> <pre><code>local toolSetting = tool:GetClientInfo(\"setting\")\nprint(\"Tool Setting:\", toolSetting)\n</code></pre>"},{"location":"framework/meta/tool_meta/#getclientnumber","title":"GetClientNumber","text":"<p>Description</p> <p>Retrieves a numerical value from client-side ConVars. Returns the value as a number or a default value if the ConVar does not exist.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Parameters</p> <ul> <li>property (<code>String</code>): The name of the property to retrieve.</li> <li>default (<code>float</code>): The default value to return if the ConVar does not exist.</li> </ul> <p>Returns</p> <ul> <li>Float: The numerical value of the client ConVar.</li> </ul> <p>Example</p> <pre><code>local toolPower = tool:GetClientNumber(\"power\", 10)\nprint(\"Tool Power:\", toolPower)\n</code></pre>"},{"location":"framework/meta/tool_meta/#allowed","title":"Allowed","text":"<p>Description</p> <p>Checks if the tool is allowed on the server based on the server ConVar <code>AllowedCVar</code>. Always returns <code>true</code> on the client-side.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>true</code> if the tool is allowed, <code>false</code> otherwise.</li> </ul> <p>Example</p> <pre><code>if tool:Allowed() then\n    print(\"Tool is allowed.\")\nelse\n    print(\"Tool is not allowed.\")\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#init","title":"Init","text":"<p>Description</p> <p>Placeholder for initializing the tool. Intended to be overridden if initialization logic is needed when the tool is created.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>function ToolGunMeta:Init()\n    -- Custom initialization logic here\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#getmode","title":"GetMode","text":"<p>Description</p> <p>Retrieves the current mode of the tool, which is a string representing the specific operation the tool is set to perform.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>String: The current mode of the tool.</li> </ul> <p>Example</p> <pre><code>local mode = tool:GetMode()\nprint(\"Tool Mode:\", mode)\n</code></pre>"},{"location":"framework/meta/tool_meta/#getswep","title":"GetSWEP","text":"<p>Description</p> <p>Retrieves the SWEP (Scripted Weapon) associated with the tool.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>SWEP: The SWEP object associated with the tool.</li> </ul> <p>Example</p> <pre><code>local swep = tool:GetSWEP()\nprint(\"Tool SWEP:\", swep:GetClass())\n</code></pre>"},{"location":"framework/meta/tool_meta/#getowner","title":"GetOwner","text":"<p>Description</p> <p>Retrieves the owner of the tool by accessing the SWEP's <code>Owner</code> property.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Player: The player who owns the tool.</li> </ul> <p>Example</p> <pre><code>local owner = tool:GetOwner()\nprint(\"Tool Owner:\", owner:Nick())\n</code></pre>"},{"location":"framework/meta/tool_meta/#getweapon","title":"GetWeapon","text":"<p>Description</p> <p>Retrieves the weapon associated with the tool by accessing the SWEP's <code>Weapon</code> property or the tool's own <code>Weapon</code> property.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Weapon: The weapon object associated with the tool.</li> </ul> <p>Example</p> <pre><code>local weapon = tool:GetWeapon()\nprint(\"Associated Weapon:\", weapon:GetClass())\n</code></pre>"},{"location":"framework/meta/tool_meta/#leftclick","title":"LeftClick","text":"<p>Description</p> <p>Handles the left-click action with the tool. Intended to be overridden to define custom behavior when the player left-clicks with the tool. By default, it does nothing and returns <code>false</code>.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>false</code> by default, indicating no action was taken.</li> </ul> <p>Example</p> <pre><code>function ToolGunMeta:LeftClick(trace)\n    -- Custom left-click logic here\n    return true\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#rightclick","title":"RightClick","text":"<p>Description</p> <p>Handles the right-click action with the tool. Intended to be overridden to define custom behavior when the player right-clicks with the tool. By default, it does nothing and returns <code>false</code>.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Returns</p> <ul> <li>Boolean: <code>false</code> by default, indicating no action was taken.</li> </ul> <p>Example</p> <pre><code>function ToolGunMeta:RightClick(trace)\n    -- Custom right-click logic here\n    return true\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#reload","title":"Reload","text":"<p>Description</p> <p>Handles the reload action with the tool. Clears the objects that the tool is currently manipulating when the player reloads with the tool.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>function ToolGunMeta:Reload()\n    self:ClearObjects()\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#deploy","title":"Deploy","text":"<p>Description</p> <p>Deploys the tool when the player equips it. Releases any ghost entities associated with the tool.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>function ToolGunMeta:Deploy()\n    self:ReleaseGhostEntity()\n    return\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#holster","title":"Holster","text":"<p>Description</p> <p>Holsters the tool when the player unequips it. Releases any ghost entities associated with the tool.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>function ToolGunMeta:Holster()\n    self:ReleaseGhostEntity()\n    return\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#think","title":"Think","text":"<p>Description</p> <p>Handles the tool's \"think\" logic. Called periodically to perform updates. By default, it releases any ghost entities associated with the tool.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>function ToolGunMeta:Think()\n    self:ReleaseGhostEntity()\nend\n</code></pre>"},{"location":"framework/meta/tool_meta/#checkobjects","title":"CheckObjects","text":"<p>Description</p> <p>Checks the validity of objects the tool is manipulating. Iterates over the tool's objects and clears them if they are no longer valid, such as if the entity is no longer part of the world or is invalid.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>tool:CheckObjects()\n</code></pre>"},{"location":"framework/meta/tool_meta/#clearobjects","title":"ClearObjects","text":"<p>Description</p> <p>Clears all objects the tool is manipulating. Removes all objects from the tool's <code>Objects</code> table, effectively resetting the tool's state.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>tool:ClearObjects()\n</code></pre>"},{"location":"framework/meta/tool_meta/#releaseghostentity","title":"ReleaseGhostEntity","text":"<p>Description</p> <p>Releases any ghost entities associated with the tool. Removes any ghost entities the tool may be holding, ensuring that no visual artifacts remain when the tool is not actively manipulating objects.</p> <p>Realm</p> <p><code>Shared</code></p> <p>Example</p> <pre><code>tool:ReleaseGhostEntity()\n</code></pre>"},{"location":"information/compatibility/","title":"Addons with Improved Compatibility","text":"<p>This page outlines various addons and the compatibility enhancements implemented to ensure seamless integration with the framework. Each addon includes its URL and a description of the specific compatibility adjustments made.</p>"},{"location":"information/compatibility/#prone-mod","title":"Prone Mod","text":"<ul> <li> <p>Addon URL: Prone Mod</p> </li> <li> <p>Compatibility Added: Made animations reset at proper times.</p> </li> </ul>"},{"location":"information/compatibility/#explanation","title":"Explanation","text":"<p>Ensured that when a player toggles prone mode, their animations reset correctly, preventing animation glitches or stuck states.</p>"},{"location":"information/compatibility/#ulx","title":"ULX","text":"<ul> <li> <p>Addon URL: ULX</p> </li> <li> <p>Compatibility Added: Removed obsolete hooks.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_1","title":"Explanation","text":"<p>Eliminated deprecated hooks to prevent conflicts and ensure that ULX operates efficiently within the framework.</p>"},{"location":"information/compatibility/#sam","title":"SAM","text":"<ul> <li> <p>Addon URL: SAM</p> </li> <li> <p>Compatibility Added: Implemented an auto administrator setter and fixed prop limits to work with SAM.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_2","title":"Explanation","text":"<ul> <li> <p>Auto Administrator Setter: Automatically assigns administrator status to certain players, enhancing server management.</p> </li> <li> <p>Prop Limits Fix: Adjusted prop limits to be compatible with SAM's prop handling, preventing excessive prop spawning.</p> </li> </ul>"},{"location":"information/compatibility/#advanced-dupe-2","title":"Advanced Dupe 2","text":"<ul> <li> <p>Addon URL: Advanced Dupe 2</p> </li> <li> <p>Compatibility Added: Fixed several crashing exploits.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_3","title":"Explanation","text":"<p>Addressed vulnerabilities that caused server crashes when using Advanced Dupe 2, ensuring stable and secure duplication processes.</p>"},{"location":"information/compatibility/#advanced-dupe-1","title":"Advanced Dupe 1","text":"<ul> <li> <p>Addon URL: Advanced Dupe 1</p> </li> <li> <p>Compatibility Added: Fixed several crashing exploits.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_4","title":"Explanation","text":"<p>Similar to Advanced Dupe 2, resolved issues that led to server instability, enhancing the reliability of duplication features.</p>"},{"location":"information/compatibility/#permaprops","title":"PermaProps","text":"<ul> <li> <p>Addon URL: PermaProps</p> </li> <li> <p>Compatibility Added: Removed the ability to PermaProp certain restricted entities.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_5","title":"Explanation","text":"<p>Prevented players from permanently spawning restricted entities using PermaProps, maintaining server security and integrity.</p>"},{"location":"information/compatibility/#pac3","title":"PAC3","text":"<ul> <li> <p>Addon URL: PAC3</p> </li> <li> <p>Compatibility Added: Restricted PAC to a flag and permission, and made it reset when needed.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_6","title":"Explanation","text":"<ul> <li> <p>Flag and Permission Restriction: Limited PAC3 usage to players with specific flags and permissions, controlling access.</p> </li> <li> <p>Reset Mechanism: Implemented automatic resetting of PAC3 settings when necessary to maintain performance and prevent misuse.</p> </li> </ul>"},{"location":"information/compatibility/#simfphys-vehicles-aka-lvs","title":"Simfphys Vehicles AKA LVS","text":"<ul> <li> <p>Addon URL: Simfphys Vehicles</p> </li> <li> <p>Compatibility Added: Added car crash damage and implemented some console commands for performance.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_7","title":"Explanation","text":"<ul> <li> <p>Car Crash Damage: Enabled realistic damage handling for vehicle collisions.</p> </li> <li> <p>Console Commands: Added commands to manage vehicle performance, allowing server admins to optimize gameplay.</p> </li> </ul>"},{"location":"information/compatibility/#sit-anywhere","title":"Sit Anywhere","text":"<ul> <li> <p>Addon URL: Sit Anywhere</p> </li> <li> <p>Compatibility Added: Removed the ability to sit on certain locations and added damage on seats by default.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_8","title":"Explanation","text":"<ul> <li> <p>Restricted Sitting Locations: Prevented players from sitting in undesired or harmful areas.</p> </li> <li> <p>Seat Damage: Introduced damage mechanics when sitting, adding an extra layer of gameplay challenge.</p> </li> </ul>"},{"location":"information/compatibility/#3d-stream-radio","title":"3D Stream Radio","text":"<ul> <li> <p>Addon URL: 3D Stream Radio</p> </li> <li> <p>Compatibility Added: Added ability for radios to save on the map.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_9","title":"Explanation","text":"<p>Enabled persistence of radio objects on the map, allowing their state to be saved and restored, enhancing user experience.</p>"},{"location":"information/compatibility/#vcmod","title":"VCMod","text":"<ul> <li> <p>Addon URL: VCMod Main</p> </li> <li> <p>Compatibility Added: Added monetary compatibility.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_10","title":"Explanation","text":"<p>Integrated VCMod with the server's monetary system, ensuring that vehicle customization and purchases align with the server's economy.</p>"},{"location":"information/compatibility/#vjbase","title":"VJBase","text":"<ul> <li> <p>Addon URL: VJBase</p> </li> <li> <p>Compatibility Added: Made the server enable certain settings by default, improving performance, and removed some harmful hooks.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_11","title":"Explanation","text":"<ul> <li> <p>Default Settings: Configured VJBase to use optimized settings out of the box for better performance.</p> </li> <li> <p>Hook Removal: Eliminated hooks that could negatively impact server stability or security.</p> </li> </ul>"},{"location":"information/compatibility/#vmanip","title":"VManip","text":"<ul> <li> <p>Addon URL: VManip</p> </li> <li> <p>Compatibility Added: Allows for item pickups to have VManip Animations.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_12","title":"Explanation","text":"<p>Enabled VManip animations during item pickup actions, providing a more immersive and visually appealing interaction for players.</p>"},{"location":"information/compatibility/#darkrp","title":"DarkRP","text":"<ul> <li> <p>Addon URL: DarkRP</p> </li> <li> <p>Compatibility Added: Adds compatibility with several DarkRP addons monetarily and in several other functions.</p> </li> </ul>"},{"location":"information/compatibility/#explanation_13","title":"Explanation","text":"<ul> <li> <p>Monetary Compatibility: Integrated with DarkRP's economy system, ensuring that financial transactions and balances align seamlessly.</p> </li> <li> <p>Functional Compatibility: Enhanced compatibility with other DarkRP addons, ensuring smooth operation and reducing conflicts.</p> </li> </ul>"},{"location":"information/getting_started/","title":"Getting started","text":"<p>To fully utilize Lilia, you need both the framework and a schema. This guide will walk you through the necessary steps to set up Lilia on your Garry's Mod server, ensuring a smooth and efficient installation process.</p>"},{"location":"information/getting_started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>A Working Garry's Mod Server: Make sure your server is properly set up and running without any issues.</li> <li>Basic Knowledge of Server Administration: Familiarity with managing a Garry's Mod server will be beneficial.</li> <li>Command Line Proficiency: Understanding how to use the command line is necessary for certain installation steps.</li> <li>Admin Menu: We recommend using SAM for enhanced administrative capabilities.</li> </ul>"},{"location":"information/getting_started/#framework","title":"Framework","text":"<p>Lilia - The latest and currently maintained version of Lilia.</p>"},{"location":"information/getting_started/#schemas","title":"Schemas","text":"<p>It is highly recommended to create your own schema, as you will have full control and understanding of what the schema does. To do so, follow these steps:</p> <ol> <li> <p>Download the Skeleton Schema:</p> <ul> <li>Skeleton Schema</li> </ul> </li> <li> <p>Customize Your Schema:</p> <ul> <li>Use the Skeleton Schema as a base to develop your own unique schema tailored to your server's theme and requirements.</li> </ul> </li> </ol> <p>However, there are also numerous premade schemas that publicly exist, which you can use as a reference or starting point:</p> <ol> <li>MafiaRP Schema</li> <li>1942RP Schema</li> <li>HL2RP Schema</li> <li>MetroRP Schema</li> <li>SCPRP Schema</li> <li>KaiserReichRP Schema</li> <li>FalloutRP Schema</li> </ol>"},{"location":"information/getting_started/#editors","title":"Editors","text":"<p>If you do not have one already, it is highly recommended to use a code editor to develop your scripts. A few recommended editors are:</p> <ol> <li>Visual Studio Code</li> <li>Notepad++</li> <li>Sublime Text</li> <li>Atom</li> </ol>"},{"location":"information/getting_started/#additional-resources","title":"Additional Resources","text":"<ul> <li>Discord Community</li> <li>GitHub Repository</li> <li>Public Modules</li> </ul> <p>By following this comprehensive guide, you will have successfully prepared the necessary components to install Lilia and set up a roleplaying schema on your Garry's Mod server. Lilia offers a wide range of features and customization options to enhance your roleplaying experience.</p>"},{"location":"information/getting_started/#enjoy-your-customized-roleplaying-environment","title":"Enjoy your customized roleplaying environment!","text":""},{"location":"information/installing_the_gamemode/","title":"Installing the gamemode","text":""},{"location":"information/installing_the_gamemode/#installation-tutorial","title":"Installation Tutorial","text":"<p>Lilia is a versatile roleplaying framework for Garry's Mod. This tutorial will guide you through the process of installing Lilia on your Garry's Mod server, ensuring a smooth setup for your roleplaying environment.</p>"},{"location":"information/installing_the_gamemode/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>A Working Garry's Mod Server: Make sure your server is properly set up and running without any issues.</li> <li>Basic Knowledge of Server Administration: Familiarity with managing a Garry's Mod server will be beneficial.</li> <li>Command Line Proficiency: Understanding how to use the command line is necessary for certain installation steps.</li> <li>Admin Menu: We recommend using SAM for enhanced administrative capabilities.</li> </ul>"},{"location":"information/installing_the_gamemode/#step-1-setting-up-your-garrys-mod-server","title":"Step 1: Setting Up Your Garry's Mod Server","text":"<p>If you haven't already, set up your Garry's Mod server. Ensure it's running smoothly before proceeding with the installation of Lilia.</p>"},{"location":"information/installing_the_gamemode/#step-2-downloading-lilia","title":"Step 2: Downloading Lilia","text":"<ol> <li> <p>Visit the Lilia GitHub Repository:</p> <p>Navigate to the Lilia GitHub Repository.</p> </li> <li> <p>Download the ZIP File:</p> <ul> <li>Click on the green \"Code\" button.</li> <li>Select \"Download ZIP.\"</li> <li>Save the ZIP file to a convenient location on your computer.</li> </ul> <pre><code>GitHub Repository: https://github.com/LiliaFramework/Lilia\n</code></pre> </li> </ol>"},{"location":"information/installing_the_gamemode/#step-3-extracting-lilia","title":"Step 3: Extracting Lilia","text":"<ol> <li> <p>Locate the Downloaded ZIP File:</p> <p>Find the <code>Lilia-main.zip</code> file you downloaded.</p> </li> <li> <p>Extract the Contents:</p> <ul> <li>Right-click the ZIP file and select \"Extract All.\"</li> <li>Choose a temporary folder for extraction.</li> </ul> </li> <li> <p>Organize the Extracted Files:</p> <ul> <li>After extraction, you should see several files and a folder: <code>lilia</code>.</li> <li>Move the <code>lilia</code> folder to a separate location for easy access during the upload process.</li> </ul> </li> </ol>"},{"location":"information/installing_the_gamemode/#step-4-uploading-lilia-to-your-server","title":"Step 4: Uploading Lilia to Your Server","text":"<ol> <li> <p>Connect to Your Server:</p> <p>Use an FTP or SFTP client (e.g., FileZilla or WinSCP) to connect to your Garry's Mod server.</p> </li> <li> <p>Navigate to the Gamemodes Directory:</p> <ul> <li>Go to <code>garrysmod/gamemodes</code> within your server's file structure.</li> </ul> </li> <li> <p>Upload the Lilia Folder:</p> <ul> <li>Upload the <code>lilia</code> folder you extracted earlier into the <code>gamemodes</code> directory.</li> </ul> <pre><code>Server Directory Path:\ngarrysmod/gamemodes/lilia\n</code></pre> </li> </ol>"},{"location":"information/installing_the_gamemode/#step-5-configuring-lilia","title":"Step 5: Configuring Lilia","text":"<ol> <li> <p>Backup Default Configuration:</p> <p>Before making any changes, create a backup of the default configuration files to prevent data loss.</p> </li> <li> <p>Edit the Configuration File:</p> <ul> <li>Locate the configuration file, typically found at <code>schema/config/Shared.lua</code>.</li> <li>Open the file in a text editor.</li> </ul> </li> <li> <p>Override Default Values:</p> <p>Modify the configuration to suit your server's needs. For example, you can change default settings, adjust gameplay mechanics, or set up custom options.</p> </li> </ol>"},{"location":"information/installing_the_gamemode/#step-6-starting-lilia-on-your-server","title":"Step 6: Starting Lilia on Your Server","text":"<ol> <li> <p>Restart the Server:</p> <p>After uploading and configuring Lilia, restart your Garry's Mod server to apply the changes.</p> </li> <li> <p>Verify the Installation:</p> <ul> <li>Check the server console for any error messages related to Lilia.</li> <li>Ensure that the server starts without issues and that Lilia is active.</li> </ul> <pre><code>Console Output Example:\n[Lilia] Loaded after X seconds.\n</code></pre> </li> </ol>"},{"location":"information/installing_the_gamemode/#step-7-installing-roleplay-schemas","title":"Step 7: Installing Roleplay Schemas","text":"<p>To enhance your roleplaying experience, install a roleplay schema compatible with the Lilia framework. Follow these steps:</p> <ol> <li> <p>Choose a Schema:</p> <p>Select a schema that fits your server's theme from the available options:</p> <ul> <li>Skeleton Schema</li> <li>MafiaRP Schema</li> <li>1942RP Schema</li> <li>HL2RP Schema</li> <li>MetroRP Schema</li> <li>SCPRP Schema</li> <li>KaiserReichRP Schema</li> <li>FalloutRP Schema</li> <li>Public Modules</li> </ul> </li> <li> <p>Download the Schema:</p> <ul> <li>Visit the chosen schema's GitHub repository.</li> <li>Download the ZIP file or clone the repository.</li> </ul> </li> <li> <p>Extract and Upload:</p> <ul> <li>Extract the schema files to a temporary folder.</li> <li>Upload the schema folder to your server's <code>garrysmod/gamemodes</code> directory.</li> </ul> <pre><code>Server Directory Path:\ngarrysmod/gamemodes/&lt;SchemaName&gt;\n</code></pre> </li> <li> <p>Configure Factions, Items, and Modules:</p> <ul> <li>Navigate to the schema's configuration files (e.g., <code>schema/config/Shared.lua</code>).</li> <li>Customize factions, items, and modules as required to match your server's gameplay mechanics.</li> </ul> </li> <li> <p>Set the Startup Gamemode:</p> <ul> <li>Edit your server's startup configuration to set the gamemode to the newly uploaded schema.</li> <li>This is typically done in the server's launch parameters or configuration files.</li> </ul> <pre><code>Example Server Launch Parameter:\n+gamemode &lt;SchemaName&gt;\n</code></pre> </li> <li> <p>Restart the Server:</p> <ul> <li>Restart your Garry's Mod server to apply the new schema.</li> <li>Verify that the schema loads correctly and that all configurations are active.</li> </ul> </li> </ol>"},{"location":"information/installing_the_gamemode/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully installed Lilia and set up a roleplaying schema on your Garry's Mod server. Lilia offers a wide range of features and customization options to enhance your roleplaying experience. Be sure to explore the Lilia Documentation and community resources to maximize the potential of your server.</p> <p>Enjoy your customized roleplaying environment!</p>"}]}